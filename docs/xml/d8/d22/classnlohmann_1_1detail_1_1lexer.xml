<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d8/d22/classnlohmann_1_1detail_1_1lexer" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::detail::lexer</compoundname>
    <basecompoundref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base" prot="public" virt="non-virtual">nlohmann::detail::lexer_base&lt; BasicJsonType &gt;</basecompoundref>
    <includes refid="d5/db8/json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>BasicJsonType</declname>
        <defname>BasicJsonType</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>InputAdapterType</declname>
        <defname>InputAdapterType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a594e61f96c87b4464beeab681111ac0c" prot="private" static="no">
        <type>typename BasicJsonType::number_integer_t</type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::number_integer_t =  typename BasicJsonType::number_integer_t</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6528" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1af6b19ef34b2e9ee2321cfaf62ee066cb" prot="private" static="no">
        <type>typename BasicJsonType::number_unsigned_t</type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::number_unsigned_t =  typename BasicJsonType::number_unsigned_t</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6529" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a438a78e53120fd2c3ea049161d4798cb" prot="private" static="no">
        <type>typename BasicJsonType::number_float_t</type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::number_float_t =  typename BasicJsonType::number_float_t</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6530" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6530" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1af85c01fd669d529ab93a9e1d80b62015" prot="private" static="no">
        <type>typename BasicJsonType::string_t</type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::string_t =  typename BasicJsonType::string_t</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6531" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a98c69ad433d971104288baef813b2c68" prot="private" static="no">
        <type>typename InputAdapterType::char_type</type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::char_type =  typename InputAdapterType::char_type</definition>
        <argsstring></argsstring>
        <name>char_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6532" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" prot="private" static="no">
        <type>typename std::char_traits&lt; <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a98c69ad433d971104288baef813b2c68" kindref="member">char_type</ref> &gt;::int_type</type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::char_int_type =  typename std::char_traits&lt;char_type&gt;::int_type</definition>
        <argsstring></argsstring>
        <name>char_int_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6533" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6533" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726" prot="public" static="no">
        <type>typename <ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base" kindref="compound">lexer_base</ref>&lt; BasicJsonType &gt;::<ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454" kindref="member">token_type</ref></type>
        <definition>using nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::token_type =  typename lexer_base&lt;BasicJsonType&gt;::token_type</definition>
        <argsstring></argsstring>
        <name>token_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6536" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6536" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a526d001dd91ec55b8032ba98466765c0" prot="private" static="no" mutable="no">
        <type>InputAdapterType</type>
        <definition>InputAdapterType nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::ia</definition>
        <argsstring></argsstring>
        <name>ia</name>
        <briefdescription>
<para>input adapter </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8014" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8014" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a11528814930243028ac5b8901f4a17d7" prot="private" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::ignore_comments</definition>
        <argsstring></argsstring>
        <name>ignore_comments</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>whether comments should be ignored (true) or signaled as errors (false) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8017" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8017" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a40bd85d91d377ade9ccb910e35776c22" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" kindref="member">char_int_type</ref></type>
        <definition>char_int_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <initializer>= std::char_traits&lt;<ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a98c69ad433d971104288baef813b2c68" kindref="member">char_type</ref>&gt;::eof()</initializer>
        <briefdescription>
<para>the current character </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8020" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8020" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a40b108a0e45a7253f6ad85fbdaa6a262" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::next_unget</definition>
        <argsstring></argsstring>
        <name>next_unget</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>whether the next <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9cd3e4cf04d19be521beb8868c1a2fc9" kindref="member">get()</ref> call should just return current </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8023" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a8a1bda107ce1622c0cb3174fa12155ea" prot="private" static="no" mutable="no">
        <type><ref refid="d6/d02/structnlohmann_1_1detail_1_1position__t" kindref="compound">position_t</ref></type>
        <definition>position_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>the start position of the current token </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8026" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a94aec416b883f742ba7f20bd16adb3c3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a98c69ad433d971104288baef813b2c68" kindref="member">char_type</ref> &gt;</type>
        <definition>std::vector&lt;char_type&gt; nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::token_string</definition>
        <argsstring></argsstring>
        <name>token_string</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>raw input token string (for error messages) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8029" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ac4eaf39567bd5f0750e5d7e913fb474d" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af85c01fd669d529ab93a9e1d80b62015" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::token_buffer</definition>
        <argsstring></argsstring>
        <name>token_buffer</name>
        <initializer>{}</initializer>
        <briefdescription>
<para>buffer for variable-length tokens (numbers, strings) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8032" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a84cbcd8c897c98c2ce04d29a29bf84cc" prot="private" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::error_message</definition>
        <argsstring></argsstring>
        <name>error_message</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
<para>a description of occurred lexer errors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8035" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8035" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a5134de850fab8f41474a36ae07998088" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a594e61f96c87b4464beeab681111ac0c" kindref="member">number_integer_t</ref></type>
        <definition>number_integer_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::value_integer</definition>
        <argsstring></argsstring>
        <name>value_integer</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8038" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8038" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae84cbf312215c15d79783380b1592f74" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af6b19ef34b2e9ee2321cfaf62ee066cb" kindref="member">number_unsigned_t</ref></type>
        <definition>number_unsigned_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::value_unsigned</definition>
        <argsstring></argsstring>
        <name>value_unsigned</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8039" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a0d74bb18ba7d32ea7e7c9d9a7d6c2e70" prot="private" static="no" mutable="no">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a438a78e53120fd2c3ea049161d4798cb" kindref="member">number_float_t</ref></type>
        <definition>number_float_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::value_float</definition>
        <argsstring></argsstring>
        <name>value_float</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8040" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8040" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a6f2fd5b4b6b153f11fc8f77213350073" prot="private" static="no" mutable="no">
        <type>const <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" kindref="member">char_int_type</ref></type>
        <definition>const char_int_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::decimal_point_char</definition>
        <argsstring></argsstring>
        <name>decimal_point_char</name>
        <initializer>= &apos;.&apos;</initializer>
        <briefdescription>
<para>the decimal point </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8043" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8043" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a89bbc051da2514a469441a3a30ad63e4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::lexer</definition>
        <argsstring>(InputAdapterType &amp;&amp;adapter, bool ignore_comments_=false) noexcept</argsstring>
        <name>lexer</name>
        <param>
          <type>InputAdapterType &amp;&amp;</type>
          <declname>adapter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignore_comments_</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6538" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6538" bodyend="6542"/>
        <references refid="d5/db8/json_8hpp_1af5c84b7d1a43361bdc14cc6941078000" compoundref="d5/db8/json_8hpp" startline="1637">JSON_HEDLEY_PURE</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ab75d61c4de687717648c7698850ddb9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::lexer</definition>
        <argsstring>(const lexer &amp;)=delete</argsstring>
        <name>lexer</name>
        <param>
          <type>const <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer" kindref="compound">lexer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae95416c7ae8b36f0dd0ab349eaa754a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::lexer</definition>
        <argsstring>(lexer &amp;&amp;)=default</argsstring>
        <name>lexer</name>
        <param>
          <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer" kindref="compound">lexer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6546" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1af7e7002d4bb66e9104d752791b8070f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer" kindref="compound">lexer</ref> &amp;</type>
        <definition>lexer&amp; nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::operator=</definition>
        <argsstring>(lexer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer" kindref="compound">lexer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6547" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a1383bb59c5efd4f9370ca3ee4ad1a4ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer" kindref="compound">lexer</ref> &amp;</type>
        <definition>lexer&amp; nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::operator=</definition>
        <argsstring>(lexer &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer" kindref="compound">lexer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6548" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ac0557f111d82f7729a93ee9b40b31402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::~lexer</definition>
        <argsstring>()=default</argsstring>
        <name>~lexer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9535d0c72adbe9fe149853ebad5faee8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a594e61f96c87b4464beeab681111ac0c" kindref="member">number_integer_t</ref></type>
        <definition>constexpr number_integer_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_number_integer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_number_integer</name>
        <briefdescription>
<para>return integer value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7827" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7827" bodyend="7830"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1abfc85ff04fcb1a5a8d8ea299a4c479e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af6b19ef34b2e9ee2321cfaf62ee066cb" kindref="member">number_unsigned_t</ref></type>
        <definition>constexpr number_unsigned_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_number_unsigned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_number_unsigned</name>
        <briefdescription>
<para>return unsigned integer value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7833" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7833" bodyend="7836"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1adb1a71f6a3e65ed32c452a318967b61e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a438a78e53120fd2c3ea049161d4798cb" kindref="member">number_float_t</ref></type>
        <definition>constexpr number_float_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_number_float</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_number_float</name>
        <briefdescription>
<para>return floating-point value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7839" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7839" bodyend="7842"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a76875bb49a480763f6c48b8586f7e60e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af85c01fd669d529ab93a9e1d80b62015" kindref="member">string_t</ref> &amp;</type>
        <definition>string_t&amp; nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_string</definition>
        <argsstring>()</argsstring>
        <name>get_string</name>
        <briefdescription>
<para>return current string value (implicitly resets the token; useful only once) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7845" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7845" bodyend="7848"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a948c80b8bd8a3095b544e4655e1ca37e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="d6/d02/structnlohmann_1_1detail_1_1position__t" kindref="compound">position_t</ref></type>
        <definition>constexpr position_t nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_position</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_position</name>
        <briefdescription>
<para>return position of last read token </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7855" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7855" bodyend="7858"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae000b7571480e528dee4b281f63d5b15" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref></type>
        <definition>std::string nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_token_string</definition>
        <argsstring>() const</argsstring>
        <name>get_token_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the last read token (for errors only). Will never contain EOF (an arbitrary value that is not a valid char value, often -1), because 255 may legitimately occur. May contain NUL, which should be escaped. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7863" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7863" bodyend="7884"/>
        <references refid="d5/db8/json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" compoundref="d5/db8/json_8hpp" startline="1897">JSON_HEDLEY_RETURNS_NON_NULL</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9da0c649f03e8b3f730501d26c876a78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> constexpr const char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL constexpr const char* nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_error_message</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_error_message</name>
        <briefdescription>
<para>return syntax error message </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7888" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7888" bodyend="7891"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a7cd7d55de2cd398660bc243c7229caf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::skip_bom</definition>
        <argsstring>()</argsstring>
        <name>skip_bom</name>
        <briefdescription>
<para>skip the UTF-8 byte order mark </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true iff there is no BOM or the correct BOM has been skipped </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7901" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7901" bodyend="7913"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a449f3f3703dfbf8b757e12f002668604" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::skip_whitespace</definition>
        <argsstring>()</argsstring>
        <name>skip_whitespace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7915" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7915" bodyend="7922"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a40320a8fef5f1f03b60c8b2f2f40af4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454" kindref="member">token_type</ref></type>
        <definition>token_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::scan</definition>
        <argsstring>()</argsstring>
        <name>scan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7924" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7924" bodyend="8010"/>
        <referencedby refid="d6/d30/classnlohmann_1_1detail_1_1binary__reader_1a26c694413fb860057e1a839d5422b361" compoundref="d5/db8/json_8hpp" startline="10373" endline="10420">nlohmann::detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_high_precision_number</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a48f74c761ce663cd0d92bf428606b535" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1af5c84b7d1a43361bdc14cc6941078000" kindref="member">JSON_HEDLEY_PURE</ref> char</type>
        <definition>static JSON_HEDLEY_PURE char nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_decimal_point</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_decimal_point</name>
        <briefdescription>
<para>return the locale-dependent decimal point </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6558" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6558" bodyend="6563"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a6d3dffb7bb247a7fd7276d49d3a00dc8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>static void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::strtof</definition>
        <argsstring>(float &amp;f, const char *str, char **endptr) noexcept</argsstring>
        <name>strtof</name>
        <param>
          <type>float &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7327" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7327" bodyend="7330"/>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ac8455259d8a06acd2a284a5dd7221aea" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>static void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::strtof</definition>
        <argsstring>(double &amp;f, const char *str, char **endptr) noexcept</argsstring>
        <name>strtof</name>
        <param>
          <type>double &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7333" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7333" bodyend="7336"/>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae01f87db7819a05d0ed17bcb665442e1" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>static void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::strtof</definition>
        <argsstring>(long double &amp;f, const char *str, char **endptr) noexcept</argsstring>
        <name>strtof</name>
        <param>
          <type>long double &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>endptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7339" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7339" bodyend="7342"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1adcf663a9878f58544790f1b6faad2e42" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get_codepoint</definition>
        <argsstring>()</argsstring>
        <name>get_codepoint</name>
        <briefdescription>
<para>get codepoint from 4 hex characters following <computeroutput>\u</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>For input &quot;\u c1 c2 c3 c4&quot; the codepoint is: (c1 * 0x1000) + (c2 * 0x0100) + (c3 * 0x0010) + c4 = (c1 &lt;&lt; 12) + (c2 &lt;&lt; 8) + (c3 &lt;&lt; 4) + (c4 &lt;&lt; 0)</para><para>Furthermore, the possible characters &apos;0&apos;..&apos;9&apos;, &apos;A&apos;..&apos;F&apos;, and &apos;a&apos;..&apos;f&apos; must be converted to the integers 0x0..0x9, 0xA..0xF, 0xA..0xF, resp. The conversion is done by subtracting the offset (0x30, 0x37, and 0x57) between the ASCII value of the character and the desired integer value.</para><para><simplesect kind="return"><para>codepoint (0x0000..0xFFFF) or -1 in case of an error (e.g. EOF or non-hex character) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6584" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6584" bodyend="6615"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1af6fe701b8b3ca5f4a1b58db4658bdf87" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::next_byte_in_range</definition>
        <argsstring>(std::initializer_list&lt; char_int_type &gt; ranges)</argsstring>
        <name>next_byte_in_range</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" kindref="member">char_int_type</ref> &gt;</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
<para>check if the next byte(s) are inside a given range </para>        </briefdescription>
        <detaileddescription>
<para>Adds the current byte and, for each passed range, reads a new byte and checks if it is inside the range. If a violation was detected, set up an error message and return false. Otherwise, return true.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ranges</parametername>
</parameternamelist>
<parameterdescription>
<para>list of integers; interpreted as list of pairs of inclusive lower and upper bound, respectively</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The passed list <emphasis>ranges</emphasis> must have 2, 4, or 6 elements; that is, 1, 2, or 3 pairs. This precondition is enforced by an assertion.</para></simplesect>
<simplesect kind="return"><para>true if and only if no range violation was detected </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6632" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6632" bodyend="6652"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ab6352978e03ebcbc3cd618cd17142f26" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454" kindref="member">token_type</ref></type>
        <definition>token_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::scan_string</definition>
        <argsstring>()</argsstring>
        <name>scan_string</name>
        <briefdescription>
<para>scan a string literal </para>        </briefdescription>
        <detaileddescription>
<para>This function scans a string according to Sect. 7 of RFC 8259. While scanning, bytes are escaped and copied into buffer token_buffer. Then the function returns successfully, token_buffer is <emphasis>not</emphasis> null-terminated (as it may contain \0 bytes), and token_buffer.size() is the number of bytes in the string.</para><para><simplesect kind="return"><para>token_type::value_string if string could be successfully scanned, token_type::parse_error otherwise</para></simplesect>
<simplesect kind="note"><para>In case of errors, variable error_message contains a textual description. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6669" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6669" bodyend="7253"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1afdc68706ad20be93977cd0f97043ea7f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::scan_comment</definition>
        <argsstring>()</argsstring>
        <name>scan_comment</name>
        <briefdescription>
<para>scan a comment </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>whether comment could be scanned successfully </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7259" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7259" bodyend="7324"/>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1aab51a28e32c1957329141baff8eda1c4" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454" kindref="member">token_type</ref></type>
        <definition>token_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::scan_number</definition>
        <argsstring>()</argsstring>
        <name>scan_number</name>
        <briefdescription>
<para>scan a number literal </para>        </briefdescription>
        <detaileddescription>
<para>This function scans a string according to Sect. 6 of RFC 8259.</para><para>The function is realized with a deterministic finite state machine derived from the grammar described in RFC 8259. Starting in state &quot;init&quot;, the input is read and used to determined the next state. Only state &quot;done&quot; accepts the number. State &quot;error&quot; is a trap state to model errors. In the table below, &quot;anything&quot; means any character but the ones listed before.</para><para><table rows="10" cols="8"><row>
<entry thead="yes"><para>state </para></entry><entry thead="yes"><para>0 </para></entry><entry thead="yes"><para>1-9 </para></entry><entry thead="yes"><para>e E </para></entry><entry thead="yes"><para>+ </para></entry><entry thead="yes"><para>- </para></entry><entry thead="yes"><para>. </para></entry><entry thead="yes"><para>anything  </para></entry></row>
<row>
<entry thead="no"><para>init </para></entry><entry thead="no"><para>zero </para></entry><entry thead="no"><para>any1 </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>minus </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry></row>
<row>
<entry thead="no"><para>minus </para></entry><entry thead="no"><para>zero </para></entry><entry thead="no"><para>any1 </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry></row>
<row>
<entry thead="no"><para>zero </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>exponent </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>decimal1 </para></entry><entry thead="no"><para>done </para></entry></row>
<row>
<entry thead="no"><para>any1 </para></entry><entry thead="no"><para>any1 </para></entry><entry thead="no"><para>any1 </para></entry><entry thead="no"><para>exponent </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>decimal1 </para></entry><entry thead="no"><para>done </para></entry></row>
<row>
<entry thead="no"><para>decimal1 </para></entry><entry thead="no"><para>decimal2 </para></entry><entry thead="no"><para>decimal2 </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry></row>
<row>
<entry thead="no"><para>decimal2 </para></entry><entry thead="no"><para>decimal2 </para></entry><entry thead="no"><para>decimal2 </para></entry><entry thead="no"><para>exponent </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry></row>
<row>
<entry thead="no"><para>exponent </para></entry><entry thead="no"><para>any2 </para></entry><entry thead="no"><para>any2 </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>sign </para></entry><entry thead="no"><para>sign </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry></row>
<row>
<entry thead="no"><para>sign </para></entry><entry thead="no"><para>any2 </para></entry><entry thead="no"><para>any2 </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry><entry thead="no"><para>[error] </para></entry></row>
<row>
<entry thead="no"><para>any2 </para></entry><entry thead="no"><para>any2 </para></entry><entry thead="no"><para>any2 </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry><entry thead="no"><para>done </para></entry></row>
</table>
The state machine is realized with one label per state (prefixed with &quot;scan_number_&quot;) and <computeroutput>goto</computeroutput> statements between them. The state machine contains cycles, but any cycle can be left when EOF is read. Therefore, the function is guaranteed to terminate.</para><para>During scanning, the read bytes are stored in token_buffer. This string is then converted to a signed integer, an unsigned integer, or a floating-point number.</para><para><simplesect kind="return"><para>token_type::value_unsigned, token_type::value_integer, or token_type::value_float if number could be successfully scanned, token_type::parse_error otherwise</para></simplesect>
<simplesect kind="note"><para>The scanner is independent of the current locale. Internally, the locale&apos;s decimal point is used instead of <computeroutput>.</computeroutput> to work with the locale-dependent converters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7384" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7384" bodyend="7707"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ad89dec0ac0f4e851925a0499e043b18b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454" kindref="member">token_type</ref></type>
        <definition>token_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::scan_literal</definition>
        <argsstring>(const char_type *literal_text, const std::size_t length, token_type return_type)</argsstring>
        <name>scan_literal</name>
        <param>
          <type>const <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a98c69ad433d971104288baef813b2c68" kindref="member">char_type</ref> *</type>
          <declname>literal_text</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1aa3538cce439a2de6c7893e627b38c454" kindref="member">token_type</ref></type>
          <declname>return_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">literal_text</parametername>
</parameternamelist>
<parameterdescription>
<para>the literal text to expect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the passed literal text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">return_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the token type to return on success </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7715" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7715" bodyend="7728"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a3bda093837339813916d11fb6e396606" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <briefdescription>
<para>reset token_buffer; current character is beginning of token </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7735" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7735" bodyend="7740"/>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9cd3e4cf04d19be521beb8868c1a2fc9" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" kindref="member">char_int_type</ref></type>
        <definition>char_int_type nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::get</definition>
        <argsstring>()</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7752" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7752" bodyend="7779"/>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1ab5811afe1c3efb0b769f7733b8373c6f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::unget</definition>
        <argsstring>()</argsstring>
        <name>unget</name>
        <briefdescription>
<para>unget current character (read it again on next get) </para>        </briefdescription>
        <detaileddescription>
<para>We implement unget by setting variable next_unget to true. The input is not changed - we just simulate ungetting by modifying chars_read_total, chars_read_current_line, and token_string. The next call to <ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9cd3e4cf04d19be521beb8868c1a2fc9" kindref="member">get()</ref> will behave as if the unget character is read again. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7789" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7789" bodyend="7813"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
      </memberdef>
      <memberdef kind="function" id="d8/d22/classnlohmann_1_1detail_1_1lexer_1a36ffc3c33c3aea18291ead7a30fa7cc6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;::add</definition>
        <argsstring>(char_int_type c)</argsstring>
        <name>add</name>
        <param>
          <type><ref refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" kindref="member">char_int_type</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>add a character to token_buffer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="7816" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="7816" bodyend="7819"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>lexical analysis </para>    </briefdescription>
    <detaileddescription>
<para>This class organizes the lexical analysis during JSON deserialization. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="810">
        <label>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</label>
        <link refid="d8/d22/classnlohmann_1_1detail_1_1lexer"/>
        <childnode refid="811" relation="public-inheritance">
        </childnode>
      </node>
      <node id="811">
        <label>nlohmann::detail::lexer_base&lt; BasicJsonType &gt;</label>
        <link refid="de/d77/classnlohmann_1_1detail_1_1lexer__base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="817">
        <label>number_float_t</label>
      </node>
      <node id="816">
        <label>size_t</label>
      </node>
      <node id="828">
        <label>T</label>
      </node>
      <node id="827">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="828" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
      </node>
      <node id="826">
        <label>char_type</label>
      </node>
      <node id="812">
        <label>nlohmann::detail::lexer&lt; BasicJsonType, InputAdapterType &gt;</label>
        <link refid="d8/d22/classnlohmann_1_1detail_1_1lexer"/>
        <childnode refid="813" relation="public-inheritance">
        </childnode>
        <childnode refid="814" relation="usage">
          <edgelabel>-ia</edgelabel>
        </childnode>
        <childnode refid="815" relation="usage">
          <edgelabel>-position</edgelabel>
        </childnode>
        <childnode refid="817" relation="usage">
          <edgelabel>-value_float</edgelabel>
        </childnode>
        <childnode refid="818" relation="usage">
          <edgelabel>-token_buffer</edgelabel>
        </childnode>
        <childnode refid="819" relation="usage">
          <edgelabel>-value_unsigned</edgelabel>
        </childnode>
        <childnode refid="820" relation="usage">
          <edgelabel>-current</edgelabel>
        </childnode>
        <childnode refid="821" relation="usage">
          <edgelabel>-value_integer</edgelabel>
        </childnode>
        <childnode refid="822" relation="usage">
          <edgelabel>-next_unget</edgelabel>
          <edgelabel>-ignore_comments</edgelabel>
        </childnode>
        <childnode refid="823" relation="usage">
          <edgelabel>-decimal_point_char</edgelabel>
        </childnode>
        <childnode refid="824" relation="usage">
          <edgelabel>-error_message</edgelabel>
        </childnode>
        <childnode refid="825" relation="usage">
          <edgelabel>-token_string</edgelabel>
        </childnode>
      </node>
      <node id="820">
        <label>int_type</label>
      </node>
      <node id="813">
        <label>nlohmann::detail::lexer_base&lt; BasicJsonType &gt;</label>
        <link refid="de/d77/classnlohmann_1_1detail_1_1lexer__base"/>
      </node>
      <node id="825">
        <label>std::vector&lt; char_type &gt;</label>
        <childnode refid="826" relation="usage">
          <edgelabel>+elements</edgelabel>
        </childnode>
        <childnode refid="827" relation="template-instance">
          <edgelabel>&lt; char_type &gt;</edgelabel>
        </childnode>
      </node>
      <node id="814">
        <label>InputAdapterType</label>
      </node>
      <node id="819">
        <label>number_unsigned_t</label>
      </node>
      <node id="824">
        <label>const char *</label>
      </node>
      <node id="818">
        <label>string_t</label>
      </node>
      <node id="823">
        <label>const char_int_type</label>
      </node>
      <node id="821">
        <label>number_integer_t</label>
      </node>
      <node id="822">
        <label>bool</label>
      </node>
      <node id="815">
        <label>nlohmann::detail::position_t</label>
        <link refid="d6/d02/structnlohmann_1_1detail_1_1position__t"/>
        <childnode refid="816" relation="usage">
          <edgelabel>+chars_read_total</edgelabel>
          <edgelabel>+chars_read_current_line</edgelabel>
          <edgelabel>+lines_read</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="6527" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="6526" bodyend="8044"/>
    <listofallmembers>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a36ffc3c33c3aea18291ead7a30fa7cc6" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>add</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a46612a81a07dbbc6daef870ca4f959e4" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>char_int_type</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a98c69ad433d971104288baef813b2c68" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>char_type</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a40bd85d91d377ade9ccb910e35776c22" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>current</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a6f2fd5b4b6b153f11fc8f77213350073" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>decimal_point_char</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a84cbcd8c897c98c2ce04d29a29bf84cc" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>error_message</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9cd3e4cf04d19be521beb8868c1a2fc9" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1adcf663a9878f58544790f1b6faad2e42" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_codepoint</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a48f74c761ce663cd0d92bf428606b535" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_decimal_point</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9da0c649f03e8b3f730501d26c876a78" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_error_message</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1adb1a71f6a3e65ed32c452a318967b61e" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_number_float</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a9535d0c72adbe9fe149853ebad5faee8" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_number_integer</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1abfc85ff04fcb1a5a8d8ea299a4c479e5" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_number_unsigned</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a948c80b8bd8a3095b544e4655e1ca37e" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_position</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a76875bb49a480763f6c48b8586f7e60e" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_string</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae000b7571480e528dee4b281f63d5b15" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>get_token_string</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a526d001dd91ec55b8032ba98466765c0" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>ia</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a11528814930243028ac5b8901f4a17d7" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>ignore_comments</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a89bbc051da2514a469441a3a30ad63e4" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>lexer</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ab75d61c4de687717648c7698850ddb9b" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>lexer</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae95416c7ae8b36f0dd0ab349eaa754a2" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>lexer</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af6fe701b8b3ca5f4a1b58db4658bdf87" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>next_byte_in_range</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a40b108a0e45a7253f6ad85fbdaa6a262" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>next_unget</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a438a78e53120fd2c3ea049161d4798cb" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>number_float_t</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a594e61f96c87b4464beeab681111ac0c" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>number_integer_t</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af6b19ef34b2e9ee2321cfaf62ee066cb" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>number_unsigned_t</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af7e7002d4bb66e9104d752791b8070f8" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>operator=</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a1383bb59c5efd4f9370ca3ee4ad1a4ba" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>operator=</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a8a1bda107ce1622c0cb3174fa12155ea" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>position</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a3bda093837339813916d11fb6e396606" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>reset</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a40320a8fef5f1f03b60c8b2f2f40af4d" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>scan</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1afdc68706ad20be93977cd0f97043ea7f" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>scan_comment</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ad89dec0ac0f4e851925a0499e043b18b" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>scan_literal</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1aab51a28e32c1957329141baff8eda1c4" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>scan_number</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ab6352978e03ebcbc3cd618cd17142f26" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>scan_string</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a7cd7d55de2cd398660bc243c7229caf9" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>skip_bom</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a449f3f3703dfbf8b757e12f002668604" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>skip_whitespace</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1af85c01fd669d529ab93a9e1d80b62015" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>string_t</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a6d3dffb7bb247a7fd7276d49d3a00dc8" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>strtof</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ac8455259d8a06acd2a284a5dd7221aea" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>strtof</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae01f87db7819a05d0ed17bcb665442e1" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>strtof</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ac4eaf39567bd5f0750e5d7e913fb474d" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>token_buffer</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a94aec416b883f742ba7f20bd16adb3c3" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>token_string</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a986907dff5ceb4fa06aa8ff301822726" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>token_type</name></member>
      <member refid="de/d77/classnlohmann_1_1detail_1_1lexer__base_1ad214d59300605f9d3a4a32c8917aa608" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>token_type_name</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ab5811afe1c3efb0b769f7733b8373c6f" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>unget</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a0d74bb18ba7d32ea7e7c9d9a7d6c2e70" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>value_float</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1a5134de850fab8f41474a36ae07998088" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>value_integer</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ae84cbf312215c15d79783380b1592f74" prot="private" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>value_unsigned</name></member>
      <member refid="d8/d22/classnlohmann_1_1detail_1_1lexer_1ac0557f111d82f7729a93ee9b40b31402" prot="public" virt="non-virtual"><scope>nlohmann::detail::lexer</scope><name>~lexer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
