<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="d9/dcc/classnlohmann_1_1basic__json" kind="class" language="C++" prot="public">
    <compoundname>nlohmann::basic_json</compoundname>
    <includes refid="d5/db8/json_8hpp" local="no">json.hpp</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename U, typename V, typename... Args &gt; class</type>
        <declname>ObjectType</declname>
        <defname>ObjectType</defname>
        <defval>std::map</defval>
      </param>
      <param>
        <type>template&lt; typename U, typename... Args &gt; class</type>
        <declname>ArrayType</declname>
        <defname>ArrayType</defname>
        <defval>std::vector</defval>
      </param>
      <param>
        <type>class StringType</type>
        <defval>std::string</defval>
      </param>
      <param>
        <type>class BooleanType</type>
        <defval>bool</defval>
      </param>
      <param>
        <type>class NumberIntegerType</type>
        <defval>std::int64_t</defval>
      </param>
      <param>
        <type>class NumberUnsignedType</type>
        <defval>std::uint64_t</defval>
      </param>
      <param>
        <type>class NumberFloatType</type>
        <defval>double</defval>
      </param>
      <param>
        <type>template&lt; typename U &gt; class</type>
        <declname>AllocatorType</declname>
        <defname>AllocatorType</defname>
        <defval>std::allocator</defval>
      </param>
      <param>
        <type>template&lt; typename T, typename SFINAE=void &gt; class</type>
        <declname>JSONSerializer</declname>
        <defname>JSONSerializer</defname>
        <defval><ref refid="dc/dc7/structnlohmann_1_1adl__serializer" kindref="compound">adl_serializer</ref></defval>
      </param>
      <param>
        <type>class <ref refid="d7/d1c/classBinaryType" kindref="compound">BinaryType</ref></type>
        <defval>std::vector&lt;std::uint8_t&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>exceptions</header>
      <description><para>Classes to implement user-defined exceptions. </para></description>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" prot="public" static="no">
        <type><ref refid="de/df2/classnlohmann_1_1detail_1_1exception" kindref="compound">detail::exception</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::exception =  detail::exception</definition>
        <argsstring></argsstring>
        <name>exception</name>
        <briefdescription>
<para>general exception of the <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> class </para>        </briefdescription>
        <detaileddescription>
<para>This class is an extension of <computeroutput>std::exception</computeroutput> objects with a member <emphasis>id</emphasis> for exception ids. It is used as the base class for all exceptions thrown by the <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> class. This class can hence be used as &quot;wildcard&quot; to catch exceptions.</para><para>Subclasses:<itemizedlist>
<listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" kindref="member">parse_error</ref> for exceptions indicating a parse error</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" kindref="member">invalid_iterator</ref> for exceptions indicating errors with iterators</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" kindref="member">type_error</ref> for exceptions indicating executing a member function with a wrong type</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref> for exceptions indicating access out of the defined range</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" kindref="member">other_error</ref> for exceptions indicating other library errors</para></listitem></itemizedlist>
</para><para>{The following code shows how arbitrary library exceptions can be caught.,exception}</para><para><simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17280" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" prot="public" static="no">
        <type><ref refid="d5/d1a/classnlohmann_1_1detail_1_1parse__error" kindref="compound">detail::parse_error</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse_error =  detail::parse_error</definition>
        <argsstring></argsstring>
        <name>parse_error</name>
        <briefdescription>
<para>exception indicating a parse error </para>        </briefdescription>
        <detaileddescription>
<para>This exception is thrown by the library when a parse error occurs. Parse errors can occur during the deserialization of JSON text, CBOR, MessagePack, as well as when using JSON Patch.</para><para>Member <emphasis>byte</emphasis> holds the byte index of the last read character in the input file.</para><para>Exceptions have ids 1xx.</para><para><table rows="15" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example message </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.101 </para></entry><entry thead="no"><para>parse error at 2: unexpected end of input; expected string literal </para></entry><entry thead="no"><para>This error indicates a syntax error while deserializing a JSON text. The error message describes that an unexpected token (character) was encountered, and the member <emphasis>byte</emphasis> indicates the error position. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.102 </para></entry><entry thead="no"><para>parse error at 14: missing or wrong low surrogate </para></entry><entry thead="no"><para>JSON uses the <computeroutput>\uxxxx</computeroutput> format to describe Unicode characters. Code points above above 0xFFFF are split into two <computeroutput>\uxxxx</computeroutput> entries (&quot;surrogate pairs&quot;). This error indicates that the surrogate pair is incomplete or contains an invalid code point. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.103 </para></entry><entry thead="no"><para>parse error: code points above 0x10FFFF are invalid </para></entry><entry thead="no"><para>Unicode supports code points up to 0x10FFFF. Code points above 0x10FFFF are invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.104 </para></entry><entry thead="no"><para>parse error: JSON patch must be an array of objects </para></entry><entry thead="no"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902</ulink> requires a JSON Patch document to be a JSON document that represents an array of objects. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.105 </para></entry><entry thead="no"><para>parse error: operation must have string member &apos;op&apos; </para></entry><entry thead="no"><para>An operation of a JSON Patch document must contain exactly one &quot;op&quot; member, whose value indicates the operation to perform. Its value must be one of &quot;add&quot;, &quot;remove&quot;, &quot;replace&quot;, &quot;move&quot;, &quot;copy&quot;, or &quot;test&quot;; other values are errors. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.106 </para></entry><entry thead="no"><para>parse error: array index &apos;01&apos; must not begin with &apos;0&apos; </para></entry><entry thead="no"><para>An array index in a JSON Pointer (<ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>) may be <computeroutput>0</computeroutput> or any number without a leading <computeroutput>0</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.107 </para></entry><entry thead="no"><para>parse error: JSON pointer must be empty or begin with &apos;/&apos; - was: &apos;foo&apos; </para></entry><entry thead="no"><para>A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a <computeroutput>/</computeroutput> character. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.108 </para></entry><entry thead="no"><para>parse error: escape character &apos;~&apos; must be followed with &apos;0&apos; or &apos;1&apos; </para></entry><entry thead="no"><para>In a JSON Pointer, only <computeroutput>~0</computeroutput> and <computeroutput>~1</computeroutput> are valid escape sequences. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.109 </para></entry><entry thead="no"><para>parse error: array index &apos;one&apos; is not a number </para></entry><entry thead="no"><para>A JSON Pointer array index must be a number. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.110 </para></entry><entry thead="no"><para>parse error at 1: cannot read 2 bytes from vector </para></entry><entry thead="no"><para>When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.112 </para></entry><entry thead="no"><para>parse error at 1: error reading CBOR; last byte: 0xF8 </para></entry><entry thead="no"><para>Not all types of CBOR or MessagePack are supported. This exception occurs if an unsupported byte was read. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.113 </para></entry><entry thead="no"><para>parse error at 2: expected a CBOR string; last byte: 0x98 </para></entry><entry thead="no"><para>While parsing a map key, a value that is not a string has been read. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.114 </para></entry><entry thead="no"><para>parse error: Unsupported BSON record type 0x0F </para></entry><entry thead="no"><para>The parsing of the corresponding BSON record type is not implemented (yet). </para></entry></row>
<row>
<entry thead="no"><para>json.exception.parse_error.115 </para></entry><entry thead="no"><para>parse error at byte 5: syntax error while parsing UBJSON high-precision number: invalid number text: 1A </para></entry><entry thead="no"><para>A UBJSON high-precision number could not be parsed. </para></entry></row>
</table>
<simplesect kind="note"><para>For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file. This also holds true when reading a byte vector (CBOR or MessagePack).</para></simplesect>
{The following code shows how a <computeroutput>parse_error</computeroutput> exception can be caught.,parse_error}</para><para><simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" kindref="member">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" kindref="member">invalid_iterator</ref> for exceptions indicating errors with iterators </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" kindref="member">type_error</ref> for exceptions indicating executing a member function with a wrong <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref> for exceptions indicating access out of the defined range </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" kindref="member">other_error</ref> for exceptions indicating other library errors</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17282" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" prot="public" static="no">
        <type><ref refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator" kindref="compound">detail::invalid_iterator</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::invalid_iterator =  detail::invalid_iterator</definition>
        <argsstring></argsstring>
        <name>invalid_iterator</name>
        <briefdescription>
<para>exception indicating errors with iterators </para>        </briefdescription>
        <detaileddescription>
<para>This exception is thrown if iterators passed to a library function do not match the expected semantics.</para><para>Exceptions have ids 2xx.</para><para><table rows="15" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example message </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.201 </para></entry><entry thead="no"><para>iterators are not compatible </para></entry><entry thead="no"><para>The iterators passed to constructor <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e" kindref="member">basic_json(InputIT first, InputIT last)</ref> are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.202 </para></entry><entry thead="no"><para>iterator does not fit current value </para></entry><entry thead="no"><para>In an erase or insert function, the passed iterator <emphasis>pos</emphasis> does not belong to the JSON value for which the function was called. It hence does not define a valid position for the deletion/insertion. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.203 </para></entry><entry thead="no"><para>iterators do not fit current value </para></entry><entry thead="no"><para>Either iterator passed to function <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42" kindref="member">erase(IteratorType first, IteratorType last)</ref> does not belong to the JSON value from which values shall be erased. It hence does not define a valid range to delete values from. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.204 </para></entry><entry thead="no"><para>iterators out of range </para></entry><entry thead="no"><para>When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref>), because this is the only way the single stored value is expressed. All other ranges are invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.205 </para></entry><entry thead="no"><para>iterator out of range </para></entry><entry thead="no"><para>When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> iterator, because it is the only way to address the stored value. All other iterators are invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.206 </para></entry><entry thead="no"><para>cannot construct with iterators from null </para></entry><entry thead="no"><para>The iterators passed to constructor <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e" kindref="member">basic_json(InputIT first, InputIT last)</ref> belong to a JSON null value and hence to not define a valid range. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.207 </para></entry><entry thead="no"><para>cannot use key() for non-object iterators </para></entry><entry thead="no"><para>The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.208 </para></entry><entry thead="no"><para>cannot use operator[] for object iterators </para></entry><entry thead="no"><para>The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.209 </para></entry><entry thead="no"><para>cannot use offsets with object iterators </para></entry><entry thead="no"><para>The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.210 </para></entry><entry thead="no"><para>iterators do not fit </para></entry><entry thead="no"><para>The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container. Therefore, the range (<emphasis>first</emphasis>, <emphasis>last</emphasis>) is invalid. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.211 </para></entry><entry thead="no"><para>passed iterators may not belong to container </para></entry><entry thead="no"><para>The iterator range passed to the insert function must not be a subrange of the container to insert to. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.212 </para></entry><entry thead="no"><para>cannot compare iterators of different containers </para></entry><entry thead="no"><para>When two iterators are compared, they must belong to the same container. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.213 </para></entry><entry thead="no"><para>cannot compare order of object iterators </para></entry><entry thead="no"><para>The order of object iterators cannot be compared, because JSON objects are unordered. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.invalid_iterator.214 </para></entry><entry thead="no"><para>cannot get value </para></entry><entry thead="no"><para>Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref>. </para></entry></row>
</table>
{The following code shows how an <computeroutput>invalid_iterator</computeroutput> exception can be caught.,invalid_iterator}</para><para><simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" kindref="member">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" kindref="member">parse_error</ref> for exceptions indicating a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse</ref> error </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" kindref="member">type_error</ref> for exceptions indicating executing a member function with a wrong <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref> for exceptions indicating access out of the defined range </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" kindref="member">other_error</ref> for exceptions indicating other library errors</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17284" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" prot="public" static="no">
        <type><ref refid="da/d1c/classnlohmann_1_1detail_1_1type__error" kindref="compound">detail::type_error</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_error =  detail::type_error</definition>
        <argsstring></argsstring>
        <name>type_error</name>
        <briefdescription>
<para>exception indicating executing a member function with a wrong type </para>        </briefdescription>
        <detaileddescription>
<para>This exception is thrown in case of a type error; that is, a library function is executed on a JSON value whose type does not match the expected semantics.</para><para>Exceptions have ids 3xx.</para><para><table rows="18" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example message </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.301 </para></entry><entry thead="no"><para>cannot create object from initializer list </para></entry><entry thead="no"><para>To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string. When this constraint is violated, an array is created instead. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.302 </para></entry><entry thead="no"><para>type must be object, but is array </para></entry><entry thead="no"><para>During implicit or explicit value conversion, the JSON type must be compatible to the target type. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.303 </para></entry><entry thead="no"><para>incompatible ReferenceType for get_ref, actual type is object </para></entry><entry thead="no"><para>To retrieve a reference to a value stored in a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> object with <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" kindref="member">get_ref</ref>, the type of the reference must match the value type. For instance, for a JSON array, the <emphasis>ReferenceType</emphasis> must be <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> &amp;. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.304 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at()</ref> with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.305 </para></entry><entry thead="no"><para>cannot use operator[] with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5" kindref="member">operator[]</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.306 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.307 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase()</ref> with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.308 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref> with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a40226d9c84fcb9cb948ae0c27b842c57" kindref="member">operator+=</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.309 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref> with </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.310 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref> with number </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.311 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb" kindref="member">emplace_back()</ref> with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb" kindref="member">emplace_back()</ref> member function can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.312 </para></entry><entry thead="no"><para>cannot use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" kindref="member">update()</ref> with string </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" kindref="member">update()</ref> member functions can only be executed for certain JSON types. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.313 </para></entry><entry thead="no"><para>invalid value to unflatten </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten</ref> function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value. The JSON Pointers must not overlap, because then the resulting value would not be well defined. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.314 </para></entry><entry thead="no"><para>only objects can be unflattened </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten</ref> function only works for an object whose keys are JSON Pointers. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.315 </para></entry><entry thead="no"><para>values in object must be primitive </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten</ref> function only works for an object whose keys are JSON Pointers and whose values are primitive. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.316 </para></entry><entry thead="no"><para>invalid UTF-8 byte at index 10: 0x7E </para></entry><entry thead="no"><para>The <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" kindref="member">dump</ref> function only works with UTF-8 encoded strings; that is, if you assign a <computeroutput>std::string</computeroutput> to a JSON value, make sure it is UTF-8 encoded. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.type_error.317 </para></entry><entry thead="no"><para>JSON value cannot be serialized to requested format </para></entry><entry thead="no"><para>The dynamic type of the object cannot be represented in the requested serialization format (e.g. a raw <computeroutput>true</computeroutput> or <computeroutput>null</computeroutput> JSON object cannot be serialized to BSON) </para></entry></row>
</table>
{The following code shows how a <computeroutput>type_error</computeroutput> exception can be caught.,type_error}</para><para><simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" kindref="member">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" kindref="member">parse_error</ref> for exceptions indicating a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse</ref> error </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" kindref="member">invalid_iterator</ref> for exceptions indicating errors with iterators </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref> for exceptions indicating access out of the defined range </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" kindref="member">other_error</ref> for exceptions indicating other library errors</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17286" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" prot="public" static="no">
        <type><ref refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range" kindref="compound">detail::out_of_range</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::out_of_range =  detail::out_of_range</definition>
        <argsstring></argsstring>
        <name>out_of_range</name>
        <briefdescription>
<para>exception indicating access out of the defined range </para>        </briefdescription>
        <detaileddescription>
<para>This exception is thrown in case a library function is called on an input parameter that exceeds the expected range, for instance in case of array indices or nonexisting object keys.</para><para>Exceptions have ids 4xx.</para><para><table rows="10" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example message </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.401 </para></entry><entry thead="no"><para>array index 3 is out of range </para></entry><entry thead="no"><para>The provided array index <emphasis>i</emphasis> is larger than <emphasis>size-1</emphasis>. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.402 </para></entry><entry thead="no"><para>array index &apos;-&apos; (3) is out of range </para></entry><entry thead="no"><para>The special array index <computeroutput>-</computeroutput> in a JSON Pointer never describes a valid element of the array, but the index past the end. That is, it can only be used to add elements at this position, but not to read it. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.403 </para></entry><entry thead="no"><para>key &apos;foo&apos; not found </para></entry><entry thead="no"><para>The provided key was not found in the JSON object. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.404 </para></entry><entry thead="no"><para>unresolved reference token &apos;foo&apos; </para></entry><entry thead="no"><para>A reference token in a JSON Pointer could not be resolved. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.405 </para></entry><entry thead="no"><para>JSON pointer has no parent </para></entry><entry thead="no"><para>The JSON Patch operations &apos;remove&apos; and &apos;add&apos; can not be applied to the root element of the JSON value. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.406 </para></entry><entry thead="no"><para>number overflow parsing &apos;10E1000&apos; </para></entry><entry thead="no"><para>A parsed number could not be stored as without changing it to NaN or INF. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.407 </para></entry><entry thead="no"><para>number overflow serializing &apos;9223372036854775808&apos; </para></entry><entry thead="no"><para>UBJSON and BSON only support integer numbers up to 9223372036854775807. (until version 3.8.0) </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.408 </para></entry><entry thead="no"><para>excessive array size: 8658170730974374167 </para></entry><entry thead="no"><para>The size (following <computeroutput>#</computeroutput>) of an UBJSON array or object exceeds the maximal capacity. </para></entry></row>
<row>
<entry thead="no"><para>json.exception.out_of_range.409 </para></entry><entry thead="no"><para>BSON key cannot contain code point U+0000 (at byte 2) </para></entry><entry thead="no"><para>Key identifiers to be serialized to BSON cannot contain code point U+0000, since the key is stored as zero-terminated c-string </para></entry></row>
</table>
{The following code shows how an <computeroutput>out_of_range</computeroutput> exception can be caught.,out_of_range}</para><para><simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" kindref="member">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" kindref="member">parse_error</ref> for exceptions indicating a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse</ref> error </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" kindref="member">invalid_iterator</ref> for exceptions indicating errors with iterators </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" kindref="member">type_error</ref> for exceptions indicating executing a member function with a wrong <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" kindref="member">other_error</ref> for exceptions indicating other library errors</para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17288" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" prot="public" static="no">
        <type><ref refid="d5/d1b/classnlohmann_1_1detail_1_1other__error" kindref="compound">detail::other_error</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::other_error =  detail::other_error</definition>
        <argsstring></argsstring>
        <name>other_error</name>
        <briefdescription>
<para>exception indicating other library errors </para>        </briefdescription>
        <detaileddescription>
<para>This exception is thrown in case of errors that cannot be classified with the other exception types.</para><para>Exceptions have ids 5xx.</para><para><table rows="2" cols="3"><row>
<entry thead="yes"><para>name / id </para></entry><entry thead="yes"><para>example message </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para>json.exception.other_error.501 </para></entry><entry thead="no"><para>unsuccessful: {&quot;op&quot;:&quot;test&quot;,&quot;path&quot;:&quot;/baz&quot;, &quot;value&quot;:&quot;bar&quot;} </para></entry><entry thead="no"><para>A JSON Patch operation &apos;test&apos; failed. The unsuccessful operation is also printed. </para></entry></row>
</table>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" kindref="member">exception</ref> for the base class of the library exceptions </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" kindref="member">parse_error</ref> for exceptions indicating a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse</ref> error </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" kindref="member">invalid_iterator</ref> for exceptions indicating errors with iterators </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" kindref="member">type_error</ref> for exceptions indicating executing a member function with a wrong <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> </para></simplesect>
<simplesect kind="see"><para>- <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref> for exceptions indicating access out of the defined range</para></simplesect>
{The following code shows how an <computeroutput>other_error</computeroutput> exception can be caught.,other_error}</para><para><simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17290" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17290" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>container types</header>
      <description><para>The canonic container types to use <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> like any other STL container. </para></description>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847" prot="public" static="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_type =  basic_json</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
<para>the type of elements in a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17305" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" prot="public" static="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847" kindref="member">value_type</ref> &amp;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::reference =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
<para>the type of an element reference </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17308" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" prot="public" static="no">
        <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847" kindref="member">value_type</ref> &amp;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_reference =  const value_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
<para>the type of an element const reference </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17310" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
<para>a type to represent differences between iterators </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17313" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
<para>a type to represent container sizes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17315" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457" prot="public" static="no">
        <type>AllocatorType&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::allocator_type =  AllocatorType&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <briefdescription>
<para>the allocator type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17318" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457" kindref="member">allocator_type</ref> &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa" kindref="member">pointer</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::pointer =  typename std::allocator_traits&lt;allocator_type&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
<para>the type of an element pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17321" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a4108c5148f1d7cf13c2681e22f141a10" prot="public" static="no">
        <type>typename std::allocator_traits&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457" kindref="member">allocator_type</ref> &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4108c5148f1d7cf13c2681e22f141a10" kindref="member">const_pointer</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_pointer =  typename std::allocator_traits&lt;allocator_type&gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
<para>the type of an element const pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17323" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" prot="public" static="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7b03055088a8e9770680ee975fb8ba55" kindref="member">iter_impl</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator =  iter_impl&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>an iterator for a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17326" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" prot="public" static="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7b03055088a8e9770680ee975fb8ba55" kindref="member">iter_impl</ref>&lt; const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_iterator =  iter_impl&lt;const basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>a const iterator for a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17328" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6" prot="public" static="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a556d91bc2228135b27eb189e5a90ea4c" kindref="member">json_reverse_iterator</ref>&lt; typename <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">basic_json::iterator</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::reverse_iterator =  json_reverse_iterator&lt;typename basic_json::iterator&gt;</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
<para>a reverse iterator for a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17330" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a" prot="public" static="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a556d91bc2228135b27eb189e5a90ea4c" kindref="member">json_reverse_iterator</ref>&lt; typename <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">basic_json::const_iterator</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::const_reverse_iterator =  json_reverse_iterator&lt;typename basic_json::const_iterator&gt;</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>a const reverse iterator for a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17332" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17332" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON value data types</header>
      <description><para>The data types to store a JSON value. These types are derived from the template arguments passed to class <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>. </para></description>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ac26c2e8d6bcaccde372ceedd81851200" prot="public" static="no">
        <type>std::less&lt; StringType &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object_comparator_t =  std::less&lt;StringType&gt;</definition>
        <argsstring></argsstring>
        <name>object_comparator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17442" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" prot="public" static="no">
        <type>ObjectType&lt; StringType, <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac26c2e8d6bcaccde372ceedd81851200" kindref="member">object_comparator_t</ref>, AllocatorType&lt; std::pair&lt; const StringType, <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt; &gt;&gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object_t =  ObjectType&lt;StringType, basic_json, object_comparator_t, AllocatorType&lt;std::pair&lt;const StringType, basic_json&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>object_t</name>
        <briefdescription>
<para>a type for an object </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> describes JSON objects as follows: <blockquote><para>An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array. </para></blockquote></para><para>To store objects in C++, a type is defined by the template parameters described below.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ObjectType</parametername>
</parameternamelist>
<parameterdescription>
<para>the container to store objects (e.g., <computeroutput>std::map</computeroutput> or <computeroutput>std::unordered_map</computeroutput>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StringType</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the keys or names (e.g., <computeroutput>std::string</computeroutput>). The comparison function <computeroutput>std::less&lt;StringType&gt;</computeroutput> is used to order elements inside the container. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocatorType</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocator to use for objects (e.g., <computeroutput>std::allocator</computeroutput>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>ObjectType</emphasis> (<computeroutput>std::map</computeroutput>), <emphasis>StringType</emphasis> (<computeroutput>std::string</computeroutput>), and <emphasis>AllocatorType</emphasis> (<computeroutput>std::allocator</computeroutput>), the default value for <emphasis>object_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">std::map&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string,<sp/></highlight><highlight class="comment">//<sp/>key_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json</ref>,<sp/></highlight><highlight class="comment">//<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::less&lt;std::string&gt;,<sp/></highlight><highlight class="comment">//<sp/>key_compare</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::allocator&lt;std::pair&lt;const<sp/>std::string,<sp/>basic_json&gt;&gt;<sp/></highlight><highlight class="comment">//<sp/>allocator_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
</programlisting></para><para><heading level="4">Behavior</heading>
</para><para>The choice of <emphasis>object_t</emphasis> influences the behavior of the JSON class. With the default type, objects have the following behavior:</para><para><itemizedlist>
<listitem><para>When all names are unique, objects will be interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings.</para></listitem><listitem><para>When the names within an object are not unique, it is unspecified which one of the values for a given key will be chosen. For instance, <computeroutput>{&quot;key&quot;: 2, &quot;key&quot;: 1}</computeroutput> could be equal to either <computeroutput>{&quot;key&quot;: 1}</computeroutput> or <computeroutput>{&quot;key&quot;: 2}</computeroutput>.</para></listitem><listitem><para>Internally, name/value pairs are stored in lexicographical order of the names. Objects will also be serialized (see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" kindref="member">dump</ref>) in this order. For instance, <computeroutput>{&quot;b&quot;: 1, &quot;a&quot;: 2}</computeroutput> and <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput> will be stored and serialized as <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput>.</para></listitem><listitem><para>When comparing objects, the order of the name/value pairs is irrelevant. This makes objects interoperable in the sense that they will not be affected by these differences. For instance, <computeroutput>{&quot;b&quot;: 1, &quot;a&quot;: 2}</computeroutput> and <computeroutput>{&quot;a&quot;: 2, &quot;b&quot;: 1}</computeroutput> will be treated as equal.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> specifies: <blockquote><para>An implementation may set limits on the maximum depth of nesting. </para></blockquote></para><para>In this class, the object&apos;s limit of nesting is not explicitly constrained. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" kindref="member">max_size</ref> function of a JSON object.</para><para><heading level="4">Storage</heading>
</para><para>Objects are stored as pointers in a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to object values, a pointer of type <computeroutput>object_t*</computeroutput> must be dereferenced.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
<simplesect kind="note"><para>The order name/value pairs are added to the object is <emphasis>not</emphasis> preserved by the library. Therefore, iterating an object may return name/value pairs in a different order than they were originally stored. In fact, keys will be traversed in alphabetical order as <computeroutput>std::map</computeroutput> with <computeroutput>std::less</computeroutput> is used by default. Please note this behavior conforms to <ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink>, because any order implements the specified &quot;unordered&quot; nature of JSON objects. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17528" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17532" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" prot="public" static="no">
        <type>ArrayType&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, AllocatorType&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt; &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array_t =  ArrayType&lt;basic_json, AllocatorType&lt;basic_json&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>array_t</name>
        <briefdescription>
<para>a type for an array </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> describes JSON arrays as follows: <blockquote><para>An array is an ordered sequence of zero or more values. </para></blockquote></para><para>To store objects in C++, a type is defined by the template parameters explained below.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ArrayType</parametername>
</parameternamelist>
<parameterdescription>
<para>container type to store arrays (e.g., <computeroutput>std::vector</computeroutput> or <computeroutput>std::list</computeroutput>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocatorType</parametername>
</parameternamelist>
<parameterdescription>
<para>allocator to use for arrays (e.g., <computeroutput>std::allocator</computeroutput>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>ArrayType</emphasis> (<computeroutput>std::vector</computeroutput>) and <emphasis>AllocatorType</emphasis> (<computeroutput>std::allocator</computeroutput>), the default value for <emphasis>array_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">std::vector&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json</ref>,<sp/></highlight><highlight class="comment">//<sp/>value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::allocator&lt;basic_json&gt;<sp/></highlight><highlight class="comment">//<sp/>allocator_type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
</programlisting></para><para><heading level="4">Limits</heading>
</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> specifies: <blockquote><para>An implementation may set limits on the maximum depth of nesting. </para></blockquote></para><para>In this class, the array&apos;s limit of nesting is not explicitly constrained. However, a maximum depth of nesting may be introduced by the compiler or runtime environment. A theoretical limit can be queried by calling the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" kindref="member">max_size</ref> function of a JSON array.</para><para><heading level="4">Storage</heading>
</para><para>Arrays are stored as pointers in a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to array values, a pointer of type <computeroutput>array_t*</computeroutput> must be dereferenced.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17578" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" prot="public" static="no">
        <type>StringType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::string_t =  StringType</definition>
        <argsstring></argsstring>
        <name>string_t</name>
        <briefdescription>
<para>a type for a string </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> describes JSON strings as follows: <blockquote><para>A string is a sequence of zero or more Unicode characters. </para></blockquote></para><para>To store objects in C++, a type is defined by the template parameter described below. Unicode values are split by the JSON class into byte-sized characters during deserialization.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>StringType</parametername>
</parameternamelist>
<parameterdescription>
<para>the container to store strings (e.g., <computeroutput>std::string</computeroutput>). Note this container is used for keys/names in objects, see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>StringType</emphasis> (<computeroutput>std::string</computeroutput>), the default value for <emphasis>string_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">std::string</highlight></codeline>
</programlisting></para><para><heading level="4">Encoding</heading>
</para><para>Strings are stored in UTF-8 encoding. Therefore, functions like <computeroutput>std::string::size()</computeroutput> or <computeroutput>std::string::length()</computeroutput> return the number of bytes in the string rather than the number of characters or glyphs.</para><para><heading level="4">String comparison</heading>
</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> states: <blockquote><para>Software implementations are typically required to test names of object members for equality. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that <computeroutput>&quot;a\\b&quot;</computeroutput> and <computeroutput>&quot;a\u005Cb&quot;</computeroutput> are not equal. </para></blockquote></para><para>This implementation is interoperable as it does compare strings code unit by code unit.</para><para><heading level="4">Storage</heading>
</para><para>String values are stored as pointers in a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to string values, a pointer of type <computeroutput>string_t*</computeroutput> must be dereferenced.</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17631" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" prot="public" static="no">
        <type>BooleanType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::boolean_t =  BooleanType</definition>
        <argsstring></argsstring>
        <name>boolean_t</name>
        <briefdescription>
<para>a type for a boolean </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> implicitly describes a boolean as a type which differentiates the two literals <computeroutput>true</computeroutput> and <computeroutput>false</computeroutput>.</para><para>To store objects in C++, a type is defined by the template parameter <emphasis>BooleanType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>BooleanType</emphasis> (<computeroutput>bool</computeroutput>), the default value for <emphasis>boolean_t</emphasis> is:</para><para><programlisting><codeline><highlight class="keywordtype">bool</highlight></codeline>
</programlisting></para><para><heading level="4">Storage</heading>
</para><para>Boolean values are stored directly inside a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17657" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" prot="public" static="no">
        <type>NumberIntegerType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_integer_t =  NumberIntegerType</definition>
        <argsstring></argsstring>
        <name>number_integer_t</name>
        <briefdescription>
<para>a type for a number (integer) </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> describes numbers as follows: <blockquote><para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para></blockquote></para><para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> are used.</para><para>To store integer numbers in C++, a type is defined by the template parameter <emphasis>NumberIntegerType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>NumberIntegerType</emphasis> (<computeroutput>int64_t</computeroutput>), the default value for <emphasis>number_integer_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">int64_t</highlight></codeline>
</programlisting></para><para><heading level="4">Default behavior</heading>
</para><para><itemizedlist>
<listitem><para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <computeroutput>010</computeroutput> will be serialized to <computeroutput>8</computeroutput>. During deserialization, leading zeros yield an error.</para></listitem><listitem><para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> specifies: <blockquote><para>An implementation may set limits on the range and precision of numbers. </para></blockquote></para><para>When the default type is used, the maximal integer number that can be stored is <computeroutput>9223372036854775807</computeroutput> (INT64_MAX) and the minimal integer number that can be stored is <computeroutput>-9223372036854775808</computeroutput> (INT64_MIN). Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>.</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> further states: <blockquote><para>Note that when such software is used, numbers that are integers and are in the range <formula id="0">$[-2^{53}+1, 2^{53}-1]$</formula> are interoperable in the sense that implementations will agree exactly on their numeric values. </para></blockquote></para><para>As this range is a subrange of the exactly supported range [INT64_MIN, INT64_MAX], this class&apos;s integer type is interoperable.</para><para><heading level="4">Storage</heading>
</para><para>Integer number values are stored directly inside a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for number values (floating-point)</para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for number values (unsigned integer)</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17729" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" prot="public" static="no">
        <type>NumberUnsignedType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_unsigned_t =  NumberUnsignedType</definition>
        <argsstring></argsstring>
        <name>number_unsigned_t</name>
        <briefdescription>
<para>a type for a number (unsigned) </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> describes numbers as follows: <blockquote><para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para></blockquote></para><para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> are used.</para><para>To store unsigned integer numbers in C++, a type is defined by the template parameter <emphasis>NumberUnsignedType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>NumberUnsignedType</emphasis> (<computeroutput>uint64_t</computeroutput>), the default value for <emphasis>number_unsigned_t</emphasis> is:</para><para><programlisting><codeline><highlight class="normal">uint64_t</highlight></codeline>
</programlisting></para><para><heading level="4">Default behavior</heading>
</para><para><itemizedlist>
<listitem><para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in integer literals lead to an interpretation as octal number. Internally, the value will be stored as decimal number. For instance, the C++ integer literal <computeroutput>010</computeroutput> will be serialized to <computeroutput>8</computeroutput>. During deserialization, leading zeros yield an error.</para></listitem><listitem><para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> specifies: <blockquote><para>An implementation may set limits on the range and precision of numbers. </para></blockquote></para><para>When the default type is used, the maximal integer number that can be stored is <computeroutput>18446744073709551615</computeroutput> (UINT64_MAX) and the minimal integer number that can be stored is <computeroutput>0</computeroutput>. Integer numbers that are out of range will yield over/underflow when used in a constructor. During deserialization, too large or small integer numbers will be automatically be stored as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>.</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> further states: <blockquote><para>Note that when such software is used, numbers that are integers and are in the range <formula id="0">$[-2^{53}+1, 2^{53}-1]$</formula> are interoperable in the sense that implementations will agree exactly on their numeric values. </para></blockquote></para><para>As this range is a subrange (when considered in conjunction with the number_integer_t type) of the exactly supported range [0, UINT64_MAX], this class&apos;s integer type is interoperable.</para><para><heading level="4">Storage</heading>
</para><para>Integer number values are stored directly inside a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for number values (floating-point) </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for number values (integer)</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17800" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" prot="public" static="no">
        <type>NumberFloatType</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_float_t =  NumberFloatType</definition>
        <argsstring></argsstring>
        <name>number_float_t</name>
        <briefdescription>
<para>a type for a number (floating-point) </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> describes numbers as follows: <blockquote><para>The representation of numbers is similar to that used in most programming languages. A number is represented in base 10 using decimal digits. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part. Leading zeros are not allowed. (...) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted. </para></blockquote></para><para>This description includes both integer and floating-point numbers. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number. Therefore, three different types, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> are used.</para><para>To store floating-point numbers in C++, a type is defined by the template parameter <emphasis>NumberFloatType</emphasis> which chooses the type to use.</para><para><heading level="4">Default type</heading>
</para><para>With the default values for <emphasis>NumberFloatType</emphasis> (<computeroutput>double</computeroutput>), the default value for <emphasis>number_float_t</emphasis> is:</para><para><programlisting><codeline><highlight class="keywordtype">double</highlight></codeline>
</programlisting></para><para><heading level="4">Default behavior</heading>
</para><para><itemizedlist>
<listitem><para>The restrictions about leading zeros is not enforced in C++. Instead, leading zeros in floating-point literals will be ignored. Internally, the value will be stored as decimal number. For instance, the C++ floating-point literal <computeroutput>01.2</computeroutput> will be serialized to <computeroutput>1.2</computeroutput>. During deserialization, leading zeros yield an error.</para></listitem><listitem><para>Not-a-number (NaN) values will be serialized to <computeroutput>null</computeroutput>.</para></listitem></itemizedlist>
</para><para><heading level="4">Limits</heading>
</para><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259</ulink> states: <blockquote><para>This specification allows implementations to set limits on the range and precision of numbers accepted. Since software that implements IEEE 754-2008 binary64 (double precision) numbers is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision. </para></blockquote></para><para>This implementation does exactly follow this approach, as it uses double precision floating-point numbers. Note values smaller than <computeroutput>-1.79769313486232e+308</computeroutput> and values greater than <computeroutput>1.79769313486232e+308</computeroutput> will be stored as NaN internally and be serialized to <computeroutput>null</computeroutput>.</para><para><heading level="4">Storage</heading>
</para><para>Floating-point number values are stored directly inside a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for number values (integer)</para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> for number values (unsigned integer)</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17868" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" prot="public" static="no">
        <type><ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype" kindref="compound">nlohmann::byte_container_with_subtype</ref>&lt; <ref refid="d7/d1c/classBinaryType" kindref="compound">BinaryType</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_t =  nlohmann::byte_container_with_subtype&lt;BinaryType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_t</name>
        <briefdescription>
<para>a type for a packed binary type </para>        </briefdescription>
        <detaileddescription>
<para>This type is a type designed to carry binary data that appears in various serialized formats, such as CBOR&apos;s Major Type 2, MessagePack&apos;s bin, and BSON&apos;s generic binary subtype. This type is NOT a part of standard JSON and exists solely for compatibility with these binary types. As such, it is simply defined as an ordered sequence of zero or more byte values.</para><para>Additionally, as an implementation detail, the subtype of the binary data is carried around as a <computeroutput>std::uint8_t</computeroutput>, which is compatible with both of the binary data formats that use binary subtyping, (though the specific numbering is incompatible with each other, and it is up to the user to translate between them).</para><para><ulink url="https://tools.ietf.org/html/rfc7049">CBOR&apos;s RFC 7049</ulink> describes this type as: <blockquote><para>Major type 2: a byte string. The string&apos;s length in bytes is represented following the rules for positive integers (major type 0). </para></blockquote></para><para><ulink url="https://github.com/msgpack/msgpack/blob/master/spec.md#bin-format-family">MessagePack&apos;s documentation on the bin type family</ulink> describes this type as: <blockquote><para>Bin format family stores an byte array in 2, 3, or 5 bytes of extra bytes in addition to the size of the byte array. </para></blockquote></para><para><ulink url="http://bsonspec.org/spec.html">BSON&apos;s specifications</ulink> describe several binary types; however, this type is intended to represent the generic binary type which has the description: <blockquote><para>Generic binary subtype - This is the most commonly used binary subtype and should be the &apos;default&apos; for drivers and tools. </para></blockquote></para><para>None of these impose any limitations on the internal representation other than the basic unit of storage be some type of array whose parts are decomposable into bytes.</para><para>The default representation of this binary format is a <computeroutput>std::vector&lt;std::uint8_t&gt;</computeroutput>, which is a very common way to represent a byte array in modern C++.</para><para><heading level="4">Default type</heading>
</para><para>The default values for <emphasis><ref refid="d7/d1c/classBinaryType" kindref="compound">BinaryType</ref></emphasis> is <computeroutput>std::vector&lt;std::uint8_t&gt;</computeroutput></para><para><heading level="4">Storage</heading>
</para><para>Binary Arrays are stored as pointers in a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type. That is, for any access to array values, a pointer of the type <computeroutput>binary_t*</computeroutput> must be dereferenced.</para><para><heading level="4">Notes on subtypes</heading>
</para><para><itemizedlist>
<listitem><para>CBOR<itemizedlist>
<listitem><para>Binary values are represented as byte strings. No subtypes are supported and will be ignored when CBOR is written.</para></listitem></itemizedlist>
</para></listitem><listitem><para>MessagePack<itemizedlist>
<listitem><para>If a subtype is given and the binary array contains exactly 1, 2, 4, 8, or 16 elements, the fixext family (fixext1, fixext2, fixext4, fixext8) is used. For other sizes, the ext family (ext8, ext16, ext32) is used. The subtype is then added as singed 8-bit integer.</para></listitem><listitem><para>If no subtype is given, the bin family (bin8, bin16, bin32) is used.</para></listitem></itemizedlist>
</para></listitem><listitem><para>BSON<itemizedlist>
<listitem><para>If a subtype is given, it is used and added as unsigned 8-bit integer.</para></listitem><listitem><para>If no subtype is given, the generic binary subtype 0x00 is used.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" kindref="member">binary</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" kindref="member">binary</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref></para></simplesect>
<simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17939" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17939" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>constructors and destructors</header>
      <description><para>Constructors of class <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, copy/move constructor, copy assignment, static functions creating objects, and the destructor. </para></description>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3d255dbe024ce2d0fdfb1b4837629091" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(const typename binary_t::container_type &amp;init)</argsstring>
        <name>binary</name>
        <param>
          <type>const typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (without subtype) </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON binary array value from a given binary container. Binary values are part of various binary formats, such as CBOR, MessagePack, and BSON. This constructor is used to create a value for serialization to those formats.</para><para><simplesect kind="note"><para>Note, this function exists because of the difficulty in correctly specifying the correct template overload in the standard value ctor, as both JSON arrays and JSON binary arrays are backed with some form of a <computeroutput>std::vector</computeroutput>. Because JSON binary arrays are a non-standard extension it was decided that it would be best to prevent automatic initialization of a binary array type, for backwards compatibility and so it does not happen on accident.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>container containing bytes to use as binary type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON binary array value</para></simplesect>
Linear in the size of <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18786" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18786" bodyend="18792"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1acd2c506b279049f7d92ad7ae10a2f12b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(const typename binary_t::container_type &amp;init, std::uint8_t subtype)</argsstring>
        <name>binary</name>
        <param>
          <type>const typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (with subtype) </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON binary array value from a given binary container. Binary values are part of various binary formats, such as CBOR, MessagePack, and BSON. This constructor is used to create a value for serialization to those formats.</para><para><simplesect kind="note"><para>Note, this function exists because of the difficulty in correctly specifying the correct template overload in the standard value ctor, as both JSON arrays and JSON binary arrays are backed with some form of a <computeroutput>std::vector</computeroutput>. Because JSON binary arrays are a non-standard extension it was decided that it would be best to prevent automatic initialization of a binary array type, for backwards compatibility and so it does not happen on accident.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>container containing bytes to use as binary type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>subtype to use in MessagePack and BSON</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON binary array value</para></simplesect>
Linear in the size of <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18823" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18823" bodyend="18829"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab085777bbfbfac5a472120b991ef5cf3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;init)</argsstring>
        <name>binary</name>
        <param>
          <type>typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;&amp;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (without subtype) </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON binary array value from a given binary container. Binary values are part of various binary formats, such as CBOR, MessagePack, and BSON. This constructor is used to create a value for serialization to those formats.</para><para><simplesect kind="note"><para>Note, this function exists because of the difficulty in correctly specifying the correct template overload in the standard value ctor, as both JSON arrays and JSON binary arrays are backed with some form of a <computeroutput>std::vector</computeroutput>. Because JSON binary arrays are a non-standard extension it was decided that it would be best to prevent automatic initialization of a binary array type, for backwards compatibility and so it does not happen on accident.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>container containing bytes to use as binary type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON binary array value</para></simplesect>
Linear in the size of <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18833" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18833" bodyend="18839"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a012e375f4016b89444c528ed46cce3af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;init, std::uint8_t subtype)</argsstring>
        <name>binary</name>
        <param>
          <type>typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;&amp;</type>
          <declname>init</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>subtype</declname>
        </param>
        <briefdescription>
<para>explicitly create a binary array (with subtype) </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON binary array value from a given binary container. Binary values are part of various binary formats, such as CBOR, MessagePack, and BSON. This constructor is used to create a value for serialization to those formats.</para><para><simplesect kind="note"><para>Note, this function exists because of the difficulty in correctly specifying the correct template overload in the standard value ctor, as both JSON arrays and JSON binary arrays are backed with some form of a <computeroutput>std::vector</computeroutput>. Because JSON binary arrays are a non-standard extension it was decided that it would be best to prevent automatic initialization of a binary array type, for backwards compatibility and so it does not happen on accident.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>container containing bytes to use as binary type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>subtype to use in MessagePack and BSON</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON binary array value</para></simplesect>
Linear in the size of <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18843" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18843" bodyend="18849"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array</definition>
        <argsstring>(initializer_list_t init={})</argsstring>
        <name>array</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>explicitly create an array from an initializer list </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON array value from a given initializer list. That is, given a list of values <computeroutput>a, b, c</computeroutput>, creates the JSON value <computeroutput>[a, b, c]</computeroutput>. If the initializer list is empty, the empty array <computeroutput>[]</computeroutput> is created.</para><para><simplesect kind="note"><para>This function is only needed to express two edge cases that cannot be realized with the initializer list constructor (<ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" kindref="member">basic_json(initializer_list_t, bool, value_t)</ref>). These cases are:<orderedlist>
<listitem><para>creating an array whose elements are all pairs whose first element is a string <ndash/> in this case, the initializer list constructor would create an object, taking the first elements as keys</para></listitem><listitem><para>creating an empty array <ndash/> passing the empty initializer list to the initializer list constructor yields an empty object</para></listitem></orderedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list with JSON values to create an array from (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON array value</para></simplesect>
Linear in the size of <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>{The following code shows an example for the <computeroutput>array</computeroutput> function.,array}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" kindref="member">basic_json(initializer_list_t, bool, value_t)</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> from an initializer list </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object(initializer_list_t)</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> from an initializer list</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18889" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18889" bodyend="18892"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::object</definition>
        <argsstring>(initializer_list_t init={})</argsstring>
        <name>object</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>explicitly create an object from an initializer list </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON object value from a given initializer list. The initializer lists elements must be pairs, and their first elements must be strings. If the initializer list is empty, the empty object <computeroutput>{}</computeroutput> is created.</para><para><simplesect kind="note"><para>This function is only added for symmetry reasons. In contrast to the related function <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" kindref="member">array(initializer_list_t)</ref>, there are no cases which can only be expressed by this function. That is, any initializer list <emphasis>init</emphasis> can also be passed to the initializer list constructor <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" kindref="member">basic_json(initializer_list_t, bool, value_t)</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list to create an object from (optional)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>JSON object value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.301</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>init</emphasis> is not a list of pairs whose first elements are strings. In this case, no object can be created. When such a value is passed to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" kindref="member">basic_json(initializer_list_t, bool, value_t)</ref>, an array would have been created from the passed initializer list <emphasis>init</emphasis>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>{The following code shows an example for the <computeroutput>object</computeroutput> function.,object}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" kindref="member">basic_json(initializer_list_t, bool, value_t)</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> from an initializer list </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" kindref="member">array(initializer_list_t)</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> from an initializer list</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18933" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18933" bodyend="18936"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const value_t v)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>create an empty value with a given type </para>        </briefdescription>
        <detaileddescription>
<para>Create an empty JSON value with a given type. The value will be default initialized with an empty value which depends on the type:</para><para><table rows="8" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>initial value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><computeroutput>{}</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><computeroutput>[]</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para>empty array </para></entry></row>
</table>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">v</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the value to create</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>{The following code shows the constructor for different <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad" kindref="member">value_t</ref> values,basic_json__value_t}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53" kindref="member">clear()</ref> <ndash/> restores the postcondition of this constructor</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18447" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18447" bodyend="18451"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ace6fbaf6c64f60b61922b5c9d3e61aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(std::nullptr_t=nullptr) noexcept</argsstring>
        <name>basic_json</name>
        <param>
          <type>std::nullptr_t</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>create a null object </para>        </briefdescription>
        <detaileddescription>
<para>Create a <computeroutput>null</computeroutput> JSON value. It either takes a null pointer as parameter (explicitly creating <computeroutput>null</computeroutput>) or no parameter (implicitly creating <computeroutput>null</computeroutput>). The passed null pointer itself is not read <ndash/> it is only used to choose the right constructor.</para><para>Constant.</para><para>No-throw guarantee: this constructor never throws exceptions.</para><para>{The following code shows the constructor with and without a null pointer parameter.,basic_json__nullptr_t}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18471" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18471" bodyend="18475"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a232bddcef573bde8777a6a87da0048dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CompatibleType</type>
          </param>
          <param>
            <type>typename U</type>
            <defval><ref refid="dc/df0/namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7" kindref="member">detail::uncvref_t</ref>&lt;CompatibleType&gt;</defval>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; U &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;<ref refid="d3/d71/structnlohmann_1_1detail_1_1is__compatible__type" kindref="compound">detail::is_compatible_type</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, U &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(CompatibleType &amp;&amp;val) noexcept(noexcept(//NOLINT(bugprone-forwarding-reference-overload, bugprone-exception-escape) JSONSerializer&lt; U &gt;::to_json(std::declval&lt; basic_json_t &amp;&gt;(), std::forward&lt; CompatibleType &gt;(val))))</argsstring>
        <name>basic_json</name>
        <param>
          <type>CompatibleType &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value </para>        </briefdescription>
        <detaileddescription>
<para>This is a &quot;catch all&quot; constructor for all compatible JSON types; that is, types for which a <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" kindref="member">to_json()</ref></computeroutput> method exists. The constructor forwards the parameter <emphasis>val</emphasis> to that method (to <computeroutput>json_serializer&lt;U&gt;::to_json</computeroutput> method with <computeroutput>U = uncvref_t&lt;CompatibleType&gt;</computeroutput>, to be exact).</para><para>Template type <emphasis>CompatibleType</emphasis> includes, but is not limited to, the following types:<itemizedlist>
<listitem><para><bold>arrays</bold>: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> and all kinds of compatible containers such as <computeroutput>std::vector</computeroutput>, <computeroutput>std::deque</computeroutput>, <computeroutput>std::list</computeroutput>, <computeroutput>std::forward_list</computeroutput>, <computeroutput>std::array</computeroutput>, <computeroutput>std::valarray</computeroutput>, <computeroutput>std::set</computeroutput>, <computeroutput>std::unordered_set</computeroutput>, <computeroutput>std::multiset</computeroutput>, and <computeroutput>std::unordered_multiset</computeroutput> with a <computeroutput>value_type</computeroutput> from which a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> value can be constructed.</para></listitem><listitem><para><bold>objects</bold>: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> and all kinds of compatible associative containers such as <computeroutput>std::map</computeroutput>, <computeroutput>std::unordered_map</computeroutput>, <computeroutput>std::multimap</computeroutput>, and <computeroutput>std::unordered_multimap</computeroutput> with a <computeroutput>key_type</computeroutput> compatible to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> and a <computeroutput>value_type</computeroutput> from which a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> value can be constructed.</para></listitem><listitem><para><bold>strings</bold>: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, string literals, and all compatible string containers can be used.</para></listitem><listitem><para><bold>numbers</bold>: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>, and all convertible number types such as <computeroutput>int</computeroutput>, <computeroutput>size_t</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>float</computeroutput> or <computeroutput>double</computeroutput> can be used.</para></listitem><listitem><para><bold>boolean</bold>: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref> / <computeroutput>bool</computeroutput> can be used.</para></listitem><listitem><para><bold>binary</bold>: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> / <computeroutput>std::vector&lt;uint8_t&gt;</computeroutput> may be used, unfortunately because string literals cannot be distinguished from binary character arrays by the C++ type system, all types compatible with <computeroutput>const char*</computeroutput> will be directed to the string constructor instead. This is both for backwards compatibility, and due to the fact that a binary type is not a standard JSON type.</para></listitem></itemizedlist>
</para><para>See the examples below.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CompatibleType</parametername>
</parameternamelist>
<parameterdescription>
<para>a type such that:<itemizedlist>
<listitem><para><emphasis>CompatibleType</emphasis> is not derived from <computeroutput>std::istream</computeroutput>,</para></listitem><listitem><para><emphasis>CompatibleType</emphasis> is not <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> (to avoid hijacking copy/move constructors),</para></listitem><listitem><para><emphasis>CompatibleType</emphasis> is not a different <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type (i.e. with different template arguments)</para></listitem><listitem><para><emphasis>CompatibleType</emphasis> is not a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> nested type (e.g., <ref refid="da/de8/classnlohmann_1_1json__pointer" kindref="compound">json_pointer</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref>, etc ...)</para></listitem><listitem><para><computeroutput>json_serializer&lt;U&gt;</computeroutput> has a <computeroutput>to_json(basic_json_t&amp;, CompatibleType&amp;&amp;)</computeroutput> method</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>U</parametername>
</parameternamelist>
<parameterdescription>
<para>= <computeroutput>uncvref_t&lt;CompatibleType&gt;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to be forwarded to the respective constructor</para></parameterdescription>
</parameteritem>
</parameterlist>
Usually linear in the size of the passed <emphasis>val</emphasis>, also depending on the implementation of the called <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" kindref="member">to_json()</ref></computeroutput> method.</para><para>Depends on the called constructor. For types directly supported by the library (i.e., all types for which no <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" kindref="member">to_json()</ref></computeroutput> function was provided), strong guarantee holds: if an exception is thrown, there are no changes to any JSON value.</para><para>{The following code shows the constructor with several compatible types.,basic_json__CompatibleType}</para><para><simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18543" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18543" bodyend="18550"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" compoundref="d5/db8/json_8hpp" startline="4803" endline="4806">nlohmann::detail::to_json</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a40738eb9cb8c5a9ca14ae4b697c29f8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, BasicJsonType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const BasicJsonType &amp;val)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>create a JSON value from an existing one </para>        </briefdescription>
        <detaileddescription>
<para>This is a constructor for existing <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> types. It does not hijack copy/move constructors, since the parameter has different template arguments than the current ones.</para><para>The constructor tries to convert the internal <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0" kindref="member">m_value</ref> of the parameter.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>a type such that:<itemizedlist>
<listitem><para><emphasis>BasicJsonType</emphasis> is a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type.</para></listitem><listitem><para><emphasis>BasicJsonType</emphasis> has different template arguments than <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> value to be converted.</para></parameterdescription>
</parameteritem>
</parameterlist>
Usually linear in the size of the passed <emphasis>val</emphasis>, also depending on the implementation of the called <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" kindref="member">to_json()</ref></computeroutput> method.</para><para>Depends on the called constructor. For types directly supported by the library (i.e., all types for which no <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" kindref="member">to_json()</ref></computeroutput> function was provided), strong guarantee holds: if an exception is thrown, there are no changes to any JSON value.</para><para><simplesect kind="since"><para>version 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18581" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18581" bodyend="18629"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" compoundref="d5/db8/json_8hpp" startline="4803" endline="4806">nlohmann::detail::to_json</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(initializer_list_t init, bool type_deduction=true, value_t manual_type=value_t::array)</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>type_deduction</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
          <declname>manual_type</declname>
          <defval><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">value_t::array</ref></defval>
        </param>
        <briefdescription>
<para>create a container (array or object) from an initializer list </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON value of type array or object from the passed initializer list <emphasis>init</emphasis>. In case <emphasis>type_deduction</emphasis> is <computeroutput>true</computeroutput> (default), the type of the JSON value to be created is deducted from the initializer list <emphasis>init</emphasis> according to the following rules:</para><para><orderedlist>
<listitem><para>If the list is empty, an empty JSON object value <computeroutput>{}</computeroutput> is created.</para></listitem><listitem><para>If the list consists of pairs whose first element is a string, a JSON object value is created where the first elements of the pairs are treated as keys and the second elements are as values.</para></listitem><listitem><para>In all other cases, an array is created.</para></listitem></orderedlist>
</para><para>The rules aim to create the best fit between a C++ initializer list and JSON values. The rationale is as follows:</para><para><orderedlist>
<listitem><para>The empty initializer list is written as <computeroutput>{}</computeroutput> which is exactly an empty JSON object.</para></listitem><listitem><para>C++ has no way of describing mapped types other than to list a list of pairs. As JSON requires that keys must be of type string, rule 2 is the weakest constraint one can pose on initializer lists to interpret them as an object.</para></listitem><listitem><para>In all other cases, the initializer list could not be interpreted as JSON object type, so interpreting it as JSON array type is safe.</para></listitem></orderedlist>
</para><para>With the rules described above, the following JSON values cannot be expressed by an initializer list:</para><para><itemizedlist>
<listitem><para>the empty array (<computeroutput>[]</computeroutput>): use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" kindref="member">array(initializer_list_t)</ref> with an empty initializer list in this case</para></listitem><listitem><para>arrays whose elements satisfy rule 2: use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" kindref="member">array(initializer_list_t)</ref> with the same initializer list in this case</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>When used without parentheses around an empty initializer list, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json()</ref> is called instead of this function, yielding the JSON null value.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list with JSON values</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type_deduction</parametername>
</parameternamelist>
<parameterdescription>
<para>internal parameter; when set to <computeroutput>true</computeroutput>, the type of the JSON value is deducted from the initializer list <emphasis>init</emphasis>; when set to <computeroutput>false</computeroutput>, the type provided via <emphasis>manual_type</emphasis> is forced. This mode is used by the functions <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" kindref="member">array(initializer_list_t)</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object(initializer_list_t)</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">manual_type</parametername>
</parameternamelist>
<parameterdescription>
<para>internal parameter; when <emphasis>type_deduction</emphasis> is set to <computeroutput>false</computeroutput>, the created JSON value will use the provided type (only <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">value_t::array</ref> and <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666" kindref="member">value_t::object</ref> are valid); when <emphasis>type_deduction</emphasis> is set to <computeroutput>true</computeroutput>, this parameter has no effect</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.301</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>type_deduction</emphasis> is <computeroutput>false</computeroutput>, <emphasis>manual_type</emphasis> is <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666" kindref="member">value_t::object</ref></computeroutput>, but <emphasis>init</emphasis> contains an element which is not a pair whose first element is a string. In this case, the constructor could not create an object. If <emphasis>type_deduction</emphasis> would have be <computeroutput>true</computeroutput>, an array would have been created. See <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object(initializer_list_t)</ref> for an example.</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the initializer list <emphasis>init</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>{The example below shows how JSON values are created from initializer lists.,basic_json__list_init_t}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" kindref="member">array(initializer_list_t)</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> from an initializer list </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object(initializer_list_t)</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> from an initializer list</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18705" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18705" bodyend="18756"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1afbccea367512a87b5d76e2bd92c5cc85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(size_type cnt, const basic_json &amp;val)</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>construct an array with count copies of given value </para>        </briefdescription>
        <detaileddescription>
<para>Constructs a JSON array value by creating <emphasis>cnt</emphasis> copies of a passed value. In case <emphasis>cnt</emphasis> is <computeroutput>0</computeroutput>, an empty array is created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of JSON copies of <emphasis>val</emphasis> to create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the JSON value to copy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><computeroutput>std::distance(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref>,<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref>) == cnt</computeroutput> holds.</para></simplesect>
Linear in <emphasis>cnt</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>{The following code shows examples for the <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>(size_type\, const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;) constructor.,basic_json__size_type_basic_json}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18960" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18960" bodyend="18966"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; InputIT, typename basic_json_t::iterator &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>||std::is_same&lt; InputIT, typename basic_json_t::const_iterator &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(InputIT first, InputIT last)</argsstring>
        <name>basic_json</name>
        <param>
          <type>InputIT</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIT</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>construct a JSON container given an iterator range </para>        </briefdescription>
        <detaileddescription>
<para>Constructs the JSON value with the contents of the range <computeroutput>[first, last)</computeroutput>. The semantics depends on the different types a JSON value can have:<itemizedlist>
<listitem><para>In case of a null type, invalid_iterator.206 is thrown.</para></listitem><listitem><para>In case of other primitive types (number, boolean, or string), <emphasis>first</emphasis> must be <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput> and <emphasis>last</emphasis> must be <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>. In this case, the value is copied. Otherwise, invalid_iterator.204 is thrown.</para></listitem><listitem><para>In case of structured types (array, object), the constructor behaves as similar versions for <computeroutput>std::vector</computeroutput> or <computeroutput>std::map</computeroutput>; that is, a JSON array or object is constructed from the values in the range.</para></listitem></itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputIT</parametername>
</parameternamelist>
<parameterdescription>
<para>an input iterator type (<ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref>)</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range to copy from (included) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range to copy from (excluded)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>Iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> must be initialized. <bold>This precondition is enforced with an assertion (see warning).</bold> If assertions are switched off, a violation of this precondition yields undefined behavior.</para></simplesect>
<simplesect kind="pre"><para>Range <computeroutput>[first, last)</computeroutput> is valid. Usually, this precondition cannot be checked efficiently. Only certain edge cases are detected; see the description of the exceptions below. A violation of this precondition yields undefined behavior.</para></simplesect>
<simplesect kind="warning"><para>A precondition is enforced with a runtime assertion that will result in calling <computeroutput>std::abort</computeroutput> if this precondition is not met. Assertions can be disabled by defining <computeroutput>NDEBUG</computeroutput> at compile time. See <ulink url="https://en.cppreference.com/w/cpp/error/assert">https://en.cppreference.com/w/cpp/error/assert</ulink> for more information.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.201</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> are not compatible (i.e., do not belong to the same JSON value). In this case, the range <computeroutput>[first, last)</computeroutput> is undefined. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.204</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> belong to a primitive type (number, boolean, or string), but <emphasis>first</emphasis> does not point to the first element any more. In this case, the range <computeroutput>[first, last)</computeroutput> is undefined. See example code below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.206</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterators <emphasis>first</emphasis> and <emphasis>last</emphasis> belong to a null value. In this case, the range <computeroutput>[first, last)</computeroutput> is undefined.</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in distance between <emphasis>first</emphasis> and <emphasis>last</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>{The example below shows several ways to create JSON values by specifying a subrange with iterators.,basic_json__InputIt_InputIt}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19026" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19026" bodyend="19119"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a28524e9c443076ea6dccff8e391354ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename JsonRef</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="dd/dde/structnlohmann_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="d3/d0b/structnlohmann_1_1detail_1_1is__json__ref" kindref="compound">detail::is_json_ref</ref>&lt; JsonRef &gt;, std::is_same&lt; typename JsonRef::value_type, <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;&gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const JsonRef &amp;ref)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const JsonRef &amp;</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19129" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19129" bodyend="19129"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(const basic_json &amp;other)</argsstring>
        <name>basic_json</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
<para>Creates a copy of a given JSON value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>the JSON value to copy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><computeroutput>*this == other</computeroutput></para></simplesect>
Linear in the size of <emphasis>other</emphasis>.</para><para>Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is linear.</para></listitem><listitem><para>As postcondition, it holds: <computeroutput>other == basic_json(other)</computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for the copy constructor.,basic_json__basic_json}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19156" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19156" bodyend="19218"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a2ef98c6797810a551296191fc72e2b9e" compoundref="d5/db8/json_8hpp" startline="18262" endline="18281">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::assert_invariant</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0" compoundref="d5/db8/json_8hpp" startline="24119">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::m_value</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a642afd9d8886e0dedfc0d5cee2baf57f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</definition>
        <argsstring>(basic_json &amp;&amp;other) noexcept</argsstring>
        <name>basic_json</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>move constructor </para>        </briefdescription>
        <detaileddescription>
<para>Move constructor. Constructs a JSON value with the contents of the given value <emphasis>other</emphasis> using move semantics. It &quot;steals&quot; the resources from <emphasis>other</emphasis> and leaves it as JSON null value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>value to move to this object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><computeroutput>*this</computeroutput> has the same value as <emphasis>other</emphasis> before the call. </para></simplesect>
<simplesect kind="post"><para><emphasis>other</emphasis> is a JSON null value.</para></simplesect>
Constant.</para><para>No-throw guarantee: this constructor never throws exceptions.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/MoveConstructible">MoveConstructible</ulink> requirements.</para><para>{The code below shows the move constructor explicitly called via std::move.,basic_json__moveconstructor}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19246" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19246" bodyend="19259"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a1ae937c299f347a9dcb7f31a8e57762b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
        <definition>basic_json&amp; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator=</definition>
        <argsstring>(basic_json other) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>copy assignment </para>        </briefdescription>
        <detaileddescription>
<para>Copy assignment operator. Copies a JSON value via the &quot;copy and swap&quot; strategy: It is expressed in terms of the copy constructor, destructor, and the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput> member function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>value to copy from</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is linear.</para></listitem></itemizedlist>
</para><para>{The code below shows and example for the copy assignment. It creates a copy of value <computeroutput>a</computeroutput> which is then swapped with <computeroutput>b</computeroutput>. Finally\, the copy of <computeroutput>a</computeroutput> (which is the null value after the swap) is destroyed.,basic_json__copyassignment}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19284" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19284" bodyend="19301"/>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a2ef98c6797810a551296191fc72e2b9e" compoundref="d5/db8/json_8hpp" startline="18262" endline="18281">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::assert_invariant</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a60b643c02a19fa52f99db8215ff58e0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::~basic_json</definition>
        <argsstring>() noexcept</argsstring>
        <name>~basic_json</name>
        <briefdescription>
<para>destructor </para>        </briefdescription>
        <detaileddescription>
<para>Destroys the JSON value and frees all allocated memory.</para><para>Linear.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is linear.</para></listitem><listitem><para>All stored elements are destroyed and all memory is freed.</para></listitem></itemizedlist>
</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19318" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19318" bodyend="19322"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>object inspection</header>
      <description><para>Functions to inspect the type of a JSON value. </para></description>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::dump</definition>
        <argsstring>(const int indent=-1, const char indent_char=&apos; &apos;, const bool ensure_ascii=false, const error_handler_t error_handler=error_handler_t::strict) const</argsstring>
        <name>dump</name>
        <param>
          <type>const int</type>
          <declname>indent</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const char</type>
          <declname>indent_char</declname>
          <defval>&apos; &apos;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ensure_ascii</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df" kindref="member">error_handler_t</ref></type>
          <declname>error_handler</declname>
          <defval>error_handler_t::strict</defval>
        </param>
        <briefdescription>
<para>serialization </para>        </briefdescription>
        <detaileddescription>
<para>Serialization function for JSON values. The function tries to mimic Python&apos;s <computeroutput>json.dumps()</computeroutput> function, and currently supports its <emphasis>indent</emphasis> and <emphasis>ensure_ascii</emphasis> parameters.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">indent</parametername>
</parameternamelist>
<parameterdescription>
<para>If indent is nonnegative, then array elements and object members will be pretty-printed with that indent level. An indent level of <computeroutput>0</computeroutput> will only insert newlines. <computeroutput>-1</computeroutput> (the default) selects the most compact representation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indent_char</parametername>
</parameternamelist>
<parameterdescription>
<para>The character to use for indentation if <emphasis>indent</emphasis> is greater than <computeroutput>0</computeroutput>. The default is (space). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ensure_ascii</parametername>
</parameternamelist>
<parameterdescription>
<para>If <emphasis>ensure_ascii</emphasis> is true, all non-ASCII characters in the output are escaped with <computeroutput>\uXXXX</computeroutput> sequences, and the result consists of ASCII characters only. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">error_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how to react on decoding errors; there are three possible values: <computeroutput>strict</computeroutput> (throws and exception in case a decoding error occurs; default), <computeroutput>replace</computeroutput> (replace invalid UTF-8 sequences with U+FFFD), and <computeroutput>ignore</computeroutput> (ignore invalid UTF-8 sequences during serialization; all bytes are copied to the output unchanged).</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string containing the serialization of the JSON value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.316</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string stored inside the JSON value is not UTF-8 encoded and <emphasis>error_handler</emphasis> is set to strict</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Binary values are serialized as object containing two keys:<itemizedlist>
<listitem><para>&quot;bytes&quot;: an array of bytes as integers</para></listitem><listitem><para>&quot;subtype&quot;: the subtype as integer or &quot;null&quot; if the binary has no subtype</para></listitem></itemizedlist>
</para></simplesect>
Linear.</para><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>{The following example shows the effect of different <emphasis>indent\</emphasis>, <emphasis>indent_char\</emphasis>, and <emphasis>ensure_ascii</emphasis> parameters to the result of the serialization.,dump}</para><para><simplesect kind="see"><para><ulink url="https://docs.python.org/2/library/json.html#json.dump">https://docs.python.org/2/library/json.html#json.dump</ulink></para></simplesect>
<simplesect kind="since"><para>version 1.0.0; indentation character <emphasis>indent_char</emphasis>, option <emphasis>ensure_ascii</emphasis> and exceptions added in version 3.0.0; error handlers added in version 3.4.0; serialization of binary values added in version 3.8.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19382" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19382" bodyend="19400"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
        <definition>constexpr value_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <briefdescription>
<para>return the type of the JSON value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Return the type of the JSON value as a value from the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad" kindref="member">value_t</ref> enumeration.</para><para><simplesect kind="return"><para>the type of the JSON value <table rows="11" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd" kindref="member">value_t::null</ref> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27" kindref="member">value_t::boolean</ref> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">value_t::string</ref> </para></entry></row>
<row>
<entry thead="no"><para>number (integer) </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc" kindref="member">value_t::number_integer</ref> </para></entry></row>
<row>
<entry thead="no"><para>number (unsigned integer) </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e" kindref="member">value_t::number_unsigned</ref> </para></entry></row>
<row>
<entry thead="no"><para>number (floating-point) </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef" kindref="member">value_t::number_float</ref> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666" kindref="member">value_t::object</ref> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">value_t::array</ref> </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20" kindref="member">value_t::binary</ref> </para></entry></row>
<row>
<entry thead="no"><para>discarded </para></entry><entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref> </para></entry></row>
</table>
Constant.</para></simplesect>
No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type()</ref></computeroutput> for all JSON types.,type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6d4b8df10ecc533a50823e8805f4a873" kindref="member">operator value_t()</ref> <ndash/> return the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> of the JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> (implicit) </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a459dbfcd47bd632ca82ca8ff8db278c8" kindref="member">type_name()</ref> <ndash/> return the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac32019eb29dc7bb4c326a233e0e2f0cb" kindref="member">string</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19435" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19435" bodyend="19438"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_primitive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_primitive</name>
        <briefdescription>
<para>return whether type is primitive </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON type is primitive (string, number, boolean, or null).</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is primitive (string, number, boolean, or null), <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4" kindref="member">is_primitive()</ref></computeroutput> for all JSON types.,is_primitive}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249" kindref="member">is_structured()</ref> <ndash/> returns whether JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is structured </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f" kindref="member">is_null()</ref> <ndash/> returns whether JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is <computeroutput>null</computeroutput> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7" kindref="member">is_string()</ref> <ndash/> returns whether JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac32019eb29dc7bb4c326a233e0e2f0cb" kindref="member">string</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b" kindref="member">is_boolean()</ref> <ndash/> returns whether JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7386443608348fa4b451f033a1439074" kindref="member">boolean</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" kindref="member">is_number()</ref> <ndash/> returns whether JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80" kindref="member">is_binary()</ref> <ndash/> returns whether JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" kindref="member">binary</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19466" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19466" bodyend="19469"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_structured</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_structured</name>
        <briefdescription>
<para>return whether type is structured </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON type is structured (array or object).</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is structured (array or object), <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249" kindref="member">is_structured()</ref></computeroutput> for all JSON types.,is_structured}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4" kindref="member">is_primitive()</ref> <ndash/> returns whether <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is primitive </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" kindref="member">is_array()</ref> <ndash/> returns whether <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" kindref="member">is_object()</ref> <ndash/> returns whether <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19493" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19493" bodyend="19496"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_null</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_null</name>
        <briefdescription>
<para>return whether value is null </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is null.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is null, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f" kindref="member">is_null()</ref></computeroutput> for all JSON types.,is_null}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19515" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19515" bodyend="19518"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_boolean</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_boolean</name>
        <briefdescription>
<para>return whether value is a boolean </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is a boolean.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is boolean, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b" kindref="member">is_boolean()</ref></computeroutput> for all JSON types.,is_boolean}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19537" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19537" bodyend="19540"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number</name>
        <briefdescription>
<para>return whether value is a number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is a number. This includes both integer (signed and unsigned) and floating-point values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is number (regardless whether integer, unsigned integer or floating-type), <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" kindref="member">is_number()</ref></computeroutput> for all JSON types.,is_number}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" kindref="member">is_number_integer()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an integer or unsigned integer number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" kindref="member">is_number_unsigned()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an unsigned integer number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" kindref="member">is_number_float()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a floating-point number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19567" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19567" bodyend="19570"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_integer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_integer</name>
        <briefdescription>
<para>return whether value is an integer number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is a signed or unsigned integer number. This excludes floating-point values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is an integer or unsigned integer number, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" kindref="member">is_number_integer()</ref></computeroutput> for all JSON types.,is_number_integer}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" kindref="member">is_number()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" kindref="member">is_number_unsigned()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an unsigned integer number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" kindref="member">is_number_float()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a floating-point number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19596" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19596" bodyend="19599"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_unsigned</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_unsigned</name>
        <briefdescription>
<para>return whether value is an unsigned integer number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is an unsigned integer number. This excludes floating-point and signed integer values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is an unsigned integer number, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" kindref="member">is_number_unsigned()</ref></computeroutput> for all JSON types.,is_number_unsigned}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" kindref="member">is_number()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" kindref="member">is_number_integer()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an integer or unsigned integer number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" kindref="member">is_number_float()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is a floating-point number</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19624" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19624" bodyend="19627"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_number_float</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_number_float</name>
        <briefdescription>
<para>return whether value is a floating-point number </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is a floating-point number. This excludes signed and unsigned integer values.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is a floating-point number, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" kindref="member">is_number_float()</ref></computeroutput> for all JSON types.,is_number_float}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" kindref="member">is_number()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" kindref="member">is_number_integer()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an integer number </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" kindref="member">is_number_unsigned()</ref> <ndash/> check if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is an unsigned integer number</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19652" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19652" bodyend="19655"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_object</name>
        <briefdescription>
<para>return whether value is an object </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is an object.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is object, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" kindref="member">is_object()</ref></computeroutput> for all JSON types.,is_object}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19674" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19674" bodyend="19677"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adca9bb93a7bfa43bdae38dd8493cc042" compoundref="d5/db8/json_8hpp" startline="18152" endline="18240">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::destroy</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb" compoundref="d5/db8/json_8hpp" startline="25816" endline="25840">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::merge_patch</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" compoundref="d5/db8/json_8hpp" startline="22924" endline="22947">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_array</name>
        <briefdescription>
<para>return whether value is an array </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is an array.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is array, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" kindref="member">is_array()</ref></computeroutput> for all JSON types.,is_array}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19696" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19696" bodyend="19699"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adca9bb93a7bfa43bdae38dd8493cc042" compoundref="d5/db8/json_8hpp" startline="18152" endline="18240">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::destroy</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_string</name>
        <briefdescription>
<para>return whether value is a string </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is a string.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is string, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7" kindref="member">is_string()</ref></computeroutput> for all JSON types.,is_string}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19718" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19718" bodyend="19721"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_binary</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_binary</name>
        <briefdescription>
<para>return whether value is a binary array </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value is a binary array.</para><para><simplesect kind="return"><para><computeroutput>true</computeroutput> if type is binary array, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80" kindref="member">is_binary()</ref></computeroutput> for all JSON types.,is_binary}</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19740" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19740" bodyend="19743"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_discarded</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_discarded</name>
        <briefdescription>
<para>return whether value is discarded </para>        </briefdescription>
        <detaileddescription>
<para>This function returns true if and only if the JSON value was discarded during parsing with a callback function (see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref>).</para><para><simplesect kind="note"><para>This function will always be <computeroutput>false</computeroutput> for JSON values after parsing. That is, discarded values can only occur during parsing, but will be removed when inside a structured value or replaced by null in other cases.</para></simplesect>
<simplesect kind="return"><para><computeroutput>true</computeroutput> if type is discarded, <computeroutput>false</computeroutput> otherwise.</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d" kindref="member">is_discarded()</ref></computeroutput> for all JSON types.,is_discarded}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19767" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19767" bodyend="19770"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a6d4b8df10ecc533a50823e8805f4a873" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator value_t</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator value_t</name>
        <briefdescription>
<para>return the type of the JSON value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicitly return the type of the JSON value as a value from the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad" kindref="member">value_t</ref> enumeration.</para><para><simplesect kind="return"><para>the type of the JSON value</para></simplesect>
Constant.</para><para>No-throw guarantee: this member function never throws exceptions.</para><para>{The following code exemplifies the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad" kindref="member">value_t</ref> operator for all JSON types.,operator__value_t}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type()</ref> <ndash/> return the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> of the JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> (explicit) </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a459dbfcd47bd632ca82ca8ff8db278c8" kindref="member">type_name()</ref> <ndash/> return the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac32019eb29dc7bb4c326a233e0e2f0cb" kindref="member">string</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19793" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19793" bodyend="19796"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>value access</header>
      <description><para>Direct access to the stored value of a JSON value. </para></description>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad2e690ffeeff334640da1042c415bf65" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="d2/d91/structnlohmann_1_1detail_1_1is__default__constructible" kindref="compound">detail::is_default_constructible</ref>&lt; ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;<ref refid="dc/dac/structnlohmann_1_1detail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 0 &gt;) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp;&gt;(), std::declval&lt; ValueType &amp;&gt;())))</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
<para>get a value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink> and <ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method.</para><para>The function is equivalent to executing <programlisting><codeline><highlight class="normal">ValueType<sp/>ret;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1f0395aad0fe853a4539288749d3a603" kindref="member">JSONSerializer&lt;ValueType&gt;::from_json</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
</programlisting></para><para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>,</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method of the form <computeroutput>void from_json(const basic_json&amp;, ValueType&amp;)</computeroutput>, and</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> does not have a <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method of the form <computeroutput>ValueType from_json(const basic_json&amp;)</computeroutput></para></listitem></itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method throws</para></parameterdescription>
</parameteritem>
</parameterlist>
{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,get__ValueType_const}</para><para><simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20033" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20033" bodyend="20039"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" compoundref="d5/db8/json_8hpp" startline="4231" endline="4246">nlohmann::detail::from_json</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ae0558bf35848bc194ffae2ef4d371c2c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="d7/d08/structnlohmann_1_1detail_1_1has__non__default__from__json" kindref="compound">detail::has_non_default_from_json</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 1 &gt;) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp;&gt;())))</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
<para>get a value (explicit); special case </para>        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value which is <bold>not</bold> <ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink> and <bold>not</bold> <ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>. The value is converted by calling the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method.</para><para>The function is equivalent to executing <programlisting><codeline><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1f0395aad0fe853a4539288749d3a603" kindref="member">JSONSerializer&lt;ValueType&gt;::from_json</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para><para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> and</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method of the form <computeroutput>ValueType from_json(const basic_json&amp;)</computeroutput></para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>If <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> has both overloads of <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput>, this one is chosen.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to <emphasis>ValueType</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method throws</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20075" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20075" bodyend="20079"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" compoundref="d5/db8/json_8hpp" startline="4231" endline="4246">nlohmann::detail::from_json</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a6a8e927bfe09a0410baba859cd1a04c1" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; BasicJsonType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>BasicJsonType</type>
        <definition>BasicJsonType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 2 &gt;) const</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
<para>get special-case overload </para>        </briefdescription>
        <detaileddescription>
<para>This overloads converts the current <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> in a different <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> type</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this, converted into <emphasis>BasicJsonType</emphasis> </para></simplesect>
Depending on the implementation of the called <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method.</para><para><simplesect kind="since"><para>version 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20100" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20100" bodyend="20103"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad5462e42ebf32c2570f5ade93e4bd34e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; BasicJsonType, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref> &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 3 &gt;) const</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
<para>get special-case overload </para>        </briefdescription>
        <detaileddescription>
<para>This overloads avoids a lot of template boilerplate, it can be seen as the identity method</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para>== <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a copy of *this</para></simplesect>
Constant.</para><para><simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20123" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20123" bodyend="20126"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a0ace71470cab6d59035de18cea4fe272" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 4 &gt;) const noexcept -&gt; decltype(std::declval&lt; const basic_json_t &amp;&gt;().template get_ptr&lt; PointerType &gt;())</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 4 &gt;</type>
        </param>
        <briefdescription>
<para>get a pointer value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>get a pointer value (explicit) Explicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref>, or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
Constant.</para><para>{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac3698ce827dcd4f0c81455461709938d" kindref="member">get_ptr()</ref> for explicit pointer-member access</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20136" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20136" bodyend="20141"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac3698ce827dcd4f0c81455461709938d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ptr</definition>
        <argsstring>() noexcept -&gt; decltype(std::declval&lt; basic_json_t &amp;&gt;().get_impl_ptr(std::declval&lt; PointerType &gt;()))</argsstring>
        <name>get_ptr</name>
        <briefdescription>
<para>get a pointer value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the pointee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref>, or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>. Enforced by a static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
Constant.</para><para>{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get_ptr}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19970" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19970" bodyend="19974"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ae4e9a0afab117f1642b90b9607285348" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;std::is_const&lt; typename std::remove_pointer&lt; PointerType &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref> &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ptr</definition>
        <argsstring>() const noexcept -&gt; decltype(std::declval&lt; const basic_json_t &amp;&gt;().get_impl_ptr(std::declval&lt; PointerType &gt;()))</argsstring>
        <name>get_ptr</name>
        <briefdescription>
<para>get a pointer value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>get a pointer value (implicit) Implicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the pointee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref>, or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>. Enforced by a static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
Constant.</para><para>{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get_ptr}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19983" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19983" bodyend="19987"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad8c8d2d107c6952960ba8aa78e009284" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueTypeCV</type>
          </param>
          <param>
            <type>typename ValueType</type>
            <defval><ref refid="dc/df0/namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7" kindref="member">detail::uncvref_t</ref>&lt;ValueTypeCV&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get</definition>
        <argsstring>() const noexcept(noexcept(std::declval&lt; const basic_json_t &amp;&gt;().template get_impl&lt; ValueType &gt;(detail::priority_tag&lt; 4 &gt; {}))) -&gt; decltype(std::declval&lt; const basic_json_t &amp;&gt;().template get_impl&lt; ValueType &gt;(detail::priority_tag&lt; 4 &gt;</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a (pointer) value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Performs explicit type conversion between the JSON value and a compatible value if required.</para><para><itemizedlist>
<listitem><para>If the requested type is a pointer to the internally stored JSON value that pointer is returned. No copies are made.</para></listitem><listitem><para>If the requested type is the current <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, or a different <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> convertible from the current <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>.</para></listitem><listitem><para>Otherwise the value is converted by calling the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method.</para></listitem></itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueTypeCV</parametername>
</parameternamelist>
<parameterdescription>
<para>the provided value type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned value type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to </para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>if necessary</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method throws if conversion is required</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20171" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20171" bodyend="20173"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aa17b6729b79846fe460b6905eb8ece5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>return</type>
        <definition>return nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(detail::priority_tag&lt; 4 &gt; {})</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">detail::priority_tag</ref>&lt; 4 &gt; {}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a46bb02ef17ee178984313efbc2c8eb8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PointerType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; PointerType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get</definition>
        <argsstring>() noexcept -&gt; decltype(std::declval&lt; basic_json_t &amp;&gt;().template get_ptr&lt; PointerType &gt;())</argsstring>
        <name>get</name>
        <briefdescription>
<para>get a pointer value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Explicit pointer access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>The pointer becomes invalid if the underlying JSON object changes.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PointerType</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer type; must be a pointer to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref>, or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the internally stored JSON value if the requested pointer type <emphasis>PointerType</emphasis> fits to the JSON value; <computeroutput>nullptr</computeroutput> otherwise</para></simplesect>
Constant.</para><para>{The example below shows how pointers to internal values of a JSON value can be requested. Note that no type conversions are made and a <computeroutput>nullptr</computeroutput> is returned if the value and the requested pointer type does not match.,get__PointerType}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac3698ce827dcd4f0c81455461709938d" kindref="member">get_ptr()</ref> for explicit pointer-member access</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20212" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20212" bodyend="20216"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a95c3851acd53eccd620b0d82855c3da1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; !<ref refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;<ref refid="dc/dac/structnlohmann_1_1detail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</definition>
        <argsstring>(ValueType &amp;v) const noexcept(noexcept(JSONSerializer&lt; ValueType &gt;::from_json(std::declval&lt; const basic_json_t &amp;&gt;(), v)))</argsstring>
        <name>get_to</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>get a value (explicit) </para>        </briefdescription>
        <detaileddescription>
<para>Explicit type conversion between the JSON value and a compatible value. The value is filled into the input parameter by calling the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method.</para><para>The function is equivalent to executing <programlisting><codeline><highlight class="normal">ValueType<sp/>v;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1f0395aad0fe853a4539288749d3a603" kindref="member">JSONSerializer&lt;ValueType&gt;::from_json</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>v);</highlight></codeline>
</programlisting></para><para>This overloads is chosen if:<itemizedlist>
<listitem><para><emphasis>ValueType</emphasis> is not <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>,</para></listitem><listitem><para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> has a <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method of the form <computeroutput>void from_json(const basic_json&amp;, ValueType&amp;)</computeroutput>, and</para></listitem></itemizedlist>
</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>the input parameter type.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the input parameter, allowing chaining calls.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>what</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" kindref="member">json_serializer&lt;ValueType&gt;</ref> <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> method throws</para></parameterdescription>
</parameteritem>
</parameterlist>
{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,get_to}</para><para><simplesect kind="since"><para>version 3.3.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20256" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20256" bodyend="20261"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" compoundref="d5/db8/json_8hpp" startline="4231" endline="4246">nlohmann::detail::from_json</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac6fd6c12364425e4007ee4d7ecf9fefd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</definition>
        <argsstring>(ValueType &amp;v) const</argsstring>
        <name>get_to</name>
        <param>
          <type>ValueType &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20269" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20269" bodyend="20273"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8e29710c587ab852ba851b623d4efa00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename Array</type>
            <defval>T (&amp;)[N]</defval>
          </param>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="dc/dac/structnlohmann_1_1detail_1_1has__from__json" kindref="compound">detail::has_from_json</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, Array &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Array</type>
        <definition>Array nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</definition>
        <argsstring>(T(&amp;v)[N]) const noexcept(noexcept(JSONSerializer&lt; Array &gt;::from_json(std::declval&lt; const basic_json_t &amp;&gt;(), v)))</argsstring>
        <name>get_to</name>
        <param>
          <type>T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20280" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20280" bodyend="20286"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" compoundref="d5/db8/json_8hpp" startline="4231" endline="4246">nlohmann::detail::from_json</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref</definition>
        <argsstring>()</argsstring>
        <name>get_ref</name>
        <briefdescription>
<para>get a reference value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicit reference access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the referee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReferenceType</parametername>
</parameternamelist>
<parameterdescription>
<para>reference type; must be a reference to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>. Enforced by static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the internally stored JSON value if the requested reference type <emphasis>ReferenceType</emphasis> fits to the JSON value; throws type_error.303 otherwise</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ReferenceType</emphasis> is incompatible with the stored JSON value; see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example shows several calls to <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" kindref="member">get_ref()</ref></computeroutput>.,get_ref}</para><para><simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20316" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20316" bodyend="20320"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a4567cf75f19b1efca090f75d7a8a350a" compoundref="d5/db8/json_8hpp" startline="22518" endline="22530">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a7f0889072c54f1b899689ed6246238e7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_reference&lt; ReferenceType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;std::is_const&lt; typename std::remove_reference&lt; ReferenceType &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref> &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>ReferenceType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref</definition>
        <argsstring>() const</argsstring>
        <name>get_ref</name>
        <briefdescription>
<para>get a reference value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>get a reference value (implicit) Implicit reference access to the internally stored JSON value. No copies are made.</para><para><simplesect kind="warning"><para>Writing data to the referee of the result yields an undefined state.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ReferenceType</parametername>
</parameternamelist>
<parameterdescription>
<para>reference type; must be a reference to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>, or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>. Enforced by static assertion.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the internally stored JSON value if the requested reference type <emphasis>ReferenceType</emphasis> fits to the JSON value; throws type_error.303 otherwise</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ReferenceType</emphasis> is incompatible with the stored JSON value; see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example shows several calls to <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" kindref="member">get_ref()</ref></computeroutput>.,get_ref}</para><para><simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20329" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20329" bodyend="20333"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ada1463d8d7ba77865f28f5e83dec7f33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; !std::is_pointer&lt; ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; ValueType, <ref refid="da/d10/classnlohmann_1_1detail_1_1json__ref" kindref="compound">detail::json_ref</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;&gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; ValueType, typename string_t::value_type &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;!<ref refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" kindref="compound">detail::is_basic_json</ref>&lt; ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; ValueType, std::initializer_list&lt; typename string_t::value_type &gt;&gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;<ref refid="dc/df0/namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44" kindref="member">detail::is_detected</ref>&lt; <ref refid="dc/df0/namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e" kindref="member">detail::get_template_function</ref>, const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref> &amp;, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1aefed8cf27cadeea45f12c6f3db3ce774" kindref="member">JSON_EXPLICIT</ref></type>
        <definition>JSON_EXPLICIT nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator ValueType</definition>
        <argsstring>() const</argsstring>
        <name>operator ValueType</name>
        <briefdescription>
<para>get a value (implicit) </para>        </briefdescription>
        <detaileddescription>
<para>Implicit type conversion between the JSON value and a compatible value. The call is realized by calling <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad8c8d2d107c6952960ba8aa78e009284" kindref="member">get() const</ref>.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>non-pointer type compatible to the JSON value, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. The character type of <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to <computeroutput>std::string</computeroutput>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the JSON value, converted to type <emphasis>ValueType</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>in case passed type <emphasis>ValueType</emphasis> is incompatible to the JSON value type (e.g., the JSON value is of type boolean, but a string is requested); see example below</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the JSON value.</para><para>{The example below shows several conversions from JSON values to other types. There a few things to note: (1) Floating-point numbers can be converted to integers\, (2) A JSON array can be converted to a standard <computeroutput>std::vector&lt;short&gt;</computeroutput>\, (3) A JSON object can be converted to C++ associative containers such as <computeroutput>std::unordered_map&lt;std::string\, json&gt;</computeroutput>.,operator__ValueType}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20375" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20375" bodyend="20379"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aab19a246f6bcd27c195bed376cf5e138" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> &amp;</type>
        <definition>binary_t&amp; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_binary</definition>
        <argsstring>()</argsstring>
        <name>get_binary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the binary value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>if the value is not binary</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80" kindref="member">is_binary()</ref> to check if the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" kindref="member">binary</ref></para></simplesect>
<simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20390" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20390" bodyend="20398"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1abbfa5532931abd2d9040cbf4d18a2ca7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> &amp;</type>
        <definition>const binary_t&amp; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_binary</definition>
        <argsstring>() const</argsstring>
        <name>get_binary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the binary value</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>if the value is not binary</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80" kindref="member">is_binary()</ref> to check if the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> is <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" kindref="member">binary</ref></para></simplesect>
<simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20401" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20401" bodyend="20409"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>element access</header>
      <description><para>Access to the JSON value. </para></description>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at specified location <emphasis>idx</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array; in this case, calling <computeroutput>at</computeroutput> with an index makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index <emphasis>idx</emphasis> is out of range of the array; that is, <computeroutput>idx &gt;= <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>version 1.0.0</para></simplesect>
{The example below shows how array elements can be read and written using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at()</ref></computeroutput>. It also demonstrates the different exceptions that can be thrown.,at__size_type} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20448" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20448" bodyend="20467"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range_1a238f1bda3b6c92b5970fbf9187ccd325" compoundref="d5/db8/json_8hpp" startline="2964" endline="2968">nlohmann::detail::out_of_range::create</references>
        <references refid="d5/db8/json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a" compoundref="d5/db8/json_8hpp" startline="2265">JSON_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aeb18fe2b8a5dbff4ccf2848de854c3ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>at</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at specified location <emphasis>idx</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array; in this case, calling <computeroutput>at</computeroutput> with an index makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index <emphasis>idx</emphasis> is out of range of the array; that is, <computeroutput>idx &gt;= <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>version 1.0.0</para></simplesect>
{The example below shows how array elements can be read using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at()</ref></computeroutput>. It also demonstrates the different exceptions that can be thrown., at__size_type_const} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20495" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20495" bodyend="20514"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range_1a238f1bda3b6c92b5970fbf9187ccd325" compoundref="d5/db8/json_8hpp" startline="2964" endline="2968">nlohmann::detail::out_of_range::create</references>
        <references refid="d5/db8/json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a" compoundref="d5/db8/json_8hpp" startline="2265">JSON_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>at</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in this case, calling <computeroutput>at</computeroutput> with a key makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if the key <emphasis>key</emphasis> is is not stored in the object; that is, <computeroutput>find(key) == <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Logarithmic in the size of the container.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> with a default <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
{The example below shows how object elements can be read and written using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at()</ref></computeroutput>. It also demonstrates the different exceptions that can be thrown.,at__object_t_key_type} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20546" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20546" bodyend="20565"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range_1a238f1bda3b6c92b5970fbf9187ccd325" compoundref="d5/db8/json_8hpp" startline="2964" endline="2968">nlohmann::detail::out_of_range::create</references>
        <references refid="d5/db8/json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a" compoundref="d5/db8/json_8hpp" startline="2265">JSON_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a229964ee10c92ba89ae4fba786fe6b50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>at</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element with bounds checking </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.304</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in this case, calling <computeroutput>at</computeroutput> with a key makes no sense. See example below. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if the key <emphasis>key</emphasis> is is not stored in the object; that is, <computeroutput>find(key) == <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Logarithmic in the size of the container.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> with a default <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0</para></simplesect>
{The example below shows how object elements can be read using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at()</ref></computeroutput>. It also demonstrates the different exceptions that can be thrown., at__object_t_key_type_const} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20597" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20597" bodyend="20616"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range_1a238f1bda3b6c92b5970fbf9187ccd325" compoundref="d5/db8/json_8hpp" startline="2964" endline="2968">nlohmann::detail::out_of_range::create</references>
        <references refid="d5/db8/json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a" compoundref="d5/db8/json_8hpp" startline="2265">JSON_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(size_type idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at specified location <emphasis>idx</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>idx</emphasis> is beyond the range of the array (i.e., <computeroutput>idx &gt;= <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>), then the array is silently filled up with <computeroutput>null</computeroutput> values to make <computeroutput>idx</computeroutput> a valid reference to the last stored element.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array or null; in that cases, using the [] operator with an index makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant if <emphasis>idx</emphasis> is in the range of the array. Otherwise linear in <computeroutput>idx - <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>.</para><para>{The example below shows how array elements can be read and written using <computeroutput>[]</computeroutput> operator. Note the addition of <computeroutput>null</computeroutput> values.,operatorarray__size_type}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20643" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20643" bodyend="20675"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad21d96f490fa1aa8605fba8dadcce319" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(size_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>access specified array element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at specified location <emphasis>idx</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at index <emphasis>idx</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an array; in that case, using the [] operator with an index makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how array elements can be read using the <computeroutput>[]</computeroutput> operator.,operatorarray__size_type_const}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20696" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20696" bodyend="20705"/>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" compoundref="d5/db8/json_8hpp" startline="17997">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> with range checking </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> with a default <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20734" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20734" bodyend="20751"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1acb5b489310f4e0ce2d5fb29b73fb59d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const typename object_t::key_type &amp;key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>read-only access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para><para><simplesect kind="warning"><para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<simplesect kind="pre"><para>The element with key <emphasis>key</emphasis> must exist. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that case, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type_const}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> with range checking </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> with a default <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20783" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20783" bodyend="20793"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1abc94831476f7b4d3efe6f2e9036c7188" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(T *key)</argsstring>
        <name>operator[]</name>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified key <emphasis>key</emphasis>.</para><para><simplesect kind="note"><para>If <emphasis>key</emphasis> is not found in the object, then it is silently added to the object and filled with a <computeroutput>null</computeroutput> value to make <computeroutput>key</computeroutput> a valid reference. In case the value was <computeroutput>null</computeroutput> before, it is converted to an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be read and written using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> with range checking </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> with a default <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20824" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20824" bodyend="20841"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a11bbe874496eb7b29a5549e0637de59e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(T *key) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>T *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>read-only access specified object element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified key <emphasis>key</emphasis>. No bounds checking is performed.</para><para><simplesect kind="warning"><para>If the element with key <emphasis>key</emphasis> does not exist, the behavior is undefined.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element at key <emphasis>key</emphasis> </para></simplesect>
<simplesect kind="pre"><para>The element with key <emphasis>key</emphasis> must exist. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.305</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that case, using the [] operator with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be read using the <computeroutput>[]</computeroutput> operator.,operatorarray__key_type_const}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> with range checking </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> with a default <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref></para></simplesect>
<simplesect kind="since"><para>version 1.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20875" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20875" bodyend="20885"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="de/dbc/structnlohmann_1_1detail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> &amp;&amp;!std::is_same&lt; <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref>, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element with default value </para>        </briefdescription>
        <detaileddescription>
<para>Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref>(key);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<simplesect kind="note"><para>Unlike <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" kindref="member">operator[](const typename object_t::key_type&amp; key)</ref>, this function does not implicitly add an element to the position defined by <emphasis>key</emphasis>. This function is furthermore also applicable to const objects.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>key</emphasis> is not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>default_value</emphasis> does not match the type of the value at <emphasis>key</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that case, using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref></computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be queried with a default value.,basic_json__value}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> with range checking </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20941" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20941" bodyend="20957"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adcfdefe95d5c2471a5c97e911d46ee88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const typename object_t::key_type &amp;key, const char *default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>overload for a default value of type const char* </para>        </briefdescription>
        <detaileddescription>
<para>access specified object element with default value Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref>(key);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<simplesect kind="note"><para>Unlike <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" kindref="member">operator[](const typename object_t::key_type&amp; key)</ref>, this function does not implicitly add an element to the position defined by <emphasis>key</emphasis>. This function is furthermore also applicable to const objects.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key of the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>key</emphasis> is not found</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>default_value</emphasis> does not match the type of the value at <emphasis>key</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that case, using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref></computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be queried with a default value.,basic_json__value}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" kindref="member">at(const typename object_t::key_type&amp;)</ref> for access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref> with range checking </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" kindref="member">operator[](const typename object_t::key_type&amp;)</ref> for unchecked access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="20963" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="20963" bodyend="20966"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a36bd6765ccd8aeeeb4e49a766ba639df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ValueType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="de/dbc/structnlohmann_1_1detail_1_1is__getable" kindref="compound">detail::is_getable</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" kindref="member">basic_json_t</ref>, ValueType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>ValueType</type>
        <definition>ValueType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, const ValueType &amp;default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const ValueType &amp;</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>access specified object element via JSON Pointer with default value </para>        </briefdescription>
        <detaileddescription>
<para>Returns either a copy of an object&apos;s element at the specified key <emphasis>key</emphasis> or a given default value if no element with key <emphasis>key</emphasis> exists.</para><para>The function is basically equivalent to executing <programlisting><codeline><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref>(ptr);</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" kindref="member">out_of_range</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>Unlike <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa014a978f8b6c085db8825faa8dad320" kindref="member">at(const json_pointer&amp;)</ref>, this function does not throw if the given key <emphasis>key</emphasis> was not found.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON pointer to the element to access </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to return if <emphasis>ptr</emphasis> found no value</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>type compatible to JSON values, for instance <computeroutput>int</computeroutput> for JSON integer numbers, <computeroutput>bool</computeroutput> for JSON booleans, or <computeroutput>std::vector</computeroutput> types for JSON arrays. Note the type of the expected value at <emphasis>key</emphasis> and the default value <emphasis>default_value</emphasis> must be compatible.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>copy of the element at key <emphasis>key</emphasis> or <emphasis>default_value</emphasis> if <emphasis>key</emphasis> is not found</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.302</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>default_value</emphasis> does not match the type of the value at <emphasis>ptr</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.306</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON value is not an object; in that case, using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value()</ref></computeroutput> with a key makes no sense.</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container.</para><para>{The example below shows how object elements can be queried with a default value.,basic_json__value_ptr}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0d3deaa73b3644b4da3f8ef3172cd8d2" kindref="member">operator[](const json_pointer&amp;)</ref> for unchecked access by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></para></simplesect>
<simplesect kind="since"><para>version 2.0.2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21013" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21013" bodyend="21030"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a366d68a67e40d86676d3bdb52e167294" compoundref="d5/db8/json_8hpp" startline="12616" endline="12650">nlohmann::json_pointer&lt; BasicJsonType &gt;::get_checked</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
        <references refid="d5/db8/json_8hpp_1a5478b7564e65634cc69432ed3cb6490e" compoundref="d5/db8/json_8hpp" startline="2266">JSON_INTERNAL_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4658a584571c4180656f5268969ed0a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref></type>
        <definition>string_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value</definition>
        <argsstring>(const json_pointer &amp;ptr, const char *default_value) const</argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>overload for a default value of type const char* </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21037" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21037" bodyend="21040"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::front</definition>
        <argsstring>()</argsstring>
        <name>front</name>
        <briefdescription>
<para>access the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.front()</computeroutput> is equivalent to <computeroutput>*c.<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput>.</para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para></simplesect>
Constant.</para><para><simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on <computeroutput>null</computeroutput> value</para></parameterdescription>
</parameteritem>
</parameterlist>
{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed" kindref="member">front()</ref></computeroutput>.,front}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa" kindref="member">back()</ref> <ndash/> access the last element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21067" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21067" bodyend="21070"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5ac8f974c178cf9326b6765e22f50eb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::front</definition>
        <argsstring>() const</argsstring>
        <name>front</name>
        <briefdescription>
<para>access the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the first element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.front()</computeroutput> is equivalent to <computeroutput>*c.<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput>.</para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the first element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para></simplesect>
Constant.</para><para><simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on <computeroutput>null</computeroutput> value</para></parameterdescription>
</parameteritem>
</parameterlist>
{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed" kindref="member">front()</ref></computeroutput>.,front}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa" kindref="member">back()</ref> <ndash/> access the last element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21075" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21075" bodyend="21078"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::back</definition>
        <argsstring>()</argsstring>
        <name>back</name>
        <briefdescription>
<para>access the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.back()</computeroutput> is equivalent to <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>c.end();</highlight></codeline>
<codeline><highlight class="normal">--tmp;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para></simplesect>
Constant.</para><para><simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a <computeroutput>null</computeroutput> value. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa" kindref="member">back()</ref></computeroutput>.,back}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed" kindref="member">front()</ref> <ndash/> access the first element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21111" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21111" bodyend="21116"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aac965b84ea43ccd8aef9caefef02794a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::back</definition>
        <argsstring>() const</argsstring>
        <name>back</name>
        <briefdescription>
<para>access the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the last element in the container. For a JSON container <computeroutput>c</computeroutput>, the expression <computeroutput>c.back()</computeroutput> is equivalent to <programlisting><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>c.end();</highlight></codeline>
<codeline><highlight class="normal">--tmp;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>In case of a structured type (array or object), a reference to the last element is returned. In case of number, string, boolean, or binary values, a reference to the value is returned.</para></simplesect>
Constant.</para><para><simplesect kind="pre"><para>The JSON value must not be <computeroutput>null</computeroutput> (would throw <computeroutput>std::out_of_range</computeroutput>) or an empty array or object (undefined behavior, <bold>guarded by assertions</bold>). </para></simplesect>
<simplesect kind="post"><para>The JSON value remains unchanged.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>invalid_iterator.214</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a <computeroutput>null</computeroutput> value. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa" kindref="member">back()</ref></computeroutput>.,back}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed" kindref="member">front()</ref> <ndash/> access the first element</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21121" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21121" bodyend="21126"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(IteratorType pos)</argsstring>
        <name>erase</name>
        <param>
          <type>IteratorType</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>remove element given an iterator </para>        </briefdescription>
        <detaileddescription>
<para>Removes the element specified by iterator <emphasis>pos</emphasis>. The iterator <emphasis>pos</emphasis> must be valid and dereferenceable. Thus the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput> iterator (which is valid, but is not dereferenceable) cannot be used as a value for <emphasis>pos</emphasis>.</para><para>If called on a primitive type other than <computeroutput>null</computeroutput>, the resulting JSON value will be <computeroutput>null</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the element to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator following the last removed element. If the iterator <emphasis>pos</emphasis> refers to the last element, the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput> iterator is returned.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IteratorType</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>Invalidates iterators and references at or after the point of the erase, including the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput> iterator.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a <computeroutput>null</computeroutput> value; example: <computeroutput>&quot;cannot use
erase() with null&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on an iterator which does not belong to the current JSON value; example: <computeroutput>&quot;iterator does not fit current
value&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.205</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a primitive type with invalid iterator (i.e., any iterator which is not <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput>); example: <computeroutput>&quot;iterator
out of range&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
The complexity depends on the type:<itemizedlist>
<listitem><para>objects: amortized constant</para></listitem><listitem><para>arrays: linear in distance between <emphasis>pos</emphasis> and the end of the container</para></listitem><listitem><para>strings and binary: linear in the length of the member</para></listitem><listitem><para>other types: constant</para></listitem></itemizedlist>
</para><para>{The example shows the result of <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase()</ref></computeroutput> for different JSON types.,erase__IteratorType}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42" kindref="member">erase(IteratorType, IteratorType)</ref> <ndash/> removes the elements in the given range </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea" kindref="member">erase(const typename object_t::key_type&amp;)</ref> <ndash/> removes the element from an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> the given key </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26" kindref="member">erase(const size_type)</ref> <ndash/> removes the element from an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> the given index</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21178" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21178" bodyend="21239"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; IteratorType, typename basic_json_t::iterator &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>||std::is_same&lt; IteratorType, typename basic_json_t::const_iterator &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>IteratorType</type>
        <definition>IteratorType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>erase</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>remove elements given an iterator range </para>        </briefdescription>
        <detaileddescription>
<para>Removes the element specified by the range <computeroutput>[first; last)</computeroutput>. The iterator <emphasis>first</emphasis> does not need to be dereferenceable if <computeroutput>first == last</computeroutput>: erasing an empty range is a no-op.</para><para>If called on a primitive type other than <computeroutput>null</computeroutput>, the resulting JSON value will be <computeroutput>null</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to the beginning of the range to remove </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator past the end of the range to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator following the last removed element. If the iterator <emphasis>second</emphasis> refers to the last element, the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput> iterator is returned.</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IteratorType</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> or <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>Invalidates iterators and references at or after the point of the erase, including the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput> iterator.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a <computeroutput>null</computeroutput> value; example: <computeroutput>&quot;cannot use
erase() with null&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.203</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on iterators which does not belong to the current JSON value; example: <computeroutput>&quot;iterators do not fit current value&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.204</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on a primitive type with invalid iterators (i.e., if <computeroutput>first != <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput> and <computeroutput>last != <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>); example: <computeroutput>&quot;iterators out of range&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
The complexity depends on the type:<itemizedlist>
<listitem><para>objects: <computeroutput>log(size()) + std::distance(first, last)</computeroutput></para></listitem><listitem><para>arrays: linear in the distance between <emphasis>first</emphasis> and <emphasis>last</emphasis>, plus linear in the distance between <emphasis>last</emphasis> and end of the container</para></listitem><listitem><para>strings and binary: linear in the length of the member</para></listitem><listitem><para>other types: constant</para></listitem></itemizedlist>
</para><para>{The example shows the result of <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase()</ref></computeroutput> for different JSON types.,erase__IteratorType_IteratorType}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase(IteratorType)</ref> <ndash/> removes the element <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> a given position </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea" kindref="member">erase(const typename object_t::key_type&amp;)</ref> <ndash/> removes the element from an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> the given key </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26" kindref="member">erase(const size_type)</ref> <ndash/> removes the element from an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> the given index</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21291" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21291" bodyend="21355"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(const typename object_t::key_type &amp;key)</argsstring>
        <name>erase</name>
        <param>
          <type>const typename object_t::key_type &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON object given a key </para>        </briefdescription>
        <detaileddescription>
<para>Removes elements from a JSON object with the key value <emphasis>key</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the elements to remove</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of elements removed. If <emphasis>ObjectType</emphasis> is the default <computeroutput>std::map</computeroutput> type, the return value will always be <computeroutput>0</computeroutput> (<emphasis>key</emphasis> was not found) or <computeroutput>1</computeroutput> (<emphasis>key</emphasis> was found).</para></simplesect>
<simplesect kind="post"><para>References and iterators to the erased elements are invalidated. Other references and iterators are not affected.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object; example: <computeroutput>&quot;cannot use erase() with null&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<computeroutput>log(size()) + count(key)</computeroutput></para><para>{The example shows the effect of <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase()</ref></computeroutput>.,erase__key_type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase(IteratorType)</ref> <ndash/> removes the element <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> a given position </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42" kindref="member">erase(IteratorType, IteratorType)</ref> <ndash/> removes the elements in the given range </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26" kindref="member">erase(const size_type)</ref> <ndash/> removes the element from an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" kindref="member">array</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> the given index</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21386" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21386" bodyend="21395"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</definition>
        <argsstring>(const size_type idx)</argsstring>
        <name>erase</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>remove element from a JSON array given an index </para>        </briefdescription>
        <detaileddescription>
<para>Removes element from a JSON array at the index <emphasis>idx</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the element to remove</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.307</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object; example: <computeroutput>&quot;cannot use erase() with null&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>when <computeroutput>idx &gt;= <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>; example: <computeroutput>&quot;array index 17
is out of range&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in distance between <emphasis>idx</emphasis> and the end of the container.</para><para>{The example shows the effect of <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase()</ref></computeroutput>.,erase__size_type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" kindref="member">erase(IteratorType)</ref> <ndash/> removes the element <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> a given position </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42" kindref="member">erase(IteratorType, IteratorType)</ref> <ndash/> removes the elements in the given range </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea" kindref="member">erase(const typename object_t::key_type&amp;)</ref> <ndash/> removes the element from an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" kindref="member">at</ref> the given key</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21421" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21421" bodyend="21437"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range_1a238f1bda3b6c92b5970fbf9187ccd325" compoundref="d5/db8/json_8hpp" startline="2964" endline="2968">nlohmann::detail::out_of_range::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>lookup</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</definition>
        <argsstring>(KeyT &amp;&amp;key)</argsstring>
        <name>find</name>
        <param>
          <type>KeyT &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>Finds an element in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> is returned.</para><para><simplesect kind="note"><para>This method always returns <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value of the element to search for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator to an element with key equivalent to <emphasis>key</emphasis>. If no such element is found or the JSON value is not an object, past-the-end (see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref>) iterator is returned.</para></simplesect>
Logarithmic in the size of the JSON object.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" kindref="member">find()</ref></computeroutput> is used.,find__key_type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" kindref="member">contains(KeyT&amp;&amp;) const</ref> <ndash/> checks whether a key exists</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21474" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21474" bodyend="21484"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d">nlohmann::detail::key</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a17a516671c29a69bb2e11ca12030316b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</definition>
        <argsstring>(KeyT &amp;&amp;key) const</argsstring>
        <name>find</name>
        <param>
          <type>KeyT &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>find an element in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>find an element in a JSON object Finds an element in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> is returned.</para><para><simplesect kind="note"><para>This method always returns <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value of the element to search for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Iterator to an element with key equivalent to <emphasis>key</emphasis>. If no such element is found or the JSON value is not an object, past-the-end (see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref>) iterator is returned.</para></simplesect>
Logarithmic in the size of the JSON object.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" kindref="member">find()</ref></computeroutput> is used.,find__key_type}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" kindref="member">contains(KeyT&amp;&amp;) const</ref> <ndash/> checks whether a key exists</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21491" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21491" bodyend="21501"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d">nlohmann::detail::key</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aba5ec6d1e37eda6b11eba491a1e5237e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::count</definition>
        <argsstring>(KeyT &amp;&amp;key) const</argsstring>
        <name>count</name>
        <param>
          <type>KeyT &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>returns the number of occurrences of a key in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements with key <emphasis>key</emphasis>. If ObjectType is the default <computeroutput>std::map</computeroutput> type, the return value will always be <computeroutput>0</computeroutput> (<emphasis>key</emphasis> was not found) or <computeroutput>1</computeroutput> (<emphasis>key</emphasis> was found).</para><para><simplesect kind="note"><para>This method always returns <computeroutput>0</computeroutput> when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value of the element to count</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of elements with key <emphasis>key</emphasis>. If the JSON value is not an object, the return value will be <computeroutput>0</computeroutput>.</para></simplesect>
Logarithmic in the size of the JSON object.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aba5ec6d1e37eda6b11eba491a1e5237e" kindref="member">count()</ref></computeroutput> is used.,count}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21525" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21525" bodyend="21529"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d">nlohmann::detail::key</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename KeyT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; !std::is_same&lt; typename std::decay&lt; KeyT &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains</definition>
        <argsstring>(KeyT &amp;&amp;key) const</argsstring>
        <name>contains</name>
        <param>
          <type>KeyT &amp;&amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object </para>        </briefdescription>
        <detaileddescription>
<para>Check whether an element exists in a JSON object with key equivalent to <emphasis>key</emphasis>. If the element is not found or the JSON value is not an object, false is returned.</para><para><simplesect kind="note"><para>This method always returns false when executed on a JSON type that is not an object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>key value to check its existence.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if an element with specified <emphasis>key</emphasis> exists. If no such element with such key is found or the JSON value is not an object, false is returned.</para></simplesect>
Logarithmic in the size of the JSON object.</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" kindref="member">contains()</ref></computeroutput>.,contains}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" kindref="member">find(KeyT&amp;&amp;)</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> element </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adb82c1f34c73486e013da71ae369e597" kindref="member">contains(const json_pointer&amp;) const</ref> <ndash/> checks the existence for a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa" kindref="member">pointer</ref></para></simplesect>
<simplesect kind="since"><para>version 3.6.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21558" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21558" bodyend="21561"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d">nlohmann::detail::key</references>
        <referencedby refid="df/de1/namespacecudnn__frontend_1a91f2627793be5d51db9b1473275d803d" compoundref="db/d7e/cudnn__frontend__Errata_8h" startline="52" endline="83">cudnn_frontend::check_rule</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adb82c1f34c73486e013da71ae369e597" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::contains</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>check the existence of an element in a JSON object given a JSON pointer </para>        </briefdescription>
        <detaileddescription>
<para>Check whether the given JSON pointer <emphasis>ptr</emphasis> can be resolved in the current JSON value.</para><para><simplesect kind="note"><para>This method can be executed on any JSON value type.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to check its existence.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the JSON pointer can be resolved to a stored value, false otherwise.</para></simplesect>
<simplesect kind="post"><para>If <computeroutput>j.contains(ptr)</computeroutput> returns true, it is safe to call <computeroutput>j[ptr]</computeroutput>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number</para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the JSON object.</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" kindref="member">contains()</ref></computeroutput>.,contains_json_pointer}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" kindref="member">contains(KeyT &amp;&amp;) const</ref> <ndash/> checks the existence of a key</para></simplesect>
<simplesect kind="since"><para>version 3.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21589" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21589" bodyend="21592"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a90d38e45e2d3add52d824bc55da8f772" compoundref="d5/db8/json_8hpp" startline="12745" endline="12814">nlohmann::json_pointer&lt; BasicJsonType &gt;::contains</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>iterators</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a22e2e5b0e68d9d7c63be2cada5187259" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae2ce7eec3ae7e7b903e0344e89f0512b" kindref="member">iteration_proxy</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> &gt;</type>
        <definition>static iteration_proxy&lt;iterator&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator_wrapper</definition>
        <argsstring>(reference ref) noexcept</argsstring>
        <name>iterator_wrapper</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>wrapper to access iterator member functions in range-based for </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to access <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc" kindref="member">iterator::key()</ref> and <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c" kindref="member">iterator::value()</ref> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para><para>For loop without iterator_wrapper:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>j_object.begin();<sp/>it<sp/>!=<sp/>j_object.end();<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop without iterator proxy:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/>j_object)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;it&quot;<sp/>is<sp/>of<sp/>type<sp/>json::reference<sp/>and<sp/>has<sp/>no<sp/>key()<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop with iterator proxy:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a22e2e5b0e68d9d7c63be2cada5187259" kindref="member">json::iterator_wrapper</ref>(j_object))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ref</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a JSON value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para></simplesect>
{The following code shows how the wrapper is used,iterator_wrapper}</para><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="note"><para>The name of this function is not yet final and may change in the future.</para></simplesect>
<xrefsect id="da/d58/deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated and will be removed in future 4.0.0 of the library. Please use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21936" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21936" bodyend="21939"/>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3710ff8c5a1cbedb4f75b700a8962d5c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae2ce7eec3ae7e7b903e0344e89f0512b" kindref="member">iteration_proxy</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref> &gt;</type>
        <definition>static iteration_proxy&lt;const_iterator&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iterator_wrapper</definition>
        <argsstring>(const_reference ref) noexcept</argsstring>
        <name>iterator_wrapper</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
<para>wrapper to access iterator member functions in range-based for </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to access <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc" kindref="member">iterator::key()</ref> and <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c" kindref="member">iterator::value()</ref> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para><para>For loop without iterator_wrapper:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>j_object.begin();<sp/>it<sp/>!=<sp/>j_object.end();<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop without iterator proxy:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/>j_object)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;it&quot;<sp/>is<sp/>of<sp/>type<sp/>json::reference<sp/>and<sp/>has<sp/>no<sp/>key()<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop with iterator proxy:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a22e2e5b0e68d9d7c63be2cada5187259" kindref="member">json::iterator_wrapper</ref>(j_object))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example).</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ref</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a JSON value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para></simplesect>
{The following code shows how the wrapper is used,iterator_wrapper}</para><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="note"><para>The name of this function is not yet final and may change in the future.</para></simplesect>
<xrefsect id="da/d58/deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated and will be removed in future 4.0.0 of the library. Please use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref> instead; that is, replace <computeroutput>json::iterator_wrapper(j)</computeroutput> with <computeroutput>j.items()</computeroutput>. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21945" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21945" bodyend="21948"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>returns an iterator to the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the first element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>iterator to the first element</para></simplesect>
Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput>.,begin}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" kindref="member">cbegin()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" kindref="member">cend()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21628" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21628" bodyend="21633"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb" compoundref="d5/db8/json_8hpp" startline="25816" endline="25840">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::merge_patch</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4f147be16fcde9f510c4aac89ab511c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>returns a const iterator to the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the first element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator to the first element</para></simplesect>
Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" kindref="member">cbegin()</ref></computeroutput>.,cbegin}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" kindref="member">cend()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21638" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21638" bodyend="21641"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>returns a const iterator to the first element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the first element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator to the first element</para></simplesect>
Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" kindref="member">cbegin()</ref></computeroutput>.,cbegin}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" kindref="member">cend()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21668" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21668" bodyend="21673"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" compoundref="d5/db8/json_8hpp" startline="22924" endline="22947">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>returns an iterator to one past the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to one past the last element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>iterator one past the last element</para></simplesect>
Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>.,end}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" kindref="member">cend()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" kindref="member">cbegin()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21699" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21699" bodyend="21704"/>
        <references refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee" compoundref="d5/db8/json_8hpp" startline="11524" endline="11548">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::set_end</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb" compoundref="d5/db8/json_8hpp" startline="25816" endline="25840">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::merge_patch</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a82b5b96f86879a3bac0c713d33178551" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>returns a const iterator to one past the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to one past the last element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator one past the last element</para></simplesect>
Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" kindref="member">cend()</ref></computeroutput>.,cend}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" kindref="member">cbegin()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21709" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21709" bodyend="21712"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
        <definition>const_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <briefdescription>
<para>returns a const iterator to one past the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to one past the last element.</para><para><image type="html" name="range-begin-end.svg">Illustration from cppreference.com</image>
 <simplesect kind="return"><para>const iterator one past the last element</para></simplesect>
Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" kindref="member">cend()</ref></computeroutput>.,cend}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> <ndash/> returns an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" kindref="member">cbegin()</ref> <ndash/> returns a const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21739" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21739" bodyend="21744"/>
        <references refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a23e50ad4c13aa62d9ac7f60a123823ee" compoundref="d5/db8/json_8hpp" startline="11524" endline="11548">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::set_end</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" compoundref="d5/db8/json_8hpp" startline="22924" endline="22947">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rbegin</definition>
        <argsstring>() noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>returns an iterator to the reverse-beginning </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the reverse-beginning; that is, the last element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
  Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>reverse_iterator(end())</computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref></computeroutput>.,rbegin}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" kindref="member">crbegin()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" kindref="member">crend()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21769" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21769" bodyend="21772"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aab1329f44c8301b7679962726a043549" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>returns a const reverse iterator to the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the reverse-beginning; that is, the last element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
  Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" kindref="member">crbegin()</ref></computeroutput>.,crbegin}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" kindref="member">crend()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21777" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21777" bodyend="21780"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6" kindref="member">reverse_iterator</ref></type>
        <definition>reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rend</definition>
        <argsstring>() noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>returns an iterator to the reverse-end </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the reverse-end; that is, one before the first element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
  Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>reverse_iterator(begin())</computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref></computeroutput>.,rend}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" kindref="member">crend()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" kindref="member">crbegin()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21806" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21806" bodyend="21809"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2e4cbf41d593d41847b90aea55e5e84d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::rend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>rend</name>
        <briefdescription>
<para>returns a const reverse iterator to one before the first </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
  Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" kindref="member">crend()</ref></computeroutput>.,crend}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" kindref="member">crbegin()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21814" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21814" bodyend="21817"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::crbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>returns a const reverse iterator to the last element </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const iterator to the reverse-beginning; that is, the last element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
  Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" kindref="member">crbegin()</ref></computeroutput>.,crbegin}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" kindref="member">crend()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21843" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21843" bodyend="21846"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::crend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crend</name>
        <briefdescription>
<para>returns a const reverse iterator to one before the first </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reverse iterator to the reverse-end; that is, one before the first element.</para><para><image type="html" name="range-rbegin-rend.svg">Illustration from cppreference.com</image>
  Constant.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>const_cast&lt;const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp;&gt;(*this).<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para>{The following code shows an example for <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" kindref="member">crend()</ref></computeroutput>.,crend}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" kindref="member">rend()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" kindref="member">rbegin()</ref> <ndash/> returns a reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" kindref="member">crbegin()</ref> <ndash/> returns a const reverse <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> to the beginning</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="21872" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="21872" bodyend="21875"/>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae2ce7eec3ae7e7b903e0344e89f0512b" kindref="member">iteration_proxy</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref> &gt;</type>
        <definition>iteration_proxy&lt;iterator&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::items</definition>
        <argsstring>() noexcept</argsstring>
        <name>items</name>
        <briefdescription>
<para>helper to access iterator member functions in range-based for </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to access <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc" kindref="member">iterator::key()</ref> and <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c" kindref="member">iterator::value()</ref> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para><para>For loop without <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>j_object.begin();<sp/>it<sp/>!=<sp/>j_object.end();<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop without <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/>j_object)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;it&quot;<sp/>is<sp/>of<sp/>type<sp/>json::reference<sp/>and<sp/>has<sp/>no<sp/>key()<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>el<sp/>:<sp/>j_object.items())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function also allows to use <ulink url="https://en.cppreference.com/w/cpp/language/structured_binding">structured bindings</ulink> (C++17):</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>val]<sp/>:<sp/>j_object.items())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">key</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example). For primitive types (e.g., numbers), <computeroutput>key()</computeroutput> returns an empty string.</para></simplesect>
<simplesect kind="warning"><para>Using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> on temporary objects is dangerous. Make sure the object&apos;s lifetime exeeds the iteration. See <ulink url="https://github.com/nlohmann/json/issues/2040">https://github.com/nlohmann/json/issues/2040</ulink> for more information.</para></simplesect>
<simplesect kind="return"><para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para></simplesect>
{The following code shows how the function is used.,items}</para><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>version 3.1.0, structured bindings support since 3.5.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22018" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22018" bodyend="22021"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4faaed730a81347f2f01e93f37c73823" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae2ce7eec3ae7e7b903e0344e89f0512b" kindref="member">iteration_proxy</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref> &gt;</type>
        <definition>iteration_proxy&lt;const_iterator&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::items</definition>
        <argsstring>() const noexcept</argsstring>
        <name>items</name>
        <briefdescription>
<para>helper to access iterator member functions in range-based for </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to access <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a15dfb2744fed2ef40c12a9e9a20d6dbc" kindref="member">iterator::key()</ref> and <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1ab447c50354c6611fa2ae0100ac17845c" kindref="member">iterator::value()</ref> during range-based for loops. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator.</para><para>For loop without <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>j_object.begin();<sp/>it<sp/>!=<sp/>j_object.end();<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop without <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>:<sp/>j_object)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;it&quot;<sp/>is<sp/>of<sp/>type<sp/>json::reference<sp/>and<sp/>has<sp/>no<sp/>key()<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>it<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Range-based for loop with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function:</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>el<sp/>:<sp/>j_object.items())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.key()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>el.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> function also allows to use <ulink url="https://en.cppreference.com/w/cpp/language/structured_binding">structured bindings</ulink> (C++17):</para><para><programlisting><codeline><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>val]<sp/>:<sp/>j_object.items())</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;key:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">key</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>value:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>When iterating over an array, <computeroutput>key()</computeroutput> will return the index of the element as string (see example). For primitive types (e.g., numbers), <computeroutput>key()</computeroutput> returns an empty string.</para></simplesect>
<simplesect kind="warning"><para>Using <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" kindref="member">items()</ref></computeroutput> on temporary objects is dangerous. Make sure the object&apos;s lifetime exeeds the iteration. See <ulink url="https://github.com/nlohmann/json/issues/2040">https://github.com/nlohmann/json/issues/2040</ulink> for more information.</para></simplesect>
<simplesect kind="return"><para>iteration proxy object wrapping <emphasis>ref</emphasis> with an interface to use in range-based for loops</para></simplesect>
{The following code shows how the function is used.,items}</para><para>Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>version 3.1.0, structured bindings support since 3.5.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22026" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22026" bodyend="22029"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>capacity</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>checks whether the container is empty. </para>        </briefdescription>
        <detaileddescription>
<para>Checks if a JSON value has no elements (i.e. whether its <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size</ref> is <computeroutput>0</computeroutput>).</para><para><simplesect kind="return"><para>The return value depends on the different types and is defined as follows: <table rows="8" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>result of function <computeroutput>object_t::empty()</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>result of function <computeroutput>array_t::empty()</computeroutput> </para></entry></row>
</table>
{The following code uses <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8" kindref="member">empty()</ref></computeroutput> to check if a JSON object contains any elements.,empty}</para></simplesect>
Constant, as long as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> satisfy the Container concept; that is, their <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8" kindref="member">empty()</ref></computeroutput> functions have constant complexity.</para><para>No changes.</para><para>No-throw guarantee: this function never throws exceptions.</para><para><simplesect kind="note"><para>This function does not return whether a string stored as JSON value is empty - it returns whether the JSON container itself is empty which is false in the case of a string.</para></simplesect>
This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref> == <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref></computeroutput>.</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref> <ndash/> returns the number of elements</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22083" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22083" bodyend="22111"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>returns the number of elements </para>        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in a JSON value.</para><para><simplesect kind="return"><para>The return value depends on the different types and is defined as follows: <table rows="8" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>result of function object_t::size() </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>result of function array_t::size() </para></entry></row>
</table>
{The following code calls <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput> on the different value types.,size}</para></simplesect>
Constant, as long as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> satisfy the Container concept; that is, their <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref> functions have constant complexity.</para><para>No changes.</para><para>No-throw guarantee: this function never throws exceptions.</para><para><simplesect kind="note"><para>This function does not return the length of a string stored as JSON value - it returns the number of elements in the JSON value which is 1 in the case of a string.</para></simplesect>
This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of <computeroutput>std::distance(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref>)</computeroutput>.</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8" kindref="member">empty()</ref> <ndash/> checks whether the container is <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8" kindref="member">empty</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" kindref="member">max_size()</ref> <ndash/> returns the maximal number of elements</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22156" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22156" bodyend="22184"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
        <definition>size_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::max_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>returns the maximum possible number of elements </para>        </briefdescription>
        <detaileddescription>
<para>Returns the maximum number of elements a JSON value is able to hold due to system or library implementation limitations, i.e. <computeroutput>std::distance(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" kindref="member">begin()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref>)</computeroutput> for the JSON value.</para><para><simplesect kind="return"><para>The return value depends on the different types and is defined as follows: <table rows="8" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> (same as <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><computeroutput>1</computeroutput> (same as <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>) </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>result of function <computeroutput>object_t::max_size()</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>result of function <computeroutput>array_t::max_size()</computeroutput> </para></entry></row>
</table>
{The following code calls <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" kindref="member">max_size()</ref></computeroutput> on the different value types. Note the output is implementation specific.,max_size}</para></simplesect>
Constant, as long as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> satisfy the Container concept; that is, their <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" kindref="member">max_size()</ref></computeroutput> functions have constant complexity.</para><para>No changes.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>This function helps <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> satisfying the <ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink> requirements:<itemizedlist>
<listitem><para>The complexity is constant.</para></listitem><listitem><para>Has the semantics of returning <computeroutput>b.size()</computeroutput> where <computeroutput>b</computeroutput> is the largest possible JSON value.</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref> <ndash/> returns the number of elements</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22227" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22227" bodyend="22249"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>modifiers</header>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend void</type>
        <definition>void swap</definition>
        <argsstring>(reference left, reference right) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
          <declname>left</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of the JSON value from <emphasis>left</emphasis> with those of <emphasis>right</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated. implemented as a friend function callable via ADL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">left</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to exchange the contents with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">right</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how JSON values can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__reference}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23059" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23059" bodyend="23067"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
<para>clears the contents </para>        </briefdescription>
        <detaileddescription>
<para>Clears the content of a JSON value and resets it to the default value as if <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json(value_t)</ref> would have been called with the current value type from <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type()</ref>:</para><para><table rows="8" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>initial value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>&quot;&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>0</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para>An empty byte vector </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><computeroutput>{}</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><computeroutput>[]</computeroutput> </para></entry></row>
</table>
<simplesect kind="post"><para>Has the same effect as calling <programlisting><codeline><highlight class="normal">*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json</ref>(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref>());</highlight></codeline>
</programlisting></para></simplesect>
{The example below shows the effect of <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53" kindref="member">clear()</ref></computeroutput> to different JSON types.,clear}</para><para>Linear in the size of the JSON value.</para><para>All iterators, pointers and references related to this container are invalidated.</para><para>No-throw guarantee: this function never throws exceptions.</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json(value_t)</ref> <ndash/> constructor that creates an <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" kindref="member">object</ref> with the same <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> than calling <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53" kindref="member">clear()</ref></computeroutput></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22298" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22298" bodyend="22353"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Amortized constant.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22375" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22375" bodyend="22395"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a40226d9c84fcb9cb948ae0c27b842c57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(basic_json &amp;&amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Amortized constant.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22401" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22401" bodyend="22405"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3405d38087e13994a5a4556065b0be6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Amortized constant.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22411" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22411" bodyend="22430"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1af643a4baa91f484b11af0e4437183115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(const basic_json &amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an array Appends the given element <emphasis>val</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON array</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Amortized constant.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,push_back}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22436" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22436" bodyend="22440"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>push_back</name>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>Inserts the given element <emphasis>val</emphasis> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container, O(log(<computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>)).</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object.,push_back__object_t__value}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22462" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22462" bodyend="22481"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ae300819781bce2193369609457f70f30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(const typename object_t::value_type &amp;val)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const typename object_t::value_type &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an object Inserts the given element <emphasis>val</emphasis> to the JSON object. If the function is called on a JSON null value, an empty object is created before inserting <emphasis>val</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to add to the JSON object</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.308</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use push_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container, O(log(<computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>)).</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> and <computeroutput>+=</computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object.,push_back__object_t__value}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22487" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22487" bodyend="22491"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4567cf75f19b1efca090f75d7a8a350a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</definition>
        <argsstring>(initializer_list_t init)</argsstring>
        <name>push_back</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>This function allows to use <computeroutput>push_back</computeroutput> with an initializer list. In case</para><para><orderedlist>
<listitem><para>the current value is an object,</para></listitem><listitem><para>the initializer list <emphasis>init</emphasis> contains only two elements, and</para></listitem><listitem><para>the first element of <emphasis>init</emphasis> is a string,</para></listitem></orderedlist>
</para><para><emphasis>init</emphasis> is converted into an object element and added using <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee" kindref="member">push_back(const typename object_t::value_type&amp;)</ref>. Otherwise, <emphasis>init</emphasis> is converted to a JSON value and added using <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back(basic_json&amp;&amp;)</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>an initializer list</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the initializer list <emphasis>init</emphasis>.</para><para><simplesect kind="note"><para>This function is required to resolve an ambiguous overload error, because pairs like <computeroutput>{&quot;key&quot;, &quot;value&quot;}</computeroutput> can be both interpreted as <computeroutput>object_t::value_type</computeroutput> or <computeroutput>std::initializer_list&lt;<ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&gt;</computeroutput>, see <ulink url="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</ulink> for more information.</para></simplesect>
{The example shows how initializer lists are treated as objects when possible.,push_back__initializer_list} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22518" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22518" bodyend="22530"/>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" compoundref="d5/db8/json_8hpp" startline="20316" endline="20320">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d">nlohmann::detail::key</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac48302a8b4f8c2a6e30c2a7bff6abc49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator+=</definition>
        <argsstring>(initializer_list_t init)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" kindref="member">initializer_list_t</ref></type>
          <declname>init</declname>
        </param>
        <briefdescription>
<para>add an object to an object </para>        </briefdescription>
        <detaileddescription>
<para>add an object to an object This function allows to use <computeroutput>push_back</computeroutput> with an initializer list. In case</para><para><orderedlist>
<listitem><para>the current value is an object,</para></listitem><listitem><para>the initializer list <emphasis>init</emphasis> contains only two elements, and</para></listitem><listitem><para>the first element of <emphasis>init</emphasis> is a string,</para></listitem></orderedlist>
</para><para><emphasis>init</emphasis> is converted into an object element and added using <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee" kindref="member">push_back(const typename object_t::value_type&amp;)</ref>. Otherwise, <emphasis>init</emphasis> is converted to a JSON value and added using <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back(basic_json&amp;&amp;)</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">init</parametername>
</parameternamelist>
<parameterdescription>
<para>an initializer list</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the initializer list <emphasis>init</emphasis>.</para><para><simplesect kind="note"><para>This function is required to resolve an ambiguous overload error, because pairs like <computeroutput>{&quot;key&quot;, &quot;value&quot;}</computeroutput> can be both interpreted as <computeroutput>object_t::value_type</computeroutput> or <computeroutput>std::initializer_list&lt;<ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&gt;</computeroutput>, see <ulink url="https://github.com/nlohmann/json/issues/235">https://github.com/nlohmann/json/issues/235</ulink> for more information.</para></simplesect>
{The example shows how initializer lists are treated as objects when possible.,push_back__initializer_list} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22536" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22536" bodyend="22540"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::emplace_back</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an array </para>        </briefdescription>
        <detaileddescription>
<para>Creates a JSON value from the passed parameters <emphasis>args</emphasis> to the end of the JSON value. If the function is called on a JSON null value, an empty array is created before appending the value created from <emphasis>args</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to a constructor of <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>compatible types to create a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the inserted element</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.311</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON array or null; example: <computeroutput>&quot;cannot use emplace_back() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Amortized constant.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" kindref="member">push_back()</ref></computeroutput> can be used to add elements to a JSON array. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON array.,emplace_back}</para><para><simplesect kind="since"><para>version 2.0.8, returns reference since 3.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22566" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22566" bodyend="22589"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac479e609cbd03948bd3e85fb441b66e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref>, bool &gt;</type>
        <definition>std::pair&lt;iterator, bool&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::emplace</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>emplace</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>add an object to an object if key does not exist </para>        </briefdescription>
        <detaileddescription>
<para>Inserts a new element into a JSON object constructed in-place with the given <emphasis>args</emphasis> if there is no element with the key in the container. If the function is called on a JSON null value, an empty object is created before appending the value created from <emphasis>args</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to forward to a constructor of <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>compatible types to create a <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a bool denoting whether the insertion took place.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.311</parametername>
</parameternamelist>
<parameterdescription>
<para>when called on a type other than JSON object or null; example: <computeroutput>&quot;cannot use emplace() with number&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic in the size of the container, O(log(<computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref></computeroutput>)).</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac479e609cbd03948bd3e85fb441b66e5" kindref="member">emplace()</ref></computeroutput> can be used to add elements to a JSON object. Note how the <computeroutput>null</computeroutput> value was silently converted to a JSON object. Further note how no value is added if there was already one value stored with the same key.,emplace}</para><para><simplesect kind="since"><para>version 2.0.8 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22619" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22619" bodyend="22645"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert_iterator</definition>
        <argsstring>(const_iterator pos, Args &amp;&amp;... args)</argsstring>
        <name>insert_iterator</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper for insertion of an iterator <simplesect kind="note"><para>: This uses std::distance to support GCC 4.8, see <ulink url="https://github.com/nlohmann/json/pull/1257">https://github.com/nlohmann/json/pull/1257</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22651" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22651" bodyend="22665"/>
        <references refid="d7/d10/structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d" compoundref="d5/db8/json_8hpp" startline="11295">nlohmann::detail::internal_iterator&lt; BasicJsonType &gt;::array_iterator</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa" compoundref="d5/db8/json_8hpp" startline="11952">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::m_it</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element </para>        </briefdescription>
        <detaileddescription>
<para>Inserts element <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the inserted <emphasis>val</emphasis>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref></computeroutput> is used.,insert}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22689" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22689" bodyend="22705"/>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" compoundref="d5/db8/json_8hpp" startline="25343" endline="25605">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9c5b9de8a4a759861cb600b38a6c81b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, basic_json &amp;&amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts element </para>        </briefdescription>
        <detaileddescription>
<para>inserts element Inserts element <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the inserted <emphasis>val</emphasis>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref></computeroutput> is used.,insert}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22711" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22711" bodyend="22714"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a71e197e6cc78c3960011f68a75f8ef22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, size_type cnt, const basic_json &amp;val)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" kindref="member">size_type</ref></type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts <emphasis>cnt</emphasis> copies of <emphasis>val</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of copies of <emphasis>val</emphasis> to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>cnt==0</computeroutput></para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in <emphasis>cnt</emphasis> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref></computeroutput> is used.,insert__count}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22740" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22740" bodyend="22756"/>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8137d5471edcd71606e42155ed9c23e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts elements from range <computeroutput>[first, last)</computeroutput> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range of elements to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range of elements to insert</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.210</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.211</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>first</emphasis> or <emphasis>last</emphasis> are iterators into container for which insert is called; example: <computeroutput>&quot;passed iterators may not
belong to container&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>first==last</computeroutput></para></simplesect>
Linear in <computeroutput>std::distance(first, last)</computeroutput> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref></computeroutput> is used.,insert__range}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22788" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22788" bodyend="22815"/>
        <references refid="d7/d10/structnlohmann_1_1detail_1_1internal__iterator_1a8294a6e6f01b58e1cce8fbae66a50b5d" compoundref="d5/db8/json_8hpp" startline="11295">nlohmann::detail::internal_iterator&lt; BasicJsonType &gt;::array_iterator</references>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa" compoundref="d5/db8/json_8hpp" startline="11952">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::m_it</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a856b8764efd21dac4205a00fec82e09a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator pos, initializer_list_t ilist)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" kindref="member">initializer_list_t</ref></type>
          <declname>ilist</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts elements from initializer list <emphasis>ilist</emphasis> before iterator <emphasis>pos</emphasis>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator before which the content will be inserted; may be the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" kindref="member">end()</ref> iterator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ilist</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list to insert the values from</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than arrays; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>pos</emphasis> is not an iterator of *this; example: <computeroutput>&quot;iterator does not fit current value&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator pointing to the first element inserted, or <emphasis>pos</emphasis> if <computeroutput>ilist</computeroutput> is empty</para></simplesect>
Linear in <computeroutput>ilist.size()</computeroutput> plus linear in the distance between <emphasis>pos</emphasis> and end of the container.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref></computeroutput> is used.,insert__ilist}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22841" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22841" bodyend="22857"/>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a0181d03c6314bedcbad2e92d3676223c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>inserts elements </para>        </briefdescription>
        <detaileddescription>
<para>Inserts elements from range <computeroutput>[first, last)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range of elements to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range of elements to insert</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.309</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than objects; example: <computeroutput>&quot;cannot use insert() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterator <emphasis>first</emphasis> or <emphasis>last</emphasis> does does not point to an object; example: <computeroutput>&quot;iterators first and last must point to
objects&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.210</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Logarithmic: <computeroutput>O(N*log(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref> + N))</computeroutput>, where <computeroutput>N</computeroutput> is the number of elements to insert.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" kindref="member">insert()</ref></computeroutput> is used.,insert__range_object}</para><para><simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22882" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22882" bodyend="22903"/>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a8a86a7c0d4af0cc4ab345b6f0e13cdfa" compoundref="d5/db8/json_8hpp" startline="11952">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::m_it</references>
        <references refid="d7/d10/structnlohmann_1_1detail_1_1internal__iterator_1a8cb0af3498061426c1d0a65ad6220408" compoundref="d5/db8/json_8hpp" startline="11293">nlohmann::detail::internal_iterator&lt; BasicJsonType &gt;::object_iterator</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</definition>
        <argsstring>(const_reference j)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>updates a JSON object from another object, overwriting existing keys </para>        </briefdescription>
        <detaileddescription>
<para>Inserts all values from JSON object <emphasis>j</emphasis> and overwrites existing keys.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON object to read values from</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.312</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than objects; example: <computeroutput>&quot;cannot use update() with string&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
O(N*log(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref> + N)), where N is the number of elements to insert.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" kindref="member">update()</ref></computeroutput> is used.,update}</para><para><simplesect kind="see"><para><ulink url="https://docs.python.org/3.6/library/stdtypes.html#dict.update">https://docs.python.org/3.6/library/stdtypes.html#dict.update</ulink></para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22924" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22924" bodyend="22947"/>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" compoundref="d5/db8/json_8hpp" startline="21668" endline="21673">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbegin</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" compoundref="d5/db8/json_8hpp" startline="21739" endline="21744">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cend</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" compoundref="d5/db8/json_8hpp" startline="19674" endline="19677">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a459dbfcd47bd632ca82ca8ff8db278c8" compoundref="d5/db8/json_8hpp" startline="24084" endline="24107">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_name</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9f9e5f668474280acc9bd7f5410b9392" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</definition>
        <argsstring>(const_iterator first, const_iterator last)</argsstring>
        <name>update</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" kindref="member">const_iterator</ref></type>
          <declname>last</declname>
        </param>
        <briefdescription>
<para>updates a JSON object from another object, overwriting existing keys </para>        </briefdescription>
        <detaileddescription>
<para>Inserts all values from from range <computeroutput>[first, last)</computeroutput> and overwrites existing keys.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>begin of the range of elements to insert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>end of the range of elements to insert</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.312</parametername>
</parameternamelist>
<parameterdescription>
<para>if called on JSON values other than objects; example: <computeroutput>&quot;cannot use update() with string&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.202</parametername>
</parameternamelist>
<parameterdescription>
<para>if iterator <emphasis>first</emphasis> or <emphasis>last</emphasis> does does not point to an object; example: <computeroutput>&quot;iterators first and last must point to
objects&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invalid_iterator.210</parametername>
</parameternamelist>
<parameterdescription>
<para>if <emphasis>first</emphasis> and <emphasis>last</emphasis> do not belong to the same JSON value; example: <computeroutput>&quot;iterators do not fit&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
O(N*log(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" kindref="member">size()</ref> + N)), where N is the number of elements to insert.</para><para>{The example shows how <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" kindref="member">update()</ref></computeroutput> is used__range.,update}</para><para><simplesect kind="see"><para><ulink url="https://docs.python.org/3.6/library/stdtypes.html#dict.update">https://docs.python.org/3.6/library/stdtypes.html#dict.update</ulink></para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="22975" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="22975" bodyend="23007"/>
        <references refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator_1a34104b98ab00564e564176b4d2ba7c3c" compoundref="d5/db8/json_8hpp" startline="2861" endline="2865">nlohmann::detail::invalid_iterator::create</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(reference other) noexcept(std::is_nothrow_move_constructible&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; value_t &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; json_value &gt;::value &amp;&amp;std::is_nothrow_move_assignable&lt; json_value &gt;::value)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of the JSON value with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how JSON values can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__reference}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23026" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23026" bodyend="23039"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a76126242de262f6d38cadda19e0d13e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(array_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON array with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>array to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not an array; example: <computeroutput>&quot;cannot
use swap() with string&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how arrays can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__array_t}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23089" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23089" bodyend="23100"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a57b86bdcfc55557dacc36969adb0417e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(object_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON object with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>object to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not an object; example: <computeroutput>&quot;cannot use swap() with string&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how objects can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__object_t}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23122" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23122" bodyend="23133"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aac916df9561daf4eaf2372119fe91899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(string_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON string with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>string to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not a string; example: <computeroutput>&quot;cannot
use swap() with boolean&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how strings can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__string_t}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23155" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23155" bodyend="23166"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aa242e339ebc7583e114f2167a83f8c90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(binary_t &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON string with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>binary to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not a string; example: <computeroutput>&quot;cannot
use swap() with boolean&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how strings can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__binary_t}</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23188" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23188" bodyend="23199"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a749a1f5091a5e63ccfe919e0aef986af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::swap</definition>
        <argsstring>(typename binary_t::container_type &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type>typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>exchanges the values </para>        </briefdescription>
        <detaileddescription>
<para>Exchanges the contents of a JSON string with those of <emphasis>other</emphasis>. Does not invoke any move, copy, or swap operations on individual elements. All iterators and references remain valid. The past-the-end iterator is invalidated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">other</parametername>
</parameternamelist>
<parameterdescription>
<para>binary to exchange the contents with</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.310</parametername>
</parameternamelist>
<parameterdescription>
<para>when JSON value is not a string; example: <computeroutput>&quot;cannot
use swap() with boolean&quot;</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
Constant.</para><para>{The example below shows how strings can be swapped with <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref></computeroutput>.,swap__binary_t}</para><para><simplesect kind="since"><para>version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23202" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23202" bodyend="23213"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>lexicographical comparison operators</header>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem><para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison. Note that two NaN values are always treated as unequal.</para></listitem><listitem><para>Two JSON null values are equal.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Floating-point inside JSON values numbers are compared with <computeroutput>json::number_float_t::operator==</computeroutput> which is <computeroutput>double::operator==</computeroutput> by default. To compare floating-point while respecting an epsilon, an alternative <ulink url="https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39">comparison function</ulink> could be used, for instance <programlisting><codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,<sp/>T&gt;<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">::type</ref>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_same(T<sp/>a,<sp/>T<sp/>b,<sp/>T<sp/>epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon())<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(a<sp/>-<sp/>b)<sp/>&lt;=<sp/>epsilon;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Or you can self-defined operator equal function like this: <programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>my_equal(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref><sp/>lhs,<sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs_type<sp/>lhs.type();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs_type<sp/>rhs.type();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_type<sp/>==<sp/>rhs_type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(lhs_type)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self_defined<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef" kindref="member">value_t::number_float</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(lhs<sp/>-<sp/>rhs)<sp/>&lt;=<sp/>std::numeric_limits&lt;float&gt;::epsilon();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>cases<sp/>remain<sp/>the<sp/>same<sp/>with<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para>NaN values never compare equal to themselves or to other NaN values.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para></simplesect>
No-throw guarantee: this function never throws exceptions.</para><para>Linear.</para><para>{The example demonstrates comparing several JSON types.,operator__equal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23280" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23280" bodyend="23346"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a107a085c92ec4e062d1185b2d09c7978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const_reference lhs, ScalarType rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: equal Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem><para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison. Note that two NaN values are always treated as unequal.</para></listitem><listitem><para>Two JSON null values are equal.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Floating-point inside JSON values numbers are compared with <computeroutput>json::number_float_t::operator==</computeroutput> which is <computeroutput>double::operator==</computeroutput> by default. To compare floating-point while respecting an epsilon, an alternative <ulink url="https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39">comparison function</ulink> could be used, for instance <programlisting><codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,<sp/>T&gt;<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">::type</ref>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_same(T<sp/>a,<sp/>T<sp/>b,<sp/>T<sp/>epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon())<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(a<sp/>-<sp/>b)<sp/>&lt;=<sp/>epsilon;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Or you can self-defined operator equal function like this: <programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>my_equal(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref><sp/>lhs,<sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs_type<sp/>lhs.type();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs_type<sp/>rhs.type();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_type<sp/>==<sp/>rhs_type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(lhs_type)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self_defined<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef" kindref="member">value_t::number_float</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(lhs<sp/>-<sp/>rhs)<sp/>&lt;=<sp/>std::numeric_limits&lt;float&gt;::epsilon();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>cases<sp/>remain<sp/>the<sp/>same<sp/>with<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para>NaN values never compare equal to themselves or to other NaN values.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para></simplesect>
No-throw guarantee: this function never throws exceptions.</para><para>Linear.</para><para>{The example demonstrates comparing several JSON types.,operator__equal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23354" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23354" bodyend="23357"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a24ae7acd5b06ae49cfe1c94633436b68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: equal Compares two JSON values for equality according to the following rules:<itemizedlist>
<listitem><para>Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective <computeroutput>operator==</computeroutput>.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison. Note that two NaN values are always treated as unequal.</para></listitem><listitem><para>Two JSON null values are equal.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Floating-point inside JSON values numbers are compared with <computeroutput>json::number_float_t::operator==</computeroutput> which is <computeroutput>double::operator==</computeroutput> by default. To compare floating-point while respecting an epsilon, an alternative <ulink url="https://github.com/mariokonrad/marnav/blob/master/include/marnav/math/floatingpoint.hpp#L34-#L39">comparison function</ulink> could be used, for instance <programlisting><codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,<sp/>T&gt;<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">::type</ref>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_same(T<sp/>a,<sp/>T<sp/>b,<sp/>T<sp/>epsilon<sp/>=<sp/>std::numeric_limits&lt;T&gt;::epsilon())<sp/>noexcept</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(a<sp/>-<sp/>b)<sp/>&lt;=<sp/>epsilon;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> Or you can self-defined operator equal function like this: <programlisting><codeline><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>my_equal(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref><sp/>lhs,<sp/><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref><sp/>rhs)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs_type<sp/>lhs.type();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rhs_type<sp/>rhs.type();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_type<sp/>==<sp/>rhs_type)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(lhs_type)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>self_defined<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef" kindref="member">value_t::number_float</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(lhs<sp/>-<sp/>rhs)<sp/>&lt;=<sp/>std::numeric_limits&lt;float&gt;::epsilon();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>cases<sp/>remain<sp/>the<sp/>same<sp/>with<sp/>the<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para>NaN values never compare equal to themselves or to other NaN values.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are equal</para></simplesect>
No-throw guarantee: this function never throws exceptions.</para><para>Linear.</para><para>{The example demonstrates comparing several JSON types.,operator__equal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23365" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23365" bodyend="23368"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: not equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__notequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23388" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23388" bodyend="23391"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a4d581dc2ab78091885f9af24d13749dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const_reference lhs, ScalarType rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: not equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: not equal Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__notequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23399" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23399" bodyend="23402"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1aa9861979059799375c0fff68174610ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: not equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: not equal Compares two JSON values for inequality by calculating <computeroutput>not (lhs == rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the values <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> are not equal</para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__notequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23410" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23410" bodyend="23413"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem><para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison</para></listitem><listitem><para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__less}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23441" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23441" bodyend="23512"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a52907b78829a55473f2548530cf2c1c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const_reference lhs, ScalarType rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem><para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison</para></listitem><listitem><para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__less}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23520" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23520" bodyend="23523"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a71f65ff3abee4c140e27ca64fa327973" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than Compares whether one JSON value <emphasis>lhs</emphasis> is less than another JSON value <emphasis>rhs</emphasis> according to the following rules:<itemizedlist>
<listitem><para>If <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have the same type, the values are compared using the default <computeroutput>&lt;</computeroutput> operator.</para></listitem><listitem><para>Integer and floating-point numbers are automatically converted before comparison</para></listitem><listitem><para>In case <emphasis>lhs</emphasis> and <emphasis>rhs</emphasis> have different types, the values are ignored and the order of the types is considered, see operator&lt;(const value_t, const value_t).</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__less}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23531" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23531" bodyend="23534"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than or equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__greater}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23555" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23555" bodyend="23558"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1ae7bce6989e2bf72aa0784ca6755e22a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(const_reference lhs, ScalarType rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__greater}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23566" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23566" bodyend="23569"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a4e96b98c1f8dfccaaa94aa0d5e77427c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&lt;=</definition>
        <argsstring>(ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: less than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: less than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is less than or equal to another JSON value by calculating <computeroutput>not (rhs &lt; lhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is less than or equal to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__greater}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23577" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23577" bodyend="23580"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__lessequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23601" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23601" bodyend="23604"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a9ea8e0e86820fcb3ab0fc937d41226e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(const_reference lhs, ScalarType rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__lessequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23612" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23612" bodyend="23615"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a67771044f08fd07105b34667615d9e0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;</definition>
        <argsstring>(ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than Compares whether one JSON value <emphasis>lhs</emphasis> is greater than another JSON value by calculating <computeroutput>not (lhs &lt;= rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__lessequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23623" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23623" bodyend="23626"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const_reference lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than or equal </para>        </briefdescription>
        <detaileddescription>
<para>Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__greaterequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23647" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23647" bodyend="23650"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1ab83d11de4db25633f93e067aa218cae9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const_reference lhs, ScalarType rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>ScalarType</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__greaterequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23658" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23658" bodyend="23661"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a94c61e0128f0794e7a34e1aecee5c445" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ScalarType</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_scalar&lt; ScalarType &gt;::<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref>, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(ScalarType lhs, const_reference rhs) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>ScalarType</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison: greater than or equal </para>        </briefdescription>
        <detaileddescription>
<para>comparison: greater than or equal Compares whether one JSON value <emphasis>lhs</emphasis> is greater than or equal to another JSON value by calculating <computeroutput>not (lhs &lt; rhs)</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>first JSON value to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>second JSON value to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <emphasis>lhs</emphasis> is greater than or equal to <emphasis>rhs</emphasis> </para></simplesect>
Linear.</para><para>No-throw guarantee: this function never throws exceptions.</para><para>{The example demonstrates comparing several JSON types.,operator__greaterequal}</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23669" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23669" bodyend="23672"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>serialization</header>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a5e34c5435e557d0bf666bd7311211405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;o, const basic_json &amp;j)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>serialize to stream </para>        </briefdescription>
        <detaileddescription>
<para>Serialize the given JSON value <emphasis>j</emphasis> to the output stream <emphasis>o</emphasis>. The JSON value will be serialized using the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" kindref="member">dump</ref> member function.</para><para><itemizedlist>
<listitem><para>The indentation of the output can be controlled with the member variable <computeroutput>width</computeroutput> of the output stream <emphasis>o</emphasis>. For instance, using the manipulator <computeroutput>std::setw(4)</computeroutput> on <emphasis>o</emphasis> sets the indentation level to <computeroutput>4</computeroutput> and the serialization result is the same as calling <computeroutput>dump(4)</computeroutput>.</para></listitem><listitem><para>The indentation character can be controlled with the member variable <computeroutput>fill</computeroutput> of the output stream <emphasis>o</emphasis>. For instance, the manipulator `std::setfill(&apos;\t&apos;)` sets indentation to use a tab character rather than the default space character.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">o</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to serialize to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the stream <emphasis>o</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.316</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string stored inside the JSON value is not UTF-8 encoded</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear.</para><para>{The example below shows the serialization with different parameters to <computeroutput>width</computeroutput> to adjust the indentation level.,operator_serialize}</para><para><simplesect kind="since"><para>version 1.0.0; indentation character added in version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23714" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23714" bodyend="23727"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a34d6a60dd99e9f33b8273a1c8db5669b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&gt;&gt;</definition>
        <argsstring>(const basic_json &amp;j, std::ostream &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>serialize to stream </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="da/d58/deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated and will be removed in future 4.0.0 of the library. Please use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5e34c5435e557d0bf666bd7311211405" kindref="member">operator&lt;&lt;(std::ostream&amp;, const basic_json&amp;)</ref> instead; that is, replace calls like <computeroutput>j &gt;&gt; o;</computeroutput> with <computeroutput>o &lt;&lt; j;</computeroutput>. </para></xrefdescription></xrefsect><simplesect kind="since"><para>version 1.0.0; deprecated since version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23738" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23738" bodyend="23741"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>deserialization</header>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a60ca396028b8d9714c6e10efbf475af6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&lt;&lt;</definition>
        <argsstring>(basic_json &amp;j, std::istream &amp;i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="da/d58/deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This stream operator is deprecated and will be removed in version 4.0.0 of the library. Please use <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aaf363408931d76472ded14017e59c9e8" kindref="member">operator&gt;&gt;(std::istream&amp;, basic_json&amp;)</ref> instead; that is, replace calls like <computeroutput>j &lt;&lt; i;</computeroutput> with <computeroutput>i &gt;&gt; j;</computeroutput>. </para></xrefdescription></xrefsect><simplesect kind="since"><para>version 1.0.0; deprecated since version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24010" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24010" bodyend="24013"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1aaf363408931d76472ded14017e59c9e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;i, basic_json &amp;j)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>deserialize from stream </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes an input stream to a JSON value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">i</parametername>
</parameternamelist>
<parameterdescription>
<para>input stream to read a serialized JSON value from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to write the deserialized input to</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>in case of an unexpected token </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the length of the input. The parser is a predictive LL(1) parser.</para><para><simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
{The example below shows how a JSON value is constructed by reading a serialization from a stream.,operator_deserialize}</para><para><simplesect kind="see"><para>parse(std::istream&amp;, const parser_callback_t) for a variant with a <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aaa5b1a16260634ed7b6c6a44f39c4d8a" kindref="member">parser</ref> callback function to filter values while parsing</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24040" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24040" bodyend="24044"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</definition>
        <argsstring>(InputType &amp;&amp;i, const parser_callback_t cb=nullptr, const bool allow_exceptions=true, const bool ignore_comments=false)</argsstring>
        <name>parse</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>deserialize from a compatible input </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputType</parametername>
</parameternamelist>
<parameterdescription>
<para>A compatible input, for instance<itemizedlist>
<listitem><para>an std::istream object</para></listitem><listitem><para>a FILE pointer</para></listitem><listitem><para>a C-style array of characters</para></listitem><listitem><para>a pointer to a null-terminated string of single byte characters</para></listitem><listitem><para>an object obj for which begin(obj) and end(obj) produces a valid pair of iterators.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>input to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ignore_comments</parametername>
</parameternamelist>
<parameterdescription>
<para>whether comments should be ignored and treated like whitespace (true) or yield a parse error (true); (optional, false by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>if a parse error occurs; example: <computeroutput>&quot;&quot;unexpected end of input; expected string literal&quot;&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the parser callback function <emphasis>cb</emphasis> or reading from the input <emphasis>i</emphasis> has a super-linear complexity.</para><para><simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
{The example below demonstrates the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse()</ref></computeroutput> function reading from an array.,parse__array__parser_callback_t}</para><para>{The example below demonstrates the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse()</ref></computeroutput> function with and without callback function.,parse__string__parser_callback_t}</para><para>{The example below demonstrates the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse()</ref></computeroutput> function with and without callback function.,parse__istream__parser_callback_t}</para><para>{The example below demonstrates the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse()</ref></computeroutput> function reading from a contiguous container.,parse__contiguouscontainer__parser_callback_t}</para><para><simplesect kind="since"><para>version 2.0.3 (contiguous containers); version 3.9.0 allowed to ignore comments. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23806" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23806" bodyend="23814"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" compoundref="d5/db8/json_8hpp" startline="23806" endline="23814">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</references>
        <referencedby refid="d5/db8/json_8hpp_1a106b949d848bb8243a7cf94f11bcebf1" compoundref="d5/db8/json_8hpp" startline="25936" endline="25939">operator&quot;&quot; _json</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" compoundref="d5/db8/json_8hpp" startline="23806" endline="23814">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad832c70af0989389a9a104c21d2d1c5c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</definition>
        <argsstring>(IteratorType first, IteratorType last, const parser_callback_t cb=nullptr, const bool allow_exceptions=true, const bool ignore_comments=false)</argsstring>
        <name>parse</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>deserialize from a pair of character iterators </para>        </briefdescription>
        <detaileddescription>
<para>The value_type of the iterator must be a integral type with size of 1, 2 or 4 bytes, which will be interpreted respectively as UTF-8, UTF-16 and UTF-32.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">first</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to start of character range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">last</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator to end of character range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a parser callback function of type <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref> which is used to control the deserialization by filtering unwanted values (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ignore_comments</parametername>
</parameternamelist>
<parameterdescription>
<para>whether comments should be ignored and treated like whitespace (true) or yield a parse error (true); (optional, false by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>if a parse error occurs; example: <computeroutput>&quot;&quot;unexpected end of input; expected string literal&quot;&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23844" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23844" bodyend="23853"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" compoundref="d5/db8/json_8hpp" startline="23806" endline="23814">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a73cf15644f04fa569f50291049d1bafd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const parser_callback_t cb=nullptr, const bool allow_exceptions=true, const bool ignore_comments=false)</argsstring>
        <name>parse</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref></type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23857" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23857" bodyend="23865"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept</definition>
        <argsstring>(InputType &amp;&amp;i, const bool ignore_comments=false)</argsstring>
        <name>accept</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>check if the input is valid JSON </para>        </briefdescription>
        <detaileddescription>
<para>Unlike the parse(InputType&amp;&amp;, const parser_callback_t,const bool) function, this function neither throws an exception in case of invalid JSON input (i.e., a parse error) nor creates diagnostic information.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>InputType</parametername>
</parameternamelist>
<parameterdescription>
<para>A compatible input, for instance<itemizedlist>
<listitem><para>an std::istream object</para></listitem><listitem><para>a FILE pointer</para></listitem><listitem><para>a C-style array of characters</para></listitem><listitem><para>a pointer to a null-terminated string of single byte characters</para></listitem><listitem><para>an object obj for which begin(obj) and end(obj) produces a valid pair of iterators.</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>input to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ignore_comments</parametername>
</parameternamelist>
<parameterdescription>
<para>whether comments should be ignored and treated like whitespace (true) or yield a parse error (true); (optional, false by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the input read from <emphasis>i</emphasis> is valid JSON.</para></simplesect>
Linear in the length of the input. The parser is a predictive LL(1) parser.</para><para><simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
{The example below demonstrates the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55" kindref="member">accept()</ref></computeroutput> function reading from a string.,accept__string} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23898" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23898" bodyend="23902"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a47fb596473649332185aedb0a8a6ccc5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool ignore_comments=false)</argsstring>
        <name>accept</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23905" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23905" bodyend="23909"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a6d9e85910b91d02f6807b69b61690a4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> bool</type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool ignore_comments=false)</argsstring>
        <name>accept</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23913" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23913" bodyend="23917"/>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</definition>
        <argsstring>(InputType &amp;&amp;i, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval><ref refid="db/d7e/cudnn__frontend__Errata_8h_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">input_format_t::json</ref></defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>generate SAX events </para>        </briefdescription>
        <detaileddescription>
<para>The SAX event lister must follow the interface of <ref refid="d0/d82/structnlohmann_1_1json__sax" kindref="compound">json_sax</ref>.</para><para>This function reads from a compatible input. Examples are:<itemizedlist>
<listitem><para>an std::istream object</para></listitem><listitem><para>a FILE pointer</para></listitem><listitem><para>a C-style array of characters</para></listitem><listitem><para>a pointer to a null-terminated string of single byte characters</para></listitem><listitem><para>an object obj for which begin(obj) and end(obj) produces a valid pair of iterators.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>input to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">sax</parametername>
</parameternamelist>
<parameterdescription>
<para>SAX event listener </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">format</parametername>
</parameternamelist>
<parameterdescription>
<para>the format to parse (JSON, CBOR, MessagePack, or UBJSON) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the input has to be consumed completely </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ignore_comments</parametername>
</parameternamelist>
<parameterdescription>
<para>whether comments should be ignored and treated like whitespace (true) or yield a parse error (true); (optional, false by default); only applies to the JSON file format.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>return value of the last processed SAX event</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.101</parametername>
</parameternamelist>
<parameterdescription>
<para>if a parse error occurs; example: <computeroutput>&quot;&quot;unexpected end of input; expected string literal&quot;&quot;</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.102</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails or surrogate error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.103</parametername>
</parameternamelist>
<parameterdescription>
<para>if to_unicode fails</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the length of the input. The parser is a predictive LL(1) parser. The complexity can be higher if the SAX consumer <emphasis>sax</emphasis> has a super-linear complexity.</para><para><simplesect kind="note"><para>A UTF-8 byte order mark is silently ignored.</para></simplesect>
{The example below demonstrates the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008" kindref="member">sax_parse()</ref></computeroutput> function reading from string and processing the events with a user-defined SAX event consumer.,sax_parse}</para><para><simplesect kind="since"><para>version 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23961" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23961" bodyend="23970"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a466deec76ecdf5fca6d38571f6324d54">nlohmann::detail::json</references>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab62241c2694a054818edf2f66d72f113" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class IteratorType</type>
          </param>
          <param>
            <type>class SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</definition>
        <argsstring>(IteratorType first, IteratorType last, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval><ref refid="db/d7e/cudnn__frontend__Errata_8h_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">input_format_t::json</ref></defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23974" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23974" bodyend="23983"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a466deec76ecdf5fca6d38571f6324d54">nlohmann::detail::json</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a5338981b5ad9027c9e54b1c5597f4344" compoundref="d5/db8/json_8hpp" startline="1456">JSON_HEDLEY_NON_NULL</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aef9ef0a817ecde8bf270653e8706c150" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, SAX *sax, input_format_t format=input_format_t::json, const bool strict=true, const bool ignore_comments=false)</argsstring>
        <name>sax_parse</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>SAX *</type>
          <declname>sax</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40" kindref="member">input_format_t</ref></type>
          <declname>format</declname>
          <defval><ref refid="db/d7e/cudnn__frontend__Errata_8h_1ab701e3ac61a85b337ec5c1abaad6742d" kindref="member">input_format_t::json</ref></defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="23988" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="23988" bodyend="23999"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a466deec76ecdf5fca6d38571f6324d54">nlohmann::detail::json</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>binary serialization/deserialization support</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt;uint8_t&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a CBOR serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the CBOR (Concise Binary Object Representation) serialization format. CBOR is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</para><para>The library uses the following mapping from JSON values types to CBOR types according to the CBOR specification (RFC 7049):</para><para><table rows="41" cols="4"><row>
<entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>value/range </para></entry><entry thead="yes"><para>CBOR type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>Null </para></entry><entry thead="no"><para>0xF6 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>True </para></entry><entry thead="no"><para>0xF5 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>False </para></entry><entry thead="no"><para>0xF4 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-9223372036854775808..-2147483649 </para></entry><entry thead="no"><para>Negative integer (8 bytes follow) </para></entry><entry thead="no"><para>0x3B </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-2147483648..-32769 </para></entry><entry thead="no"><para>Negative integer (4 bytes follow) </para></entry><entry thead="no"><para>0x3A </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32768..-129 </para></entry><entry thead="no"><para>Negative integer (2 bytes follow) </para></entry><entry thead="no"><para>0x39 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-128..-25 </para></entry><entry thead="no"><para>Negative integer (1 byte follow) </para></entry><entry thead="no"><para>0x38 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-24..-1 </para></entry><entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>0x20..0x37 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0..23 </para></entry><entry thead="no"><para>Integer </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>24..255 </para></entry><entry thead="no"><para>Unsigned integer (1 byte follow) </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>Unsigned integer (2 bytes follow) </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>Unsigned integer (4 bytes follow) </para></entry><entry thead="no"><para>0x1A </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>Unsigned integer (8 bytes follow) </para></entry><entry thead="no"><para>0x1B </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0..23 </para></entry><entry thead="no"><para>Integer </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>24..255 </para></entry><entry thead="no"><para>Unsigned integer (1 byte follow) </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>Unsigned integer (2 bytes follow) </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>Unsigned integer (4 bytes follow) </para></entry><entry thead="no"><para>0x1A </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>Unsigned integer (8 bytes follow) </para></entry><entry thead="no"><para>0x1B </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value representable by a float</emphasis> </para></entry><entry thead="no"><para>Single-Precision Float </para></entry><entry thead="no"><para>0xFA </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value NOT representable by a float</emphasis> </para></entry><entry thead="no"><para>Double-Precision Float </para></entry><entry thead="no"><para>0xFB </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 0..23 </para></entry><entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>0x60..0x77 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 23..255 </para></entry><entry thead="no"><para>UTF-8 string (1 byte follow) </para></entry><entry thead="no"><para>0x78 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 256..65535 </para></entry><entry thead="no"><para>UTF-8 string (2 bytes follow) </para></entry><entry thead="no"><para>0x79 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>UTF-8 string (4 bytes follow) </para></entry><entry thead="no"><para>0x7A </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>UTF-8 string (8 bytes follow) </para></entry><entry thead="no"><para>0x7B </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..23 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x80..0x97 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 23..255 </para></entry><entry thead="no"><para>array (1 byte follow) </para></entry><entry thead="no"><para>0x98 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 256..65535 </para></entry><entry thead="no"><para>array (2 bytes follow) </para></entry><entry thead="no"><para>0x99 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>array (4 bytes follow) </para></entry><entry thead="no"><para>0x9A </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>array (8 bytes follow) </para></entry><entry thead="no"><para>0x9B </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..23 </para></entry><entry thead="no"><para>map </para></entry><entry thead="no"><para>0xA0..0xB7 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 23..255 </para></entry><entry thead="no"><para>map (1 byte follow) </para></entry><entry thead="no"><para>0xB8 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 256..65535 </para></entry><entry thead="no"><para>map (2 bytes follow) </para></entry><entry thead="no"><para>0xB9 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>map (4 bytes follow) </para></entry><entry thead="no"><para>0xBA </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>map (8 bytes follow) </para></entry><entry thead="no"><para>0xBB </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..23 </para></entry><entry thead="no"><para>byte string </para></entry><entry thead="no"><para>0x40..0x57 </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 23..255 </para></entry><entry thead="no"><para>byte string (1 byte follow) </para></entry><entry thead="no"><para>0x58 </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 256..65535 </para></entry><entry thead="no"><para>byte string (2 bytes follow) </para></entry><entry thead="no"><para>0x59 </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>byte string (4 bytes follow) </para></entry><entry thead="no"><para>0x5A </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 4294967296..18446744073709551615 </para></entry><entry thead="no"><para>byte string (8 bytes follow) </para></entry><entry thead="no"><para>0x5B </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any JSON value type can be converted to a CBOR value.</para></simplesect>
<simplesect kind="note"><para>If NaN or Infinity are stored inside a JSON number, they are serialized properly. This behavior differs from the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" kindref="member">dump()</ref> function which serializes NaN or Infinity to <computeroutput>null</computeroutput>.</para></simplesect>
<simplesect kind="note"><para>The following CBOR types are not used in the conversion:<itemizedlist>
<listitem><para>UTF-8 strings terminated by &quot;break&quot; (0x7F)</para></listitem><listitem><para>arrays terminated by &quot;break&quot; (0x9F)</para></listitem><listitem><para>maps terminated by &quot;break&quot; (0xBF)</para></listitem><listitem><para>byte strings terminated by &quot;break&quot; (0x5F)</para></listitem><listitem><para>date/time (0xC0..0xC1)</para></listitem><listitem><para>bignum (0xC2..0xC3)</para></listitem><listitem><para>decimal fraction (0xC4)</para></listitem><listitem><para>bigfloat (0xC5)</para></listitem><listitem><para>expected conversions (0xD5..0xD7)</para></listitem><listitem><para>simple values (0xE0..0xF3, 0xF8)</para></listitem><listitem><para>undefined (0xF7)</para></listitem><listitem><para>half-precision floats (0xF9)</para></listitem><listitem><para>break (0xFF)</para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CBOR serialization as byte vector</para></simplesect>
Linear in the size of the JSON value <emphasis>j</emphasis>.</para><para>{The example shows the serialization of a JSON value to a byte vector in CBOR format.,to_cbor}</para><para><simplesect kind="see"><para><ulink url="http://cbor.io">http://cbor.io</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the analogous deserialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack(const basic_json&amp;)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" kindref="member">to_ubjson(const basic_json&amp;, const bool, const bool)</ref> for the related UBJSON format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9; compact representation of floating-point numbers since version 3.8.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24228" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24228" bodyend="24233"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2becf604016783e5644eaa7782a08683" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; uint8_t &gt; o)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24235" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24235" bodyend="24238"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5689672954fd3bc38f2f17e5607064c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_cbor</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_cbor</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24240" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24240" bodyend="24243"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt;uint8_t&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>create a MessagePack serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the MessagePack serialization format. MessagePack is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse.</para><para>The library uses the following mapping from JSON values types to MessagePack types according to the MessagePack specification:</para><para><table rows="34" cols="4"><row>
<entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>value/range </para></entry><entry thead="yes"><para>MessagePack type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>nil </para></entry><entry thead="no"><para>0xC0 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>true </para></entry><entry thead="no"><para>0xC3 </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para>0xC2 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-9223372036854775808..-2147483649 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para>0xD3 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-2147483648..-32769 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para>0xD2 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32768..-129 </para></entry><entry thead="no"><para>int16 </para></entry><entry thead="no"><para>0xD1 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-128..-33 </para></entry><entry thead="no"><para>int8 </para></entry><entry thead="no"><para>0xD0 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32..-1 </para></entry><entry thead="no"><para>negative fixint </para></entry><entry thead="no"><para>0xE0..0xFF </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0..127 </para></entry><entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>0x00..0x7F </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>128..255 </para></entry><entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para>0xCC </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>0xCD </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>0xCE </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>0xCF </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0..127 </para></entry><entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>0x00..0x7F </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>128..255 </para></entry><entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para>0xCC </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>256..65535 </para></entry><entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>0xCD </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>65536..4294967295 </para></entry><entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>0xCE </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>4294967296..18446744073709551615 </para></entry><entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>0xCF </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value representable by a float</emphasis> </para></entry><entry thead="no"><para>float 32 </para></entry><entry thead="no"><para>0xCA </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value NOT representable by a float</emphasis> </para></entry><entry thead="no"><para>float 64 </para></entry><entry thead="no"><para>0xCB </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 0..31 </para></entry><entry thead="no"><para>fixstr </para></entry><entry thead="no"><para>0xA0..0xBF </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 32..255 </para></entry><entry thead="no"><para>str 8 </para></entry><entry thead="no"><para>0xD9 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 256..65535 </para></entry><entry thead="no"><para>str 16 </para></entry><entry thead="no"><para>0xDA </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>length</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>str 32 </para></entry><entry thead="no"><para>0xDB </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..15 </para></entry><entry thead="no"><para>fixarray </para></entry><entry thead="no"><para>0x90..0x9F </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 16..65535 </para></entry><entry thead="no"><para>array 16 </para></entry><entry thead="no"><para>0xDC </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>array 32 </para></entry><entry thead="no"><para>0xDD </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..15 </para></entry><entry thead="no"><para>fix map </para></entry><entry thead="no"><para>0x80..0x8F </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 16..65535 </para></entry><entry thead="no"><para>map 16 </para></entry><entry thead="no"><para>0xDE </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>map 32 </para></entry><entry thead="no"><para>0xDF </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 0..255 </para></entry><entry thead="no"><para>bin 8 </para></entry><entry thead="no"><para>0xC4 </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 256..65535 </para></entry><entry thead="no"><para>bin 16 </para></entry><entry thead="no"><para>0xC5 </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>size</emphasis>: 65536..4294967295 </para></entry><entry thead="no"><para>bin 32 </para></entry><entry thead="no"><para>0xC6 </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any JSON value type can be converted to a MessagePack value.</para></simplesect>
<simplesect kind="note"><para>The following values can <bold>not</bold> be converted to a MessagePack value:<itemizedlist>
<listitem><para>strings with more than 4294967295 bytes</para></listitem><listitem><para>byte strings with more than 4294967295 bytes</para></listitem><listitem><para>arrays with more than 4294967295 elements</para></listitem><listitem><para>objects with more than 4294967295 elements</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>Any MessagePack output created <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack</ref>.</para></simplesect>
<simplesect kind="note"><para>If NaN or Infinity are stored inside a JSON number, they are serialized properly. This behavior differs from the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" kindref="member">dump()</ref> function which serializes NaN or Infinity to <computeroutput>null</computeroutput>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MessagePack serialization as byte vector</para></simplesect>
Linear in the size of the JSON value <emphasis>j</emphasis>.</para><para>{The example shows the serialization of a JSON value to a byte vector in MessagePack format.,to_msgpack}</para><para><simplesect kind="see"><para><ulink url="http://msgpack.org">http://msgpack.org</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack</ref> for the analogous deserialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor</ref>(const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp; for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" kindref="member">to_ubjson(const basic_json&amp;, const bool, const bool)</ref> for the related UBJSON format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24323" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24323" bodyend="24328"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aa8fe46eda86f6f92c5599c20b6c81819" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; uint8_t &gt; o)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24330" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24330" bodyend="24333"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aca5dc0fca52131f3a634372120abfbe7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_msgpack</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_msgpack</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24335" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24335" bodyend="24338"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt;uint8_t&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>create a UBJSON serialization of a given JSON value </para>        </briefdescription>
        <detaileddescription>
<para>Serializes a given JSON value <emphasis>j</emphasis> to a byte vector using the UBJSON (Universal Binary JSON) serialization format. UBJSON aims to be more compact than JSON itself, yet more efficient to parse.</para><para>The library uses the following mapping from JSON values types to UBJSON types according to the UBJSON specification:</para><para><table rows="22" cols="4"><row>
<entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>value/range </para></entry><entry thead="yes"><para>UBJSON type </para></entry><entry thead="yes"><para>marker  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>Z</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>true </para></entry><entry thead="no"><para><computeroutput>T</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>false </para></entry><entry thead="no"><para><computeroutput>F</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-9223372036854775808..-2147483649 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para><computeroutput>L</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-2147483648..-32769 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para><computeroutput>l</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-32768..-129 </para></entry><entry thead="no"><para>int16 </para></entry><entry thead="no"><para><computeroutput>I</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-128..127 </para></entry><entry thead="no"><para>int8 </para></entry><entry thead="no"><para><computeroutput>i</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>128..255 </para></entry><entry thead="no"><para>uint8 </para></entry><entry thead="no"><para><computeroutput>U</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>256..32767 </para></entry><entry thead="no"><para>int16 </para></entry><entry thead="no"><para><computeroutput>I</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>32768..2147483647 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para><computeroutput>l</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>2147483648..9223372036854775807 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para><computeroutput>L</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0..127 </para></entry><entry thead="no"><para>int8 </para></entry><entry thead="no"><para><computeroutput>i</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>128..255 </para></entry><entry thead="no"><para>uint8 </para></entry><entry thead="no"><para><computeroutput>U</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>256..32767 </para></entry><entry thead="no"><para>int16 </para></entry><entry thead="no"><para><computeroutput>I</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>32768..2147483647 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para><computeroutput>l</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>2147483648..9223372036854775807 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para><computeroutput>L</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>2147483649..18446744073709551615 </para></entry><entry thead="no"><para>high-precision </para></entry><entry thead="no"><para><computeroutput>H</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>float64 </para></entry><entry thead="no"><para><computeroutput>D</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>with shortest length indicator</emphasis> </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>S</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>see notes on optimized format</emphasis> </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para><computeroutput>[</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>see notes on optimized format</emphasis> </para></entry><entry thead="no"><para>map </para></entry><entry thead="no"><para><computeroutput>{</computeroutput> </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any JSON value type can be converted to a UBJSON value.</para></simplesect>
<simplesect kind="note"><para>The following values can <bold>not</bold> be converted to a UBJSON value:<itemizedlist>
<listitem><para>strings with more than 9223372036854775807 bytes (theoretical)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>The following markers are not used in the conversion:<itemizedlist>
<listitem><para><computeroutput>Z</computeroutput>: no-op values are not created.</para></listitem><listitem><para><computeroutput>C</computeroutput>: single-byte strings are serialized with <computeroutput>S</computeroutput> markers.</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>Any UBJSON output created <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" kindref="member">to_ubjson</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson</ref>.</para></simplesect>
<simplesect kind="note"><para>If NaN or Infinity are stored inside a JSON number, they are serialized properly. This behavior differs from the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" kindref="member">dump()</ref> function which serializes NaN or Infinity to <computeroutput>null</computeroutput>.</para></simplesect>
<simplesect kind="note"><para>The optimized formats for containers are supported: Parameter <emphasis>use_size</emphasis> adds size information to the beginning of a container and removes the closing marker. Parameter <emphasis>use_type</emphasis> further checks whether all elements of a container have the same type and adds the type marker to the beginning of the container. The <emphasis>use_type</emphasis> parameter must only be used together with <emphasis>use_size</emphasis> = true. Note that <emphasis>use_size</emphasis> = true alone may result in larger representations - the benefit of this parameter is that the receiving side is immediately informed on the number of elements of the container.</para></simplesect>
<simplesect kind="note"><para>If the JSON data contains the binary type, the value stored is a list of integers, as suggested by the UBJSON documentation. In particular, this means that serialization and the deserialization of a JSON containing binary values into UBJSON and back will result in a different JSON object.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_size</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to add size annotations to container types </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_type</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to add type annotations to container types (must be combined with <emphasis>use_size</emphasis> = true) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UBJSON serialization as byte vector</para></simplesect>
Linear in the size of the JSON value <emphasis>j</emphasis>.</para><para>{The example shows the serialization of a JSON value to a byte vector in UBJSON format.,to_ubjson}</para><para><simplesect kind="see"><para><ulink url="http://ubjson.org">http://ubjson.org</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the analogous deserialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor</ref>(const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>&amp; for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack(const basic_json&amp;)</ref> for the related MessagePack format</para></simplesect>
<simplesect kind="since"><para>version 3.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24426" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24426" bodyend="24433"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a19dad92c4fe9e6a289a93195e1230e97" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; uint8_t &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24435" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24435" bodyend="24439"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a6d133cf7b2e729e9e215edeba5726116" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_ubjson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o, const bool use_size=false, const bool use_type=false)</argsstring>
        <name>to_ubjson</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_size</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>use_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24441" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24441" bodyend="24445"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>static std::vector&lt;uint8_t&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j)</argsstring>
        <name>to_bson</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and returns a vector containing the corresponding BSON-representation. </para>        </briefdescription>
        <detaileddescription>
<para>BSON (Binary JSON) is a binary format in which zero or more ordered key/value pairs are stored as a single entity (a so-called document).</para><para>The library uses the following mapping from JSON values types to BSON types:</para><para><table rows="14" cols="4"><row>
<entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>value/range </para></entry><entry thead="yes"><para>BSON type </para></entry><entry thead="yes"><para>marker  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>null </para></entry><entry thead="no"><para>0x0A </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>true</computeroutput>, <computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>boolean </para></entry><entry thead="no"><para>0x08 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-9223372036854775808..-2147483649 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para>0x12 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>-2147483648..2147483647 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para>0x10 </para></entry></row>
<row>
<entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>2147483648..9223372036854775807 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para>0x12 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0..2147483647 </para></entry><entry thead="no"><para>int32 </para></entry><entry thead="no"><para>0x10 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>2147483648..9223372036854775807 </para></entry><entry thead="no"><para>int64 </para></entry><entry thead="no"><para>0x12 </para></entry></row>
<row>
<entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>9223372036854775808..18446744073709551615</para></entry><entry thead="no"><para><ndash/> </para></entry><entry thead="no"><para><ndash/> </para></entry></row>
<row>
<entry thead="no"><para>number_float </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>double </para></entry><entry thead="no"><para>0x01 </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x02 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>document </para></entry><entry thead="no"><para>0x04 </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>document </para></entry><entry thead="no"><para>0x03 </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><emphasis>any value</emphasis> </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x05 </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold>, since only JSON-objects (and things contained therein) can be serialized to BSON. Also, integers larger than 9223372036854775807 cannot be serialized to BSON, and the keys may not contain U+0000, since they are serialized a zero-terminated c-strings.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>out_of_range.407</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>j.is_number_unsigned() &amp;&amp; j.get&lt;std::uint64_t&gt;() &gt; 9223372036854775807</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.409</parametername>
</parameternamelist>
<parameterdescription>
<para>if a key in <computeroutput>j</computeroutput> contains a NULL (U+0000) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.317</parametername>
</parameternamelist>
<parameterdescription>
<para>if <computeroutput>!j.<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" kindref="member">is_object()</ref></computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The input <computeroutput>j</computeroutput> is required to be an object: <computeroutput>j.is_object() == true</computeroutput>.</para></simplesect>
<simplesect kind="note"><para>Any BSON output created via <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" kindref="member">to_bson</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" kindref="member">from_bson</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>BSON serialization as byte vector</para></simplesect>
Linear in the size of the JSON value <emphasis>j</emphasis>.</para><para>{The example shows the serialization of a JSON value to a byte vector in BSON format.,to_bson}</para><para><simplesect kind="see"><para><ulink url="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</ulink> </para></simplesect>
<simplesect kind="see"><para>see from_bson(detail::input_adapter&amp;&amp;, const bool strict) for the analogous deserialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" kindref="member">to_ubjson(const basic_json&amp;, const bool, const bool)</ref> for the related UBJSON format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor(const basic_json&amp;)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack(const basic_json&amp;)</ref> for the related MessagePack format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24504" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24504" bodyend="24509"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a668e4c2ad9808218a25879700f4aef2b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; uint8_t &gt; o)</argsstring>
        <name>to_bson</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; uint8_t &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and forwards the corresponding BSON-representation to the given output_adapter <computeroutput>o</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to convert to BSON. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The output adapter that receives the binary BSON representation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The input <computeroutput>j</computeroutput> shall be an object: <computeroutput>j.is_object() == true</computeroutput> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" kindref="member">to_bson(const basic_json&amp;)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24519" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24519" bodyend="24522"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9ebed178fb7dad1a574bcb7c361fb1b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::to_bson</definition>
        <argsstring>(const basic_json &amp;j, detail::output_adapter&lt; char &gt; o)</argsstring>
        <name>to_bson</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" kindref="compound">detail::output_adapter</ref>&lt; char &gt;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Serializes the given JSON object <computeroutput>j</computeroutput> to BSON and forwards the corresponding BSON-representation to the given output_adapter <computeroutput>o</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON object to convert to BSON. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>o</parametername>
</parameternamelist>
<parameterdescription>
<para>The output adapter that receives the binary BSON representation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The input <computeroutput>j</computeroutput> shall be an object: <computeroutput>j.is_object() == true</computeroutput> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" kindref="member">to_bson(const basic_json&amp;)</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24527" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24527" bodyend="24530"/>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in CBOR format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the CBOR (Concise Binary Object Representation) serialization format.</para><para>The library maps CBOR types to JSON value types as follows:</para><para><table rows="40" cols="3"><row>
<entry thead="yes"><para>CBOR type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>Integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x1A </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x1B </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x20..0x37 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x38 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x39 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x3A </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x3B </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x40..0x57 </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x58 </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x59 </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x5A </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x5B </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x60..0x77 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x78 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x79 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7A </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7B </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7F </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x80..0x97 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x98 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x99 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9A </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9B </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9F </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xA0..0xB7 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xB8 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xB9 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xBA </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xBB </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xBF </para></entry></row>
<row>
<entry thead="no"><para>False </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>0xF4 </para></entry></row>
<row>
<entry thead="no"><para>True </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>0xF5 </para></entry></row>
<row>
<entry thead="no"><para>Null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>0xF6 </para></entry></row>
<row>
<entry thead="no"><para>Half-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xF9 </para></entry></row>
<row>
<entry thead="no"><para>Single-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xFA </para></entry></row>
<row>
<entry thead="no"><para>Double-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xFB </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold> in the sense that not all CBOR types can be converted to a JSON value. The following CBOR types are not supported and will yield parse errors (parse_error.112):<itemizedlist>
<listitem><para>date/time (0xC0..0xC1)</para></listitem><listitem><para>bignum (0xC2..0xC3)</para></listitem><listitem><para>decimal fraction (0xC4)</para></listitem><listitem><para>bigfloat (0xC5)</para></listitem><listitem><para>expected conversions (0xD5..0xD7)</para></listitem><listitem><para>simple values (0xE0..0xF3, 0xF8)</para></listitem><listitem><para>undefined (0xF7)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="warning"><para>CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error.113).</para></simplesect>
<simplesect kind="note"><para>Any CBOR output created <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in CBOR format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how to treat CBOR tags (optional, error by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from CBOR were used in the given input <emphasis>v</emphasis> or if the input is not valid CBOR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in CBOR format to a JSON value.,from_cbor}</para><para><simplesect kind="see"><para><ulink url="http://cbor.io">http://cbor.io</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack(InputType&amp;&amp;, const bool, const bool)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the related UBJSON format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0; added <emphasis>tag_handler</emphasis> parameter since 3.9.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24637" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24637" bodyend="24647"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40aaf9de350d652f0c9055ddab514bd23ea">nlohmann::detail::cbor</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aba4f6fc79cc405fb212ea3d992334e71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in CBOR format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the CBOR (Concise Binary Object Representation) serialization format.</para><para>The library maps CBOR types to JSON value types as follows:</para><para><table rows="40" cols="3"><row>
<entry thead="yes"><para>CBOR type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>Integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x00..0x17 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x18 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x19 </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x1A </para></entry></row>
<row>
<entry thead="no"><para>Unsigned integer </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x1B </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x20..0x37 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x38 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x39 </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x3A </para></entry></row>
<row>
<entry thead="no"><para>Negative integer </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0x3B </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x40..0x57 </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x58 </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x59 </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x5A </para></entry></row>
<row>
<entry thead="no"><para>Byte string </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x5B </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x60..0x77 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x78 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x79 </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7A </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7B </para></entry></row>
<row>
<entry thead="no"><para>UTF-8 string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0x7F </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x80..0x97 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x98 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x99 </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9A </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9B </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x9F </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xA0..0xB7 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xB8 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xB9 </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xBA </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xBB </para></entry></row>
<row>
<entry thead="no"><para>map </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xBF </para></entry></row>
<row>
<entry thead="no"><para>False </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>0xF4 </para></entry></row>
<row>
<entry thead="no"><para>True </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>0xF5 </para></entry></row>
<row>
<entry thead="no"><para>Null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>0xF6 </para></entry></row>
<row>
<entry thead="no"><para>Half-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xF9 </para></entry></row>
<row>
<entry thead="no"><para>Single-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xFA </para></entry></row>
<row>
<entry thead="no"><para>Double-Precision Float </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xFB </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold> in the sense that not all CBOR types can be converted to a JSON value. The following CBOR types are not supported and will yield parse errors (parse_error.112):<itemizedlist>
<listitem><para>date/time (0xC0..0xC1)</para></listitem><listitem><para>bignum (0xC2..0xC3)</para></listitem><listitem><para>decimal fraction (0xC4)</para></listitem><listitem><para>bigfloat (0xC5)</para></listitem><listitem><para>expected conversions (0xD5..0xD7)</para></listitem><listitem><para>simple values (0xE0..0xF3, 0xF8)</para></listitem><listitem><para>undefined (0xF7)</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="warning"><para>CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error.113).</para></simplesect>
<simplesect kind="note"><para>Any CBOR output created <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in CBOR format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tag_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>how to treat CBOR tags (optional, error by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from CBOR were used in the given input <emphasis>v</emphasis> or if the input is not valid CBOR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in CBOR format to a JSON value.,from_cbor}</para><para><simplesect kind="see"><para><ulink url="http://cbor.io">http://cbor.io</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" kindref="member">to_cbor(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack(InputType&amp;&amp;, const bool, const bool)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the related UBJSON format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0; added <emphasis>tag_handler</emphasis> parameter since 3.9.0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24654" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24654" bodyend="24664"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40aaf9de350d652f0c9055ddab514bd23ea">nlohmann::detail::cbor</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a188755c8cda27e2afb03c016c14125d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24669" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24669" bodyend="24675"/>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4a67e47f4bcde55214475f47f8314c1f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true, const cbor_tag_handler_t tag_handler=cbor_tag_handler_t::error)</argsstring>
        <name>from_cbor</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac" kindref="member">cbor_tag_handler_t</ref></type>
          <declname>tag_handler</declname>
          <defval>cbor_tag_handler_t::error</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24680" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24680" bodyend="24691"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40aaf9de350d652f0c9055ddab514bd23ea">nlohmann::detail::cbor</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in MessagePack format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the MessagePack serialization format.</para><para>The library maps MessagePack types to JSON value types as follows:</para><para><table rows="37" cols="3"><row>
<entry thead="yes"><para>MessagePack type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x00..0x7F </para></entry></row>
<row>
<entry thead="no"><para>fixmap </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0x80..0x8F </para></entry></row>
<row>
<entry thead="no"><para>fixarray </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x90..0x9F </para></entry></row>
<row>
<entry thead="no"><para>fixstr </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xA0..0xBF </para></entry></row>
<row>
<entry thead="no"><para>nil </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>0xC0 </para></entry></row>
<row>
<entry thead="no"><para>false </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>0xC2 </para></entry></row>
<row>
<entry thead="no"><para>true </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>0xC3 </para></entry></row>
<row>
<entry thead="no"><para>float 32 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xCA </para></entry></row>
<row>
<entry thead="no"><para>float 64 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xCB </para></entry></row>
<row>
<entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCC </para></entry></row>
<row>
<entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCD </para></entry></row>
<row>
<entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCE </para></entry></row>
<row>
<entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCF </para></entry></row>
<row>
<entry thead="no"><para>int 8 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD0 </para></entry></row>
<row>
<entry thead="no"><para>int 16 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD1 </para></entry></row>
<row>
<entry thead="no"><para>int 32 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD2 </para></entry></row>
<row>
<entry thead="no"><para>int 64 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD3 </para></entry></row>
<row>
<entry thead="no"><para>str 8 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xD9 </para></entry></row>
<row>
<entry thead="no"><para>str 16 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xDA </para></entry></row>
<row>
<entry thead="no"><para>str 32 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xDB </para></entry></row>
<row>
<entry thead="no"><para>array 16 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0xDC </para></entry></row>
<row>
<entry thead="no"><para>array 32 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0xDD </para></entry></row>
<row>
<entry thead="no"><para>map 16 </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xDE </para></entry></row>
<row>
<entry thead="no"><para>map 32 </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xDF </para></entry></row>
<row>
<entry thead="no"><para>bin 8 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC4 </para></entry></row>
<row>
<entry thead="no"><para>bin 16 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC5 </para></entry></row>
<row>
<entry thead="no"><para>bin 32 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC6 </para></entry></row>
<row>
<entry thead="no"><para>ext 8 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC7 </para></entry></row>
<row>
<entry thead="no"><para>ext 16 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC8 </para></entry></row>
<row>
<entry thead="no"><para>ext 32 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC9 </para></entry></row>
<row>
<entry thead="no"><para>fixext 1 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD4 </para></entry></row>
<row>
<entry thead="no"><para>fixext 2 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD5 </para></entry></row>
<row>
<entry thead="no"><para>fixext 4 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD6 </para></entry></row>
<row>
<entry thead="no"><para>fixext 8 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD7 </para></entry></row>
<row>
<entry thead="no"><para>fixext 16 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD8 </para></entry></row>
<row>
<entry thead="no"><para>negative fixint </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xE0-0xFF </para></entry></row>
</table>
<simplesect kind="note"><para>Any MessagePack output created <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in MessagePack format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from MessagePack were used in the given input <emphasis>i</emphasis> or if the input is not valid MessagePack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in MessagePack format to a JSON value.,from_msgpack}</para><para><simplesect kind="see"><para><ulink url="http://msgpack.org">http://msgpack.org</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the related UBJSON format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" kindref="member">from_bson(InputType&amp;&amp;, const bool, const bool)</ref> for the related BSON format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24781" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24781" bodyend="24790"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40ac40d516627022a54003ac2b74a82688a">nlohmann::detail::msgpack</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a94dbeb08bcd13821512957dcbf3f00bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in MessagePack format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the MessagePack serialization format.</para><para>The library maps MessagePack types to JSON value types as follows:</para><para><table rows="37" cols="3"><row>
<entry thead="yes"><para>MessagePack type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>first byte  </para></entry></row>
<row>
<entry thead="no"><para>positive fixint </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0x00..0x7F </para></entry></row>
<row>
<entry thead="no"><para>fixmap </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0x80..0x8F </para></entry></row>
<row>
<entry thead="no"><para>fixarray </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0x90..0x9F </para></entry></row>
<row>
<entry thead="no"><para>fixstr </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xA0..0xBF </para></entry></row>
<row>
<entry thead="no"><para>nil </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para>0xC0 </para></entry></row>
<row>
<entry thead="no"><para>false </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para>0xC2 </para></entry></row>
<row>
<entry thead="no"><para>true </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para>0xC3 </para></entry></row>
<row>
<entry thead="no"><para>float 32 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xCA </para></entry></row>
<row>
<entry thead="no"><para>float 64 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para>0xCB </para></entry></row>
<row>
<entry thead="no"><para>uint 8 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCC </para></entry></row>
<row>
<entry thead="no"><para>uint 16 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCD </para></entry></row>
<row>
<entry thead="no"><para>uint 32 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCE </para></entry></row>
<row>
<entry thead="no"><para>uint 64 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para>0xCF </para></entry></row>
<row>
<entry thead="no"><para>int 8 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD0 </para></entry></row>
<row>
<entry thead="no"><para>int 16 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD1 </para></entry></row>
<row>
<entry thead="no"><para>int 32 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD2 </para></entry></row>
<row>
<entry thead="no"><para>int 64 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xD3 </para></entry></row>
<row>
<entry thead="no"><para>str 8 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xD9 </para></entry></row>
<row>
<entry thead="no"><para>str 16 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xDA </para></entry></row>
<row>
<entry thead="no"><para>str 32 </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para>0xDB </para></entry></row>
<row>
<entry thead="no"><para>array 16 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0xDC </para></entry></row>
<row>
<entry thead="no"><para>array 32 </para></entry><entry thead="no"><para>array </para></entry><entry thead="no"><para>0xDD </para></entry></row>
<row>
<entry thead="no"><para>map 16 </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xDE </para></entry></row>
<row>
<entry thead="no"><para>map 32 </para></entry><entry thead="no"><para>object </para></entry><entry thead="no"><para>0xDF </para></entry></row>
<row>
<entry thead="no"><para>bin 8 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC4 </para></entry></row>
<row>
<entry thead="no"><para>bin 16 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC5 </para></entry></row>
<row>
<entry thead="no"><para>bin 32 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC6 </para></entry></row>
<row>
<entry thead="no"><para>ext 8 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC7 </para></entry></row>
<row>
<entry thead="no"><para>ext 16 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC8 </para></entry></row>
<row>
<entry thead="no"><para>ext 32 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xC9 </para></entry></row>
<row>
<entry thead="no"><para>fixext 1 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD4 </para></entry></row>
<row>
<entry thead="no"><para>fixext 2 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD5 </para></entry></row>
<row>
<entry thead="no"><para>fixext 4 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD6 </para></entry></row>
<row>
<entry thead="no"><para>fixext 8 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD7 </para></entry></row>
<row>
<entry thead="no"><para>fixext 16 </para></entry><entry thead="no"><para>binary </para></entry><entry thead="no"><para>0xD8 </para></entry></row>
<row>
<entry thead="no"><para>negative fixint </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para>0xE0-0xFF </para></entry></row>
</table>
<simplesect kind="note"><para>Any MessagePack output created <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack</ref> can be successfully parsed by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack</ref>.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in MessagePack format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if unsupported features from MessagePack were used in the given input <emphasis>i</emphasis> or if the input is not valid MessagePack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string was expected as map key, but not found</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in MessagePack format to a JSON value.,from_msgpack}</para><para><simplesect kind="see"><para><ulink url="http://msgpack.org">http://msgpack.org</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" kindref="member">to_msgpack(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the related UBJSON format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" kindref="member">from_bson(InputType&amp;&amp;, const bool, const bool)</ref> for the related BSON format</para></simplesect>
<simplesect kind="since"><para>version 2.0.9; parameter <emphasis>start_index</emphasis> since 2.1.1; changed to consume input adapters, removed start_index parameter, and added <emphasis>strict</emphasis> parameter since 3.0.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24797" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24797" bodyend="24806"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40ac40d516627022a54003ac2b74a82688a">nlohmann::detail::msgpack</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a0d69d3102639759d5202a6f764760d23" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24812" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24812" bodyend="24817"/>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a84b3d89de8e774a2609dc4c0a1273f62" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_msgpack</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24821" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24821" bodyend="24831"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40ac40d516627022a54003ac2b74a82688a">nlohmann::detail::msgpack</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in UBJSON format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the UBJSON (Universal Binary JSON) serialization format.</para><para>The library maps UBJSON types to JSON value types as follows:</para><para><table rows="17" cols="3"><row>
<entry thead="yes"><para>UBJSON type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>marker  </para></entry></row>
<row>
<entry thead="no"><para>no-op </para></entry><entry thead="no"><para><emphasis>no value, next value is read</emphasis> </para></entry><entry thead="no"><para><computeroutput>N</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Z</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>false </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para><computeroutput>F</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>true </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para><computeroutput>T</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>float32 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para><computeroutput>d</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>float64 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para><computeroutput>D</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>uint8 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para><computeroutput>U</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int8 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>i</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int16 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>I</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int32 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>l</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int64 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>L</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>high-precision number </para></entry><entry thead="no"><para>number_integer, number_unsigned, or number_float - depends on number string </para></entry><entry thead="no"><para>&apos;H&apos; </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>S</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>char </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>C</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array (optimized values are supported) </para></entry><entry thead="no"><para><computeroutput>[</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>object (optimized values are supported) </para></entry><entry thead="no"><para><computeroutput>{</computeroutput> </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any UBJSON value can be converted to a JSON value.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in UBJSON format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if a parse error occurs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string could not be parsed successfully</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in UBJSON format to a JSON value.,from_ubjson}</para><para><simplesect kind="see"><para><ulink url="http://ubjson.org">http://ubjson.org</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" kindref="member">to_ubjson(const basic_json&amp;, const bool, const bool)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack(InputType&amp;&amp;, const bool, const bool)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" kindref="member">from_bson(InputType&amp;&amp;, const bool, const bool)</ref> for the related BSON format</para></simplesect>
<simplesect kind="since"><para>version 3.1.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24898" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24898" bodyend="24907"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a4537f20910e85437f6d07701864084e8">nlohmann::detail::ubjson</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9dbb422350fed520ce8c1ca8762c0251" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>create a JSON value from an input in UBJSON format </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the UBJSON (Universal Binary JSON) serialization format.</para><para>The library maps UBJSON types to JSON value types as follows:</para><para><table rows="17" cols="3"><row>
<entry thead="yes"><para>UBJSON type </para></entry><entry thead="yes"><para>JSON value type </para></entry><entry thead="yes"><para>marker  </para></entry></row>
<row>
<entry thead="no"><para>no-op </para></entry><entry thead="no"><para><emphasis>no value, next value is read</emphasis> </para></entry><entry thead="no"><para><computeroutput>N</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>null</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Z</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>false </para></entry><entry thead="no"><para><computeroutput>false</computeroutput> </para></entry><entry thead="no"><para><computeroutput>F</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>true </para></entry><entry thead="no"><para><computeroutput>true</computeroutput> </para></entry><entry thead="no"><para><computeroutput>T</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>float32 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para><computeroutput>d</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>float64 </para></entry><entry thead="no"><para>number_float </para></entry><entry thead="no"><para><computeroutput>D</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>uint8 </para></entry><entry thead="no"><para>number_unsigned </para></entry><entry thead="no"><para><computeroutput>U</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int8 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>i</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int16 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>I</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int32 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>l</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>int64 </para></entry><entry thead="no"><para>number_integer </para></entry><entry thead="no"><para><computeroutput>L</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>high-precision number </para></entry><entry thead="no"><para>number_integer, number_unsigned, or number_float - depends on number string </para></entry><entry thead="no"><para>&apos;H&apos; </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>S</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>char </para></entry><entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>C</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>array (optimized values are supported) </para></entry><entry thead="no"><para><computeroutput>[</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para>object (optimized values are supported) </para></entry><entry thead="no"><para><computeroutput>{</computeroutput> </para></entry></row>
</table>
<simplesect kind="note"><para>The mapping is <bold>complete</bold> in the sense that any UBJSON value can be converted to a JSON value.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in UBJSON format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.110</parametername>
</parameternamelist>
<parameterdescription>
<para>if the given input ends prematurely or the end of file was not reached when <emphasis>strict</emphasis> was set to true </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.112</parametername>
</parameternamelist>
<parameterdescription>
<para>if a parse error occurs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.113</parametername>
</parameternamelist>
<parameterdescription>
<para>if a string could not be parsed successfully</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in UBJSON format to a JSON value.,from_ubjson}</para><para><simplesect kind="see"><para><ulink url="http://ubjson.org">http://ubjson.org</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" kindref="member">to_ubjson(const basic_json&amp;, const bool, const bool)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack(InputType&amp;&amp;, const bool, const bool)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" kindref="member">from_bson(InputType&amp;&amp;, const bool, const bool)</ref> for the related BSON format</para></simplesect>
<simplesect kind="since"><para>version 3.1.0; added <emphasis>allow_exceptions</emphasis> parameter since 3.2.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24914" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24914" bodyend="24923"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a4537f20910e85437f6d07701864084e8">nlohmann::detail::ubjson</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab6eeda23c34cee79d8d72f1a8691a8de" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24928" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24928" bodyend="24933"/>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a47201396899371881a46562bffb922da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_ubjson</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24937" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24937" bodyend="24947"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a4537f20910e85437f6d07701864084e8">nlohmann::detail::ubjson</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(InputType &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type>InputType &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a JSON value from an input in BSON format. </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the BSON (Binary JSON) serialization format.</para><para>The library maps BSON record types to JSON value types as follows:</para><para><table rows="21" cols="3"><row>
<entry thead="yes"><para>BSON type </para></entry><entry thead="yes"><para>BSON marker byte </para></entry><entry thead="yes"><para>JSON value type  </para></entry></row>
<row>
<entry thead="no"><para>double </para></entry><entry thead="no"><para>0x01 </para></entry><entry thead="no"><para>number_float </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para>0x02 </para></entry><entry thead="no"><para>string </para></entry></row>
<row>
<entry thead="no"><para>document </para></entry><entry thead="no"><para>0x03 </para></entry><entry thead="no"><para>object </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>0x04 </para></entry><entry thead="no"><para>array </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x05 </para></entry><entry thead="no"><para>binary </para></entry></row>
<row>
<entry thead="no"><para>undefined </para></entry><entry thead="no"><para>0x06 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>ObjectId </para></entry><entry thead="no"><para>0x07 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para>0x08 </para></entry><entry thead="no"><para>boolean </para></entry></row>
<row>
<entry thead="no"><para>UTC Date-Time </para></entry><entry thead="no"><para>0x09 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para>0x0A </para></entry><entry thead="no"><para>null </para></entry></row>
<row>
<entry thead="no"><para>Regular Expr. </para></entry><entry thead="no"><para>0x0B </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>DB Pointer </para></entry><entry thead="no"><para>0x0C </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>JavaScript Code </para></entry><entry thead="no"><para>0x0D </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>Symbol </para></entry><entry thead="no"><para>0x0E </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>JavaScript Code </para></entry><entry thead="no"><para>0x0F </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>int32 </para></entry><entry thead="no"><para>0x10 </para></entry><entry thead="no"><para>number_integer </para></entry></row>
<row>
<entry thead="no"><para>Timestamp </para></entry><entry thead="no"><para>0x11 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>128-bit decimal float </para></entry><entry thead="no"><para>0x13 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>Max Key </para></entry><entry thead="no"><para>0x7F </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>Min Key </para></entry><entry thead="no"><para>0xFF </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold>. The unsupported mappings are indicated in the table above.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in BSON format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.114</parametername>
</parameternamelist>
<parameterdescription>
<para>if an unsupported BSON record type is encountered</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in BSON format to a JSON value.,from_bson}</para><para><simplesect kind="see"><para><ulink url="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" kindref="member">to_bson(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack(InputType&amp;&amp;, const bool, const bool)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the related UBJSON format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25012" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25012" bodyend="25021"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a0b6879b186bfb2b1ec65d2460e4eccd4">nlohmann::detail::bson</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a4118d0ec23d9eeafc236b9524d220e94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(IteratorType first, IteratorType last, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a JSON value from an input in BSON format. </para>        </briefdescription>
        <detaileddescription>
<para>Deserializes a given input <emphasis>i</emphasis> to a JSON value using the BSON (Binary JSON) serialization format.</para><para>The library maps BSON record types to JSON value types as follows:</para><para><table rows="21" cols="3"><row>
<entry thead="yes"><para>BSON type </para></entry><entry thead="yes"><para>BSON marker byte </para></entry><entry thead="yes"><para>JSON value type  </para></entry></row>
<row>
<entry thead="no"><para>double </para></entry><entry thead="no"><para>0x01 </para></entry><entry thead="no"><para>number_float </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para>0x02 </para></entry><entry thead="no"><para>string </para></entry></row>
<row>
<entry thead="no"><para>document </para></entry><entry thead="no"><para>0x03 </para></entry><entry thead="no"><para>object </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para>0x04 </para></entry><entry thead="no"><para>array </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para>0x05 </para></entry><entry thead="no"><para>binary </para></entry></row>
<row>
<entry thead="no"><para>undefined </para></entry><entry thead="no"><para>0x06 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>ObjectId </para></entry><entry thead="no"><para>0x07 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para>0x08 </para></entry><entry thead="no"><para>boolean </para></entry></row>
<row>
<entry thead="no"><para>UTC Date-Time </para></entry><entry thead="no"><para>0x09 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para>0x0A </para></entry><entry thead="no"><para>null </para></entry></row>
<row>
<entry thead="no"><para>Regular Expr. </para></entry><entry thead="no"><para>0x0B </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>DB Pointer </para></entry><entry thead="no"><para>0x0C </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>JavaScript Code </para></entry><entry thead="no"><para>0x0D </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>Symbol </para></entry><entry thead="no"><para>0x0E </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>JavaScript Code </para></entry><entry thead="no"><para>0x0F </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>int32 </para></entry><entry thead="no"><para>0x10 </para></entry><entry thead="no"><para>number_integer </para></entry></row>
<row>
<entry thead="no"><para>Timestamp </para></entry><entry thead="no"><para>0x11 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>128-bit decimal float </para></entry><entry thead="no"><para>0x13 </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>Max Key </para></entry><entry thead="no"><para>0x7F </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
<row>
<entry thead="no"><para>Min Key </para></entry><entry thead="no"><para>0xFF </para></entry><entry thead="no"><para>still unsupported </para></entry></row>
</table>
<simplesect kind="warning"><para>The mapping is <bold>incomplete</bold>. The unsupported mappings are indicated in the table above.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>an input in BSON format convertible to an input adapter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strict</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to expect the input to be consumed until EOF (true by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow_exceptions</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to throw exceptions in case of a parse error (optional, true by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>deserialized JSON value; in case of a parse error and <emphasis>allow_exceptions</emphasis> set to <computeroutput>false</computeroutput>, the return value will be <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" kindref="member">value_t::discarded</ref>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.114</parametername>
</parameternamelist>
<parameterdescription>
<para>if an unsupported BSON record type is encountered</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the input <emphasis>i</emphasis>.</para><para>{The example shows the deserialization of a byte vector in BSON format to a JSON value.,from_bson}</para><para><simplesect kind="see"><para><ulink url="http://bsonspec.org/spec.html">http://bsonspec.org/spec.html</ulink> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" kindref="member">to_bson(const basic_json&amp;)</ref> for the analogous serialization </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" kindref="member">from_cbor(InputType&amp;&amp;, const bool, const bool, const cbor_tag_handler_t)</ref> for the related CBOR format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" kindref="member">from_msgpack(InputType&amp;&amp;, const bool, const bool)</ref> for the related MessagePack format </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" kindref="member">from_ubjson(InputType&amp;&amp;, const bool, const bool)</ref> for the related UBJSON format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25028" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25028" bodyend="25037"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a0b6879b186bfb2b1ec65d2460e4eccd4">nlohmann::detail::bson</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">nlohmann::detail::input_adapter</references>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ae2612581e4788ddffc2f45d5e4cc04fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(const T *ptr, std::size_t len, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25042" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25042" bodyend="25047"/>
        <references refid="d5/db8/json_8hpp_1af0469b867b0ec3a1c4b229ce9d087620" compoundref="d5/db8/json_8hpp" startline="1246">JSON_HEDLEY_DEPRECATED_FOR</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2afe89884edf72412a0624982324755d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</definition>
        <argsstring>(detail::span_input_adapter &amp;&amp;i, const bool strict=true, const bool allow_exceptions=true)</argsstring>
        <name>from_bson</name>
        <param>
          <type><ref refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" kindref="compound">detail::span_input_adapter</ref> &amp;&amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>strict</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25051" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25051" bodyend="25061"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a0b6879b186bfb2b1ec65d2460e4eccd4">nlohmann::detail::bson</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792">nlohmann::detail::strict</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Pointer functions</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a0d3deaa73b3644b4da3f8ef3172cd8d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. Similar to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5" kindref="member">operator[]</ref>(const typename object_t::key_type&amp;), <computeroutput>null</computeroutput> values are created in arrays and objects if necessary.</para><para>In particular:<itemizedlist>
<listitem><para>If the JSON pointer points to an object key that does not exist, it is created an filled with a <computeroutput>null</computeroutput> value before a reference to it is returned.</para></listitem><listitem><para>If the JSON pointer points to an array index that does not exist, it is created an filled with a <computeroutput>null</computeroutput> value before a reference to it is returned. All indices between the current maximum and the given index are also filled with <computeroutput>null</computeroutput>.</para></listitem><listitem><para>The special value <computeroutput>-</computeroutput> is treated as a synonym for the index past the end.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
Constant.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved</para></parameterdescription>
</parameteritem>
</parameterlist>
{The behavior is shown in the example.,operatorjson_pointer}</para><para><simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25104" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25104" bodyend="25107"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a577512ee6b7f030e8872b4d29fa5c3e5" compoundref="d5/db8/json_8hpp" startline="12557" endline="12608">nlohmann::json_pointer&lt; BasicJsonType &gt;::get_unchecked</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a0a691c29eb7c4acd91ccb498a79cd3ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Uses a JSON pointer to retrieve a reference to the respective JSON value. No bound checking is performed. The function does not change the JSON value; no <computeroutput>null</computeroutput> values are created. In particular, the special value <computeroutput>-</computeroutput> yields an exception.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to the desired element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
Constant.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index begins with &apos;0&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index was not a number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer can not be resolved</para></parameterdescription>
</parameteritem>
</parameterlist>
{The behavior is shown in the example.,operatorjson_pointer_const}</para><para><simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25132" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25132" bodyend="25135"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a577512ee6b7f030e8872b4d29fa5c3e5" compoundref="d5/db8/json_8hpp" startline="12557" endline="12608">nlohmann::json_pointer&lt; BasicJsonType &gt;::get_unchecked</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aa014a978f8b6c085db8825faa8dad320" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr)</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reference to the element at with specified JSON pointer <emphasis>ptr</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to the desired element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> begins with &apos;0&apos;. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is not a number. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is out of range. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used in the passed JSON pointer <emphasis>ptr</emphasis>. As <computeroutput>at</computeroutput> provides checked access (and no elements are implicitly inserted), the index &apos;-&apos; is always invalid. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer describes a key of an object which cannot be found. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer <emphasis>ptr</emphasis> can not be resolved. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>version 2.0.0</para></simplesect>
{The behavior is shown in the example.,at_json_pointer} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25175" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25175" bodyend="25178"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a366d68a67e40d86676d3bdb52e167294" compoundref="d5/db8/json_8hpp" startline="12616" endline="12650">nlohmann::json_pointer&lt; BasicJsonType &gt;::get_checked</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8284b9c1d4d0830151eaa000f907b2e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" kindref="member">const_reference</ref></type>
        <definition>const_reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</definition>
        <argsstring>(const json_pointer &amp;ptr) const</argsstring>
        <name>at</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" kindref="member">json_pointer</ref> &amp;</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>access specified element via JSON Pointer </para>        </briefdescription>
        <detaileddescription>
<para>Returns a const reference to the element at with specified JSON pointer <emphasis>ptr</emphasis>, with bounds checking.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON pointer to the desired element</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the element pointed to by <emphasis>ptr</emphasis> </para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.106</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> begins with &apos;0&apos;. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.109</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is not a number. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index in the passed JSON pointer <emphasis>ptr</emphasis> is out of range. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.402</parametername>
</parameternamelist>
<parameterdescription>
<para>if the array index &apos;-&apos; is used in the passed JSON pointer <emphasis>ptr</emphasis>. As <computeroutput>at</computeroutput> provides checked access (and no elements are implicitly inserted), the index &apos;-&apos; is always invalid. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer describes a key of an object which cannot be found. See example below.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.404</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON pointer <emphasis>ptr</emphasis> can not be resolved. See example below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Strong guarantee: if an exception is thrown, there are no changes in the JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>version 2.0.0</para></simplesect>
{The behavior is shown in the example.,at_json_pointer_const} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25218" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25218" bodyend="25221"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a366d68a67e40d86676d3bdb52e167294" compoundref="d5/db8/json_8hpp" startline="12616" endline="12650">nlohmann::json_pointer&lt; BasicJsonType &gt;::get_checked</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::flatten</definition>
        <argsstring>() const</argsstring>
        <name>flatten</name>
        <briefdescription>
<para>return flattened JSON value </para>        </briefdescription>
        <detaileddescription>
<para>The function creates a JSON object whose keys are JSON pointers (see <ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>) and whose values are all primitive. The original JSON value can be restored using the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten()</ref> function.</para><para><simplesect kind="return"><para>an object that maps JSON pointers to primitive values</para></simplesect>
<simplesect kind="note"><para>Empty objects and arrays are flattened to <computeroutput>null</computeroutput> and will not be reconstructed correctly by the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten()</ref> function.</para></simplesect>
Linear in the size the JSON value.</para><para>{The following code shows how a JSON object is flattened to an object whose keys consist of JSON pointers.,flatten}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten()</ref> for the reverse function</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25245" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25245" bodyend="25250"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1ab0d7759d0caa6a0c0187916da28e6ee7" compoundref="d5/db8/json_8hpp" startline="12893" endline="12943">nlohmann::json_pointer&lt; BasicJsonType &gt;::flatten</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::unflatten</definition>
        <argsstring>() const</argsstring>
        <name>unflatten</name>
        <briefdescription>
<para>unflatten a previously flattened JSON value </para>        </briefdescription>
        <detaileddescription>
<para>The function restores the arbitrary nesting of a JSON value that has been flattened before using the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6" kindref="member">flatten()</ref> function. The JSON value must meet certain constraints:<orderedlist>
<listitem><para>The value must be an object.</para></listitem><listitem><para>The keys must be JSON pointers (see <ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901</ulink>)</para></listitem><listitem><para>The mapped values must be primitive JSON types.</para></listitem></orderedlist>
</para><para><simplesect kind="return"><para>the original JSON from a flattened version</para></simplesect>
<simplesect kind="note"><para>Empty objects and arrays are flattened by <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6" kindref="member">flatten()</ref> to <computeroutput>null</computeroutput> values and can not unflattened to their original type. Apart from this example, for a JSON value <computeroutput>j</computeroutput>, the following is always true: <computeroutput>j == j.flatten().<ref refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" kindref="member">unflatten()</ref></computeroutput>.</para></simplesect>
Linear in the size the JSON value.</para><para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.314</parametername>
</parameternamelist>
<parameterdescription>
<para>if value is not an object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_error.315</parametername>
</parameternamelist>
<parameterdescription>
<para>if object values are not primitive</para></parameterdescription>
</parameteritem>
</parameterlist>
{The following code shows how a flattened JSON object is unflattened into the original nested JSON object.,unflatten}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6" kindref="member">flatten()</ref> for the reverse function</para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25282" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25282" bodyend="25285"/>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a920065221e3c81676c3211c100d024a7" compoundref="d5/db8/json_8hpp" startline="12956" endline="12981">nlohmann::json_pointer&lt; BasicJsonType &gt;::unflatten</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Patch functions</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</definition>
        <argsstring>(const basic_json &amp;source, const basic_json &amp;target, const std::string &amp;path=&quot;&quot;)</argsstring>
        <name>diff</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>creates a diff as a JSON patch </para>        </briefdescription>
        <detaileddescription>
<para>Creates a <ulink url="http://jsonpatch.com">JSON Patch</ulink> so that value <emphasis>source</emphasis> can be changed into the value <emphasis>target</emphasis> by calling <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" kindref="member">patch</ref> function.</para><para><simplesect kind="invariant"><para>For two JSON values <emphasis>source</emphasis> and <emphasis>target</emphasis>, the following code yields always <computeroutput>true</computeroutput>: <programlisting><codeline><highlight class="normal">source.patch(<ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" kindref="member">diff</ref>(source,<sp/>target))<sp/>==<sp/>target;</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="note"><para>Currently, only <computeroutput>remove</computeroutput>, <computeroutput>add</computeroutput>, and <computeroutput>replace</computeroutput> operations are generated.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to compare from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">target</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to compare against </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>helper value to create JSON pointers</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a JSON patch to convert the <emphasis>source</emphasis> to <emphasis>target</emphasis> </para></simplesect>
Linear in the lengths of <emphasis>source</emphasis> and <emphasis>target</emphasis>.</para><para>{The following code shows how a JSON patch is created as a diff for two JSON values.,diff}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" kindref="member">patch</ref> <ndash/> apply a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" kindref="member">patch</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb" kindref="member">merge_patch</ref> <ndash/> apply a JSON Merge Patch</para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</ulink></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25641" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25641" bodyend="25763"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" compoundref="d5/db8/json_8hpp" startline="21628" endline="21633">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" compoundref="d5/db8/json_8hpp" startline="21668" endline="21673">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbegin</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" compoundref="d5/db8/json_8hpp" startline="21739" endline="21744">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cend</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" compoundref="d5/db8/json_8hpp" startline="21699" endline="21704">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a9d486a036924098fe1a77de14d23f56c" compoundref="d5/db8/json_8hpp" startline="2551" endline="2556">nlohmann::detail::escape</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" compoundref="d5/db8/json_8hpp" startline="21474" endline="21484">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" compoundref="d5/db8/json_8hpp" startline="22689" endline="22705">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" compoundref="d5/db8/json_8hpp" startline="22375" endline="22395">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" compoundref="d5/db8/json_8hpp" startline="22156" endline="22184">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size</references>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" compoundref="d5/db8/json_8hpp" startline="19435" endline="19438">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::patch</definition>
        <argsstring>(const basic_json &amp;json_patch) const</argsstring>
        <name>patch</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>json_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON patch </para>        </briefdescription>
        <detaileddescription>
<para><ulink url="http://jsonpatch.com">JSON Patch</ulink> defines a JSON document structure for expressing a sequence of operations to apply to a JSON) document. With this function, a JSON Patch is applied to the current JSON value by executing all operations from the patch.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">json_patch</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON patch document </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>patched document</para></simplesect>
<simplesect kind="note"><para>The application of a patch is atomic: Either all operations succeed and the patched document is returned or an exception is thrown. In any case, the original value is not changed: the patch is applied to a copy of the value.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>parse_error.104</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON patch does not consist of an array of objects</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parse_error.105</parametername>
</parameternamelist>
<parameterdescription>
<para>if the JSON patch is malformed (e.g., mandatory attributes are missing); example: <computeroutput>&quot;operation add must have member path&quot;</computeroutput></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.401</parametername>
</parameternamelist>
<parameterdescription>
<para>if an array index is out of range.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.403</parametername>
</parameternamelist>
<parameterdescription>
<para>if a JSON pointer inside the patch could not be resolved successfully in the current JSON value; example: <computeroutput>&quot;key baz not
found&quot;</computeroutput></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_of_range.405</parametername>
</parameternamelist>
<parameterdescription>
<para>if JSON pointer has no parent (&quot;add&quot;, &quot;remove&quot;, &quot;move&quot;)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other_error.501</parametername>
</parameternamelist>
<parameterdescription>
<para>if &quot;test&quot; operation was unsuccessful</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the size of the JSON value and the length of the JSON patch. As usually only a fraction of the JSON value is affected by the patch, the complexity can usually be neglected.</para><para>{The following code shows how a JSON patch is applied to a value.,patch}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" kindref="member">diff</ref> <ndash/> <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" kindref="member">create</ref> a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" kindref="member">patch</ref> by comparing two JSON values</para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6902">RFC 6902 (JSON Patch)</ulink> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc6901">RFC 6901 (JSON Pointer)</ulink></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25343" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25343" bodyend="25605"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1ae28e4b79b9d4fac9e6dca29f47f946fa" compoundref="d5/db8/json_8hpp" startline="12420" endline="12461">nlohmann::json_pointer&lt; BasicJsonType &gt;::array_index</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" compoundref="d5/db8/json_8hpp" startline="20448" endline="20467">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::at</references>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a213bc67c32a30c68ac6bf06f5195d482" compoundref="d5/db8/json_8hpp" startline="12357" endline="12365">nlohmann::json_pointer&lt; BasicJsonType &gt;::back</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" compoundref="d5/db8/json_8hpp" startline="21628" endline="21633">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</references>
        <references refid="d5/d1a/classnlohmann_1_1detail_1_1parse__error_1ae77bd584cb9101140790219af7fec1ce" compoundref="d5/db8/json_8hpp" startline="2782" endline="2787">nlohmann::detail::parse_error::create</references>
        <references refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range_1a238f1bda3b6c92b5970fbf9187ccd325" compoundref="d5/db8/json_8hpp" startline="2964" endline="2968">nlohmann::detail::out_of_range::create</references>
        <references refid="d5/d1b/classnlohmann_1_1detail_1_1other__error_1a3a25fa67a0ec36b5d36cbc4424eb901d" compoundref="d5/db8/json_8hpp" startline="3003" endline="3007">nlohmann::detail::other_error::create</references>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a649252bda4a2e75a0915b11a25d8bcc3" compoundref="d5/db8/json_8hpp" startline="12404" endline="12407">nlohmann::json_pointer&lt; BasicJsonType &gt;::empty</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" compoundref="d5/db8/json_8hpp" startline="21699" endline="21704">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" compoundref="d5/db8/json_8hpp" startline="21178" endline="21239">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::erase</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" compoundref="d5/db8/json_8hpp" startline="21474" endline="21484">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::find</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" compoundref="d5/db8/json_8hpp" startline="22689" endline="22705">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::insert</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" compoundref="d5/db8/json_8hpp" startline="19696" endline="19699">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_array</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" compoundref="d5/db8/json_8hpp" startline="19674" endline="19677">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
        <references refid="d5/db8/json_8hpp_1a5478b7564e65634cc69432ed3cb6490e" compoundref="d5/db8/json_8hpp" startline="2266">JSON_INTERNAL_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="da/de8/classnlohmann_1_1json__pointer_1a4b1ee4d511ca195bed896a3da47e264c" compoundref="d5/db8/json_8hpp" startline="12333" endline="12341">nlohmann::json_pointer&lt; BasicJsonType &gt;::pop_back</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" compoundref="d5/db8/json_8hpp" startline="22375" endline="22395">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::push_back</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c">nlohmann::detail::replace</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" compoundref="d5/db8/json_8hpp" startline="22156" endline="22184">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::size</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>JSON Merge Patch functions</header>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::merge_patch</definition>
        <argsstring>(const basic_json &amp;apply_patch)</argsstring>
        <name>merge_patch</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &amp;</type>
          <declname>apply_patch</declname>
        </param>
        <briefdescription>
<para>applies a JSON Merge Patch </para>        </briefdescription>
        <detaileddescription>
<para>The merge patch format is primarily intended for use with the HTTP PATCH method as a means of describing a set of modifications to a target resource&apos;s content. This function applies a merge patch to the current JSON value.</para><para>The function implements the following algorithm from Section 2 of <ulink url="https://tools.ietf.org/html/rfc7396">RFC 7396 (JSON Merge Patch)</ulink>:</para><para><programlisting><codeline><highlight class="normal">define<sp/>MergePatch(Target,<sp/>Patch):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>Patch<sp/>is<sp/>an<sp/>Object:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>Target<sp/>is<sp/>not<sp/>an<sp/>Object:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Target<sp/>=<sp/>{}<sp/>//<sp/>Ignore<sp/>the<sp/>contents<sp/>and<sp/>set<sp/>it<sp/>to<sp/>an<sp/>empty<sp/>Object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>each<sp/>Name/Value<sp/>pair<sp/>in<sp/>Patch:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>Value<sp/>is<sp/>null:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>Name<sp/>exists<sp/>in<sp/>Target:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove<sp/>the<sp/>Name/Value<sp/>pair<sp/>from<sp/>Target</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Target[Name]<sp/>=<sp/>MergePatch(Target[Name],<sp/>Value)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Target</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>Patch</highlight></codeline>
</programlisting></para><para>Thereby, <computeroutput>Target</computeroutput> is the current object; that is, the patch is applied to the current value.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">apply_patch</parametername>
</parameternamelist>
<parameterdescription>
<para>the patch to apply</para></parameterdescription>
</parameteritem>
</parameterlist>
Linear in the lengths of <emphasis>patch</emphasis>.</para><para>{The following code shows how a JSON Merge Patch is applied to a JSON document.,merge_patch}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" kindref="member">patch</ref> <ndash/> apply a JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" kindref="member">patch</ref> </para></simplesect>
<simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc7396">RFC 7396 (JSON Merge Patch)</ulink></para></simplesect>
<simplesect kind="since"><para>version 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="25816" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="25816" bodyend="25840"/>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" compoundref="d5/db8/json_8hpp" startline="21628" endline="21633">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::begin</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" compoundref="d5/db8/json_8hpp" startline="21699" endline="21704">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::end</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" compoundref="d5/db8/json_8hpp" startline="19674" endline="19677">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object</references>
        <references refid="d5/db8/json_8hpp_1a0643bd74c2dc6f0e4e420b8190ea8f0f" compoundref="d5/db8/json_8hpp" startline="2336">NLOHMANN_BASIC_JSON_TPL_DECLARATION</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" prot="private" static="no">
        <type><ref refid="d5/db8/json_8hpp_1a80b7254e63f199a1f656f07ae551f632" kindref="member">NLOHMANN_BASIC_JSON_TPL</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json_t =  NLOHMANN_BASIC_JSON_TPL</definition>
        <argsstring></argsstring>
        <name>basic_json_t</name>
        <briefdescription>
<para>workaround type for MSVC </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17216" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ae2cb9166f46abfc6d3910e076410f1ca" prot="private" static="no">
        <type>::<ref refid="d2/d2c/classnlohmann_1_1detail_1_1primitive__iterator__t" kindref="compound">nlohmann::detail::primitive_iterator_t</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::primitive_iterator_t =  ::nlohmann::detail::primitive_iterator_t</definition>
        <argsstring></argsstring>
        <name>primitive_iterator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17235" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1abe6f1016de5097691cbfdbb989267718" prot="private" static="no">
        <type>::<ref refid="d7/d10/structnlohmann_1_1detail_1_1internal__iterator" kindref="compound">nlohmann::detail::internal_iterator</ref>&lt; BasicJsonType &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::internal_iterator =  ::nlohmann::detail::internal_iterator&lt;BasicJsonType&gt;</definition>
        <argsstring></argsstring>
        <name>internal_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17237" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a7b03055088a8e9770680ee975fb8ba55" prot="private" static="no">
        <type>::<ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl" kindref="compound">nlohmann::detail::iter_impl</ref>&lt; BasicJsonType &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iter_impl =  ::nlohmann::detail::iter_impl&lt;BasicJsonType&gt;</definition>
        <argsstring></argsstring>
        <name>iter_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17239" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ae2ce7eec3ae7e7b903e0344e89f0512b" prot="private" static="no">
        <type>::<ref refid="db/dda/classnlohmann_1_1detail_1_1iteration__proxy" kindref="compound">nlohmann::detail::iteration_proxy</ref>&lt; Iterator &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::iteration_proxy =  ::nlohmann::detail::iteration_proxy&lt;Iterator&gt;</definition>
        <argsstring></argsstring>
        <name>iteration_proxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17241" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a556d91bc2228135b27eb189e5a90ea4c" prot="private" static="no">
        <type>::<ref refid="de/d74/classnlohmann_1_1detail_1_1json__reverse__iterator" kindref="compound">nlohmann::detail::json_reverse_iterator</ref>&lt; Base &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_reverse_iterator =  ::nlohmann::detail::json_reverse_iterator&lt;Base&gt;</definition>
        <argsstring></argsstring>
        <name>json_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17242" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ac4927a4f303011cd45b99f2a7c18c866" prot="private" static="no">
        <type>::<ref refid="dc/df0/namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556" kindref="member">nlohmann::detail::output_adapter_t</ref>&lt; CharType &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::output_adapter_t =  ::nlohmann::detail::output_adapter_t&lt;CharType&gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17245" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a6c26be4635e562ebae8b9a142f9538b4" prot="private" static="no">
        <type>::<ref refid="d6/d30/classnlohmann_1_1detail_1_1binary__reader" kindref="compound">nlohmann::detail::binary_reader</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, InputType &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_reader =  ::nlohmann::detail::binary_reader&lt;basic_json, InputType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17248" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ab483f21649bd170f593ec58044cd68a6" prot="private" static="no">
        <type>::<ref refid="df/d1a/classnlohmann_1_1detail_1_1binary__writer" kindref="compound">nlohmann::detail::binary_writer</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, CharType &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary_writer =  ::nlohmann::detail::binary_writer&lt;basic_json, CharType&gt;</definition>
        <argsstring></argsstring>
        <name>binary_writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17249" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17249" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">detail::value_t</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::value_t =  detail::value_t</definition>
        <argsstring></argsstring>
        <name>value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17255" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" prot="public" static="no">
        <type>::<ref refid="da/de8/classnlohmann_1_1json__pointer" kindref="compound">nlohmann::json_pointer</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_pointer =  ::nlohmann::json_pointer&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>json_pointer</name>
        <briefdescription>
<para>JSON Pointer, see <ref refid="da/de8/classnlohmann_1_1json__pointer" kindref="compound">nlohmann::json_pointer</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17257" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" prot="public" static="no">
        <type>JSONSerializer&lt; T, SFINAE &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_serializer =  JSONSerializer&lt;T, SFINAE&gt;</definition>
        <argsstring></argsstring>
        <name>json_serializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17259" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a1e7ca76cc3f62626b380be5e18a002d5" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df" kindref="member">detail::error_handler_t</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::error_handler_t =  detail::error_handler_t</definition>
        <argsstring></argsstring>
        <name>error_handler_t</name>
        <briefdescription>
<para>how to treat decoding errors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17261" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a54951d14f0dd10cc3cfdaa24f8bfd15c" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac" kindref="member">detail::cbor_tag_handler_t</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::cbor_tag_handler_t =  detail::cbor_tag_handler_t</definition>
        <argsstring></argsstring>
        <name>cbor_tag_handler_t</name>
        <briefdescription>
<para>how to treat CBOR tags </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17263" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" prot="public" static="no">
        <type>std::initializer_list&lt; <ref refid="da/d10/classnlohmann_1_1detail_1_1json__ref" kindref="compound">detail::json_ref</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt; &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::initializer_list_t =  std::initializer_list&lt;detail::json_ref&lt;basic_json&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>initializer_list_t</name>
        <briefdescription>
<para>helper type for initializer lists of <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17265" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40" kindref="member">detail::input_format_t</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::input_format_t =  detail::input_format_t</definition>
        <argsstring></argsstring>
        <name>input_format_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17267" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a164b1094a1a9feb54e400d8510bb0b12" prot="public" static="no">
        <type><ref refid="d0/d82/structnlohmann_1_1json__sax" kindref="compound">json_sax</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_sax_t =  json_sax&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>json_sax_t</name>
        <briefdescription>
<para>SAX interface type, see <ref refid="d0/d82/structnlohmann_1_1json__sax" kindref="compound">nlohmann::json_sax</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17269" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a24086b03c5c063849df0307f78c41c54" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1a" kindref="member">detail::parse_event_t</ref></type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse_event_t =  detail::parse_event_t</definition>
        <argsstring></argsstring>
        <name>parse_event_t</name>
        <briefdescription>
<para>parser event types </para>        </briefdescription>
        <detaileddescription>
<para>The parser callback distinguishes the following events:<itemizedlist>
<listitem><para><computeroutput>object_start</computeroutput>: the parser read <computeroutput>{</computeroutput> and started to process a JSON object</para></listitem><listitem><para><computeroutput>key</computeroutput>: the parser read a key of a value in an object</para></listitem><listitem><para><computeroutput>object_end</computeroutput>: the parser read <computeroutput>}</computeroutput> and finished processing a JSON object</para></listitem><listitem><para><computeroutput>array_start</computeroutput>: the parser read <computeroutput>[</computeroutput> and started to process a JSON array</para></listitem><listitem><para><computeroutput>array_end</computeroutput>: the parser read <computeroutput>]</computeroutput> and finished processing a JSON array</para></listitem><listitem><para><computeroutput>value</computeroutput>: the parser finished reading a JSON value</para></listitem></itemizedlist>
</para><para><image type="html" name="callback_events.png">Example when certain parse events are triggered</image>
 <simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" kindref="member">parser_callback_t</ref> for more information and examples </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18355" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2ac1bb00523b2502c10c97d70359ffc8" kindref="member">detail::parser_callback_t</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
        <definition>using nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parser_callback_t =  detail::parser_callback_t&lt;basic_json&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <briefdescription>
<para>per-element parser callback type </para>        </briefdescription>
        <detaileddescription>
<para>With a parser callback function, the result of parsing a JSON text can be influenced. When passed to <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse</ref>, it is called on certain events (passed as <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a24086b03c5c063849df0307f78c41c54" kindref="member">parse_event_t</ref> via parameter <emphasis>event</emphasis>) with a set recursion depth <emphasis>depth</emphasis> and context JSON value <emphasis>parsed</emphasis>. The return value of the callback function is a boolean indicating whether the element that emitted the callback shall be kept or not.</para><para>We distinguish six scenarios (determined by the event type) in which the callback function can be called. The following table describes the values of the parameters <emphasis>depth</emphasis>, <emphasis>event</emphasis>, and <emphasis>parsed</emphasis>.</para><para><table rows="7" cols="4"><row>
<entry thead="yes"><para>parameter <emphasis>event</emphasis> </para></entry><entry thead="yes"><para>description </para></entry><entry thead="yes"><para>parameter <emphasis>depth</emphasis> </para></entry><entry thead="yes"><para>parameter <emphasis>parsed</emphasis>  </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::object_start </para></entry><entry thead="no"><para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para></entry><entry thead="no"><para>depth of the parent of the JSON object </para></entry><entry thead="no"><para>a JSON value with type discarded </para></entry></row>
<row>
<entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">parse_event_t::key</ref> </para></entry><entry thead="no"><para>the parser read a key of a value in an object </para></entry><entry thead="no"><para>depth of the currently parsed JSON object </para></entry><entry thead="no"><para>a JSON string containing the key </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::object_end </para></entry><entry thead="no"><para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para></entry><entry thead="no"><para>depth of the parent of the JSON object </para></entry><entry thead="no"><para>the parsed JSON object </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::array_start </para></entry><entry thead="no"><para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para></entry><entry thead="no"><para>depth of the parent of the JSON array </para></entry><entry thead="no"><para>a JSON value with type discarded </para></entry></row>
<row>
<entry thead="no"><para>parse_event_t::array_end </para></entry><entry thead="no"><para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para></entry><entry thead="no"><para>depth of the parent of the JSON array </para></entry><entry thead="no"><para>the parsed JSON array </para></entry></row>
<row>
<entry thead="no"><para><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804" kindref="member">parse_event_t::value</ref> </para></entry><entry thead="no"><para>the parser finished reading a JSON value </para></entry><entry thead="no"><para>depth of the value </para></entry><entry thead="no"><para>the parsed JSON value </para></entry></row>
</table>
<image type="html" name="callback_events.png">Example when certain parse events are triggered</image>
 Discarding a value (i.e., returning <computeroutput>false</computeroutput>) has different effects depending on the context in which function was called:</para><para><itemizedlist>
<listitem><para>Discarded values in structured types are skipped. That is, the parser will behave as if the discarded value was never read.</para></listitem><listitem><para>In case a value outside a structured type is skipped, it is replaced with <computeroutput>null</computeroutput>. This case happens if the top-level element is skipped.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">depth</parametername>
</parameternamelist>
<parameterdescription>
<para>the depth of the recursion during parsing</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>an event of type parse_event_t indicating the context in the callback function has been called</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">parsed</parametername>
</parameternamelist>
<parameterdescription>
<para>the current intermediate parse result; note that writing to this value has no effect for <ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d" kindref="member">parse_event_t::key</ref> events</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether the JSON value which called the function during parsing should be kept (<computeroutput>true</computeroutput>) or not (<computeroutput>false</computeroutput>). In the latter case, it is either skipped completely or replaced by an empty discarded object.</para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" kindref="member">parse</ref> for examples</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18406" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18406" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">detail::value_t</ref></type>
          </param>
        </templateparamlist>
        <type>friend struct</type>
        <definition>friend struct detail::external_constructor</definition>
        <argsstring></argsstring>
        <name>detail::external_constructor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17197" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17201" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a842e5c7ca096025c18b11e715d3401f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::iter_impl</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::iter_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17204" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a69d491bbda88ade6d3c7a2b11309e8bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::binary_writer</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::binary_writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17206" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1aa226ed5103dfd10e27e562d35a3a106b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename InputType</type>
          </param>
          <param>
            <type>typename SAX</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::binary_reader</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::binary_reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17208" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::json_sax_dom_parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::json_sax_dom_parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17210" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1a95574da8d12905ea99dc348934c837da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::json_sax_dom_callback_parser</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::json_sax_dom_callback_parser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17212" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="d9/dcc/classnlohmann_1_1basic__json_1abdcb15d025676b4d3db0f32a50f4393f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ::nlohmann::detail::exception</definition>
        <argsstring></argsstring>
        <name>::nlohmann::detail::exception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17213" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17213" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1a501740b004225f4c948e657c9e6e539e" prot="private" static="no" mutable="no">
        <type><ref refid="d5/db8/json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad0__</definition>
        <argsstring></argsstring>
        <name>__pad0__</name>
        <bitfield> using lexer = ::nlohmann::detail::lexer_base&lt;basic_json&gt;</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17218" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1a834674252ca19c65b24963d28eb8932d" prot="private" static="no" mutable="no">
        <type><ref refid="d5/db8/json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad1__</definition>
        <argsstring></argsstring>
        <name>__pad1__</name>
        <bitfield> using serializer = ::nlohmann::detail::serializer&lt;basic_json&gt;</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17251" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1ab85f42065b70594c15de42e1f0870fba" prot="private" static="no" mutable="no">
        <type><ref refid="d5/db8/json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad2__</definition>
        <argsstring></argsstring>
        <name>__pad2__</name>
        <bitfield> union json_value { object_t* object</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17966" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> *</type>
        <definition>array_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::array</definition>
        <argsstring></argsstring>
        <name>array</name>
        <briefdescription>
<para>array (stored with pointer to save storage) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17997" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17997" bodyend="-1"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1ad21d96f490fa1aa8605fba8dadcce319" compoundref="d5/db8/json_8hpp" startline="20696" endline="20705">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator[]</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1ac32019eb29dc7bb4c326a233e0e2f0cb" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> *</type>
        <definition>string_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::string</definition>
        <argsstring></argsstring>
        <name>string</name>
        <briefdescription>
<para>string (stored with pointer to save storage) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17999" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> *</type>
        <definition>binary_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::binary</definition>
        <argsstring></argsstring>
        <name>binary</name>
        <briefdescription>
<para>binary (stored with pointer to save storage) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18001" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1a7386443608348fa4b451f033a1439074" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref></type>
        <definition>boolean_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::boolean</definition>
        <argsstring></argsstring>
        <name>boolean</name>
        <briefdescription>
<para>boolean </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18003" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1ad88685d4cc24d7e86ddc5b0edb64192a" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref></type>
        <definition>number_integer_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_integer</definition>
        <argsstring></argsstring>
        <name>number_integer</name>
        <briefdescription>
<para>number (integer) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18005" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1a077b1e7977afafb97a6a38a3a617ba66" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref></type>
        <definition>number_unsigned_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_unsigned</definition>
        <argsstring></argsstring>
        <name>number_unsigned</name>
        <briefdescription>
<para>number (unsigned integer) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18007" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1abe229fa4c3b1f3536c7a85ab9cbff2e7" prot="private" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref></type>
        <definition>number_float_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::number_float</definition>
        <argsstring></argsstring>
        <name>number_float</name>
        <briefdescription>
<para>number (floating-point) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18009" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18009" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1aa52fb28bbfe1d5484808cad53c35d76c" prot="public" static="no" mutable="no">
        <type><ref refid="d5/db8/json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" kindref="member">JSON_PRIVATE_UNLESS_TESTED</ref></type>
        <definition>JSON_PRIVATE_UNLESS_TESTED nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::__pad3__</definition>
        <argsstring></argsstring>
        <name>__pad3__</name>
        <bitfield> value_t m_type = value_t::null</bitfield>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24110" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/dcc/classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0" prot="public" static="no" mutable="no">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1abcfe744b08e2cd81508ce9bf7ebc86cf" kindref="member">json_value</ref></type>
        <definition>json_value nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>the value of the current element </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24119" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24119" bodyend="-1"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004" compoundref="d5/db8/json_8hpp" startline="19156" endline="19218">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adca9bb93a7bfa43bdae38dd8493cc042" compoundref="d5/db8/json_8hpp" startline="18152" endline="18240">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::destroy</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aaa5b1a16260634ed7b6c6a44f39c4d8a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputAdapterType</type>
          </param>
        </templateparamlist>
        <type>::<ref refid="df/d6b/classnlohmann_1_1detail_1_1parser" kindref="compound">nlohmann::detail::parser</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref>, InputAdapterType &gt;</type>
        <definition>static ::nlohmann::detail::parser&lt;basic_json, InputAdapterType&gt; nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parser</definition>
        <argsstring>(InputAdapterType adapter, detail::parser_callback_t&lt; basic_json &gt;cb=nullptr, const bool allow_exceptions=true, const bool ignore_comments=false)</argsstring>
        <name>parser</name>
        <param>
          <type>InputAdapterType</type>
          <declname>adapter</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a2ac1bb00523b2502c10c97d70359ffc8" kindref="member">detail::parser_callback_t</ref>&lt; <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> &gt;</type>
          <declname>cb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>allow_exceptions</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>ignore_comments</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17223" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17223" bodyend="17232"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1abcfe744b08e2cd81508ce9bf7ebc86cf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>()=default</argsstring>
        <name>json_value</name>
        <briefdescription>
<para>default constructor (for null values) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8ff30e37ec09ce661d0fed77e3e2e1f3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(boolean_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for booleans </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18014" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18014" bodyend="18014"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3023fcecbe85032b7048499f7bfc4ada" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(number_integer_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (integer) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18016" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18016" bodyend="18016"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a400ee8e0f051b9692692798906dc4654" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(number_unsigned_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (unsigned) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18018" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18018" bodyend="18018"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2e15685d39544db2bc5959705632fc04" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(number_float_t v) noexcept</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>constructor for numbers (floating-point) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18020" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18020" bodyend="18020"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a60041447d13e8709028a46e50219c161" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(value_t t)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>constructor for empty values of a given type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18022" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18022" bodyend="18090"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="d5/d1b/classnlohmann_1_1detail_1_1other__error_1a3a25fa67a0ec36b5d36cbc4424eb901d" compoundref="d5/db8/json_8hpp" startline="3003" endline="3007">nlohmann::detail::other_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">nlohmann::detail::number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">nlohmann::detail::number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">nlohmann::detail::number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a7e77b31f17b1b5f0ce72d3e6488b6d86" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const string_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for strings </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18093" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18093" bodyend="18096"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2f3332829fc8117b48cba5a4a26ea76b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(string_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue strings </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18099" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18099" bodyend="18102"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8a3eb027b86f4de2de4277410ceaa454" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const object_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18105" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18105" bodyend="18108"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2544582412088703c778e882e2531af3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(object_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18111" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18111" bodyend="18114"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a80a1e2c1da21dccad6471c28facf04ec" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const array_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for arrays </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18117" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18117" bodyend="18120"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aea49a99ac9d45c1d1bfe3912ed20ffb6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(array_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue arrays </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18123" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18123" bodyend="18126"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1abb5466ba8f6483df6a37e040a7b32a92" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const typename binary_t::container_type &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for binary arrays </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18129" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18129" bodyend="18132"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8bef6d062634dfd09e14d9a3217da8cd" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(typename binary_t::container_type &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>typename <ref refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype_1a4d27e8633c5a5e3b49dd4ccb06515713" kindref="member">binary_t::container_type</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue binary arrays </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18135" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18135" bodyend="18138"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a7e79daa34d13bfd8f03aae00e57649ec" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(const binary_t &amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for binary arrays (internal type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18141" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18141" bodyend="18144"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac7bb152c454b4d837d943cfb541da510" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::json_value</definition>
        <argsstring>(binary_t &amp;&amp;value)</argsstring>
        <name>json_value</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor for rvalue binary arrays (internal type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18147" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18147" bodyend="18150"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">nlohmann::detail::value</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1adca9bb93a7bfa43bdae38dd8493cc042" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::destroy</definition>
        <argsstring>(value_t t) noexcept</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18152" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18152" bodyend="18240"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" compoundref="d5/db8/json_8hpp" startline="19696" endline="19699">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_array</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" compoundref="d5/db8/json_8hpp" startline="19674" endline="19677">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::is_object</references>
        <references refid="d9/dcc/classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0" compoundref="d5/db8/json_8hpp" startline="24119">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::m_value</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2ef98c6797810a551296191fc72e2b9e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::assert_invariant</definition>
        <argsstring>(bool check_parents=true) const noexcept</argsstring>
        <name>assert_invariant</name>
        <param>
          <type>bool</type>
          <declname>check_parents</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>checks the class invariants </para>        </briefdescription>
        <detaileddescription>
<para>This function asserts the class invariants. It needs to be called at the end of every constructor to make sure that created objects respect the invariant. Furthermore, it has to be called each time the type of a JSON value is changed, because the invariant expresses a relationship between <emphasis>m_type</emphasis> and <emphasis>m_value</emphasis>.</para><para>Furthermore, the parent relation is checked for arrays and objects: If <emphasis>check_parents</emphasis> true and the value is an array or object, then the container&apos;s elements must have the current value as parent.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">check_parents</parametername>
</parameternamelist>
<parameterdescription>
<para>whether the parent relation should be checked. The value is true by default and should only be set to false during destruction of objects when the invariant does not need to hold. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18262" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18262" bodyend="18281"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a6954bec49ed2a2dfb938c1131c82740a" compoundref="d5/db8/json_8hpp" startline="2265">JSON_CATCH</references>
        <references refid="d5/db8/json_8hpp_1a985d3b82445302c57257f6432f261fe9" compoundref="d5/db8/json_8hpp" startline="2264">JSON_TRY</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004" compoundref="d5/db8/json_8hpp" startline="19156" endline="19218">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1ae937c299f347a9dcb7f31a8e57762b" compoundref="d5/db8/json_8hpp" startline="19284" endline="19301">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::operator=</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ade91330092a38c86ae056cca64a3647e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::set_parents</definition>
        <argsstring>()</argsstring>
        <name>set_parents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18283" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18283" bodyend="18310"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1accbd22113420ad6a31e375ceedc7334e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
        <definition>iterator nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::set_parents</definition>
        <argsstring>(iterator it, typename iterator::difference_type count)</argsstring>
        <name>set_parents</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" kindref="member">iterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type>typename <ref refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a2f7ea9f7022850809c60fc3263775840" kindref="member">iterator::difference_type</ref></type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18312" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18312" bodyend="18323"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aee080f037758ca55531e98ce93097d4c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
        <definition>reference nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::set_parent</definition>
        <argsstring>(reference j)</argsstring>
        <name>set_parent</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" kindref="member">reference</ref></type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="18325" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="18325" bodyend="18333"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a462f82051df2a68142c2bbd0a2798f56" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref></type>
        <definition>boolean_t nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</definition>
        <argsstring>(boolean_t *) const</argsstring>
        <name>get_impl</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a boolean (explicit) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19806" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19806" bodyend="19814"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a8b71cea6588f74f6eab6cc27ae314e5c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> *</type>
        <definition>object_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(object_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19817" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19817" bodyend="19820"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a7577c2bbaf8da92947b964ae935a57c3" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> *</type>
        <definition>constexpr const object_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const object_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (object) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19823" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19823" bodyend="19826"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3bbb975975e648f0468a2b96d25debfc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> *</type>
        <definition>array_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(array_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19829" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19829" bodyend="19832"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac59c6abb509fe0160e30800cd84b0091" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> *</type>
        <definition>constexpr const array_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const array_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (array) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19835" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19835" bodyend="19838"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a2c8443b36a3e3c591341a43e8f088c2d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> *</type>
        <definition>string_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(string_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19841" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19841" bodyend="19844"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ad968b5c1134f6aa22bd3c995ab227c11" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> *</type>
        <definition>constexpr const string_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const string_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (string) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19847" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19847" bodyend="19850"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a258ec4690664fc0ee2a06a70574995e7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref> *</type>
        <definition>boolean_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(boolean_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19853" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19853" bodyend="19856"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a60a0febbb5030562424092fd134ce19d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref> *</type>
        <definition>constexpr const boolean_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const boolean_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (boolean) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19859" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19859" bodyend="19862"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ab3ac4d7aa5bf26e70df1fdb2d6a2b207" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> *</type>
        <definition>number_integer_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(number_integer_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19865" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19865" bodyend="19868"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a12b8d90204a45d2cde4b2d22c861c384" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> *</type>
        <definition>constexpr const number_integer_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const number_integer_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (integer number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19871" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19871" bodyend="19874"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1aaacd6324154f273268cd75739b219347" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> *</type>
        <definition>number_unsigned_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(number_unsigned_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19877" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19877" bodyend="19880"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5cf0d01a7b245c82263cc73bfb070c3f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> *</type>
        <definition>constexpr const number_unsigned_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const number_unsigned_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (unsigned number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19883" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19883" bodyend="19886"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a3f8e91583b4d0f16eed6c690f1022a02" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> *</type>
        <definition>number_float_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(number_float_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19889" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19889" bodyend="19892"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a9ad84afed3e707cd066380b12901f9db" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> *</type>
        <definition>constexpr const number_float_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const number_float_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (floating-point number) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19895" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19895" bodyend="19898"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a5b429e4041392a984ce5b6f85196b570" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> *</type>
        <definition>binary_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(binary_t *) noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (binary) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19901" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19901" bodyend="19904"/>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a38632b8b0c8c7bf4b54bd6fe782c0196" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> *</type>
        <definition>constexpr const binary_t* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl_ptr</definition>
        <argsstring>(const binary_t *) const noexcept</argsstring>
        <name>get_impl_ptr</name>
        <param>
          <type>const <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref> *</type>
        </param>
        <briefdescription>
<para>get a pointer to the value (binary) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19907" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19907" bodyend="19910"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1afc55e7dca1a243b0d5011564824c0267" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457" kindref="member">allocator_type</ref></type>
        <definition>static allocator_type nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_allocator</definition>
        <argsstring>()</argsstring>
        <name>get_allocator</name>
        <briefdescription>
<para>returns the allocator associated with the container </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17340" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17340" bodyend="17343"/>
        <references refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" compoundref="d5/db8/json_8hpp" startline="1298">JSON_HEDLEY_WARN_UNUSED_RESULT</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a351b4f65014f6c2b8b2832847d44bbd7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a28d7e3b2d26bd5b8a3806da3db7dea03" kindref="member">JSON_HEDLEY_WARN_UNUSED_RESULT</ref> <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></type>
        <definition>static JSON_HEDLEY_WARN_UNUSED_RESULT basic_json nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::meta</definition>
        <argsstring>()</argsstring>
        <name>meta</name>
        <briefdescription>
<para>returns version information on the library </para>        </briefdescription>
        <detaileddescription>
<para>This function returns a JSON object with information about the library, including the version number and information on the platform and compiler.</para><para><simplesect kind="return"><para>JSON object holding version information <table rows="7" cols="2"><row>
<entry thead="yes"><para>key </para></entry><entry thead="yes"><para>description  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>compiler</computeroutput> </para></entry><entry thead="no"><para>Information on the used compiler. It is an object with the following keys: <computeroutput>c++</computeroutput> (the used C++ standard), <computeroutput>family</computeroutput> (the compiler family; possible values are <computeroutput>clang</computeroutput>, <computeroutput>icc</computeroutput>, <computeroutput>gcc</computeroutput>, <computeroutput>ilecpp</computeroutput>, <computeroutput>msvc</computeroutput>, <computeroutput>pgcpp</computeroutput>, <computeroutput>sunpro</computeroutput>, and <computeroutput>unknown</computeroutput>), and <computeroutput>version</computeroutput> (the compiler version). </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>copyright</computeroutput> </para></entry><entry thead="no"><para>The copyright line for the library as string. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>name</computeroutput> </para></entry><entry thead="no"><para>The name of the library as string. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>platform</computeroutput> </para></entry><entry thead="no"><para>The used platform as string. Possible values are <computeroutput>win32</computeroutput>, <computeroutput>linux</computeroutput>, <computeroutput>apple</computeroutput>, <computeroutput>unix</computeroutput>, and <computeroutput>unknown</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>url</computeroutput> </para></entry><entry thead="no"><para>The URL of the project as string. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>version</computeroutput> </para></entry><entry thead="no"><para>The version of the library. It is an object with the following keys: <computeroutput>major</computeroutput>, <computeroutput>minor</computeroutput>, and <computeroutput>patch</computeroutput> as defined by <ulink url="http://semver.org">Semantic Versioning</ulink>, and <computeroutput>string</computeroutput> (the version string). </para></entry></row>
</table>
{The following code shows an example output of the <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a351b4f65014f6c2b8b2832847d44bbd7" kindref="member">meta()</ref></computeroutput> function.,meta}</para></simplesect>
Strong guarantee: if an exception is thrown, there are no changes to any JSON value.</para><para>Constant.</para><para><simplesect kind="since"><para>2.1.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17372" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17372" bodyend="17425"/>
        <references refid="d5/db8/json_8hpp_1a7c94253db90041af11dd946a49f0f8a4" compoundref="d5/db8/json_8hpp" startline="33">NLOHMANN_JSON_VERSION_MAJOR</references>
        <references refid="d5/db8/json_8hpp_1ab5ca1e164894d78d3276d2e5fe58c5e3" compoundref="d5/db8/json_8hpp" startline="34">NLOHMANN_JSON_VERSION_MINOR</references>
        <references refid="d5/db8/json_8hpp_1a307e0238ebc35e99ea45c68823eb83eb" compoundref="d5/db8/json_8hpp" startline="35">NLOHMANN_JSON_VERSION_PATCH</references>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> T *</type>
        <definition>static JSON_HEDLEY_RETURNS_NON_NULL T* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::create</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>create</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>helper for exception-safe object creation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="17947" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="17947" bodyend="17960"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="d5/db8/json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" compoundref="d5/db8/json_8hpp" startline="2299">JSON_PRIVATE_UNLESS_TESTED</references>
      </memberdef>
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1af9091a59efebd38435cbc0583fcda777" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ReferenceType</type>
          </param>
          <param>
            <type>typename ThisType</type>
          </param>
        </templateparamlist>
        <type>ReferenceType</type>
        <definition>static ReferenceType nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_ref_impl</definition>
        <argsstring>(ThisType &amp;obj)</argsstring>
        <name>get_ref_impl</name>
        <param>
          <type>ThisType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>helper function to implement <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" kindref="member">get_ref()</ref> </para>        </briefdescription>
        <detaileddescription>
<para>This function helps to implement <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" kindref="member">get_ref()</ref> without code duplication for const and non-const overloads</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ThisType</parametername>
</parameternamelist>
<parameterdescription>
<para>will be deduced as <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput> or <computeroutput>const <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref></computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>type_error.303</parametername>
</parameternamelist>
<parameterdescription>
<para>if ReferenceType does not match underlying value type of the current JSON </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="19924" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="19924" bodyend="19935"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a355f2770653ff7bdd5c74b204b5a3ad0" compoundref="d5/db8/json_8hpp" startline="1563">JSON_HEDLEY_LIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/dcc/classnlohmann_1_1basic__json_1a459dbfcd47bd632ca82ca8ff8db278c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d5/db8/json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> const char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL const char* nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::type_name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type_name</name>
        <briefdescription>
<para>return the type as string </para>        </briefdescription>
        <detaileddescription>
<para>Returns the type name as string to be used in error messages - usually to indicate that a function was called on a wrong JSON type.</para><para><simplesect kind="return"><para>a string representation of a the <emphasis>m_type</emphasis> member: <table rows="9" cols="2"><row>
<entry thead="yes"><para>Value type </para></entry><entry thead="yes"><para>return value  </para></entry></row>
<row>
<entry thead="no"><para>null </para></entry><entry thead="no"><para><computeroutput>&quot;null&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>boolean </para></entry><entry thead="no"><para><computeroutput>&quot;boolean&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>string </para></entry><entry thead="no"><para><computeroutput>&quot;string&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>number </para></entry><entry thead="no"><para><computeroutput>&quot;number&quot;</computeroutput> (for all number types) </para></entry></row>
<row>
<entry thead="no"><para>object </para></entry><entry thead="no"><para><computeroutput>&quot;object&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>array </para></entry><entry thead="no"><para><computeroutput>&quot;array&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>binary </para></entry><entry thead="no"><para><computeroutput>&quot;binary&quot;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>discarded </para></entry><entry thead="no"><para><computeroutput>&quot;discarded&quot;</computeroutput> </para></entry></row>
</table>
No-throw guarantee: this function never throws exceptions.</para></simplesect>
Constant.</para><para>{The following code exemplifies <computeroutput><ref refid="d9/dcc/classnlohmann_1_1basic__json_1a459dbfcd47bd632ca82ca8ff8db278c8" kindref="member">type_name()</ref></computeroutput> for all JSON types.,type_name}</para><para><simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type()</ref> <ndash/> return the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> of the JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> </para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a6d4b8df10ecc533a50823e8805f4a873" kindref="member">operator value_t()</ref> <ndash/> return the <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" kindref="member">type</ref> of the JSON <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" kindref="member">value</ref> (implicit)</para></simplesect>
<simplesect kind="since"><para>version 1.0.0, public since 2.1.0, <computeroutput>const char*</computeroutput> and <computeroutput>noexcept</computeroutput> since 3.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="24084" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="24084" bodyend="24107"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">nlohmann::detail::array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20">nlohmann::detail::binary</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">nlohmann::detail::boolean</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46">nlohmann::detail::discarded</references>
        <references refid="d5/db8/json_8hpp_1a2cf645f34610e7f7d6e09ab88a2ab917" compoundref="d5/db8/json_8hpp" startline="2299">JSON_PRIVATE_UNLESS_TESTED</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd">nlohmann::detail::null</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666">nlohmann::detail::object</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">nlohmann::detail::string</references>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" compoundref="d5/db8/json_8hpp" startline="22924" endline="22947">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::update</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>a class to store JSON values </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ObjectType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON objects (<computeroutput>std::map</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" kindref="member">object_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ArrayType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON arrays (<computeroutput>std::vector</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" kindref="member">array_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>StringType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON strings and object keys (<computeroutput>std::string</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" kindref="member">string_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>BooleanType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON booleans (<computeroutput>bool</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" kindref="member">boolean_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberIntegerType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON integer numbers (<computeroutput>int64_t</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">number_integer_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberUnsignedType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON unsigned integer numbers (<computeroutput><computeroutput>uint64_t</computeroutput></computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">number_unsigned_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumberFloatType</parametername>
</parameternamelist>
<parameterdescription>
<para>type for JSON floating-point numbers (<computeroutput>double</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">number_float_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d7/d1c/classBinaryType" kindref="compound">BinaryType</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>type for packed binary data for compatibility with binary serialization formats (<computeroutput>std::vector&lt;std::uint8_t&gt;</computeroutput> by default; will be used in <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" kindref="member">binary_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>AllocatorType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the allocator to use (<computeroutput>std::allocator</computeroutput> by default) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>JSONSerializer</parametername>
</parameternamelist>
<parameterdescription>
<para>the serializer to resolve internal calls to <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" kindref="member">to_json()</ref></computeroutput> and <computeroutput><ref refid="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" kindref="member">from_json()</ref></computeroutput> (<ref refid="dc/dc7/structnlohmann_1_1adl__serializer" kindref="compound">adl_serializer</ref> by default)</para></parameterdescription>
</parameteritem>
</parameterlist>
The class satisfies the following concept requirements:<itemizedlist>
<listitem><para>Basic<itemizedlist>
<listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/DefaultConstructible">DefaultConstructible</ulink>: JSON values can be default constructed. The result will be a JSON null value.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/MoveConstructible">MoveConstructible</ulink>: A JSON value can be constructed from an rvalue argument.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/CopyConstructible">CopyConstructible</ulink>: A JSON value can be copy-constructed from an lvalue expression.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/MoveAssignable">MoveAssignable</ulink>: A JSON value van be assigned from an rvalue argument.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/CopyAssignable">CopyAssignable</ulink>: A JSON value can be copy-assigned from an lvalue expression.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/Destructible">Destructible</ulink>: JSON values can be destructed.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Layout<itemizedlist>
<listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/StandardLayoutType">StandardLayoutType</ulink>: JSON values have <ulink url="https://en.cppreference.com/w/cpp/language/data_members#Standard_layout">standard layout</ulink>: All non-static data members are private and standard layout types, the class has no virtual functions or (virtual) base classes.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Library-wide<itemizedlist>
<listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/EqualityComparable">EqualityComparable</ulink>: JSON values can be compared with <computeroutput>==</computeroutput>, see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e" kindref="member">operator==(const_reference,const_reference)</ref>.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/LessThanComparable">LessThanComparable</ulink>: JSON values can be compared with <computeroutput>&lt;</computeroutput>, see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3" kindref="member">operator&lt;(const_reference,const_reference)</ref>.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/Swappable">Swappable</ulink>: Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of other compatible types, using unqualified function call <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" kindref="member">swap()</ref>.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/NullablePointer">NullablePointer</ulink>: JSON values can be compared against <computeroutput>std::nullptr_t</computeroutput> objects which are used to model the <computeroutput>null</computeroutput> value.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Container<itemizedlist>
<listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/Container">Container</ulink>: JSON values can be used like STL containers and provide iterator access.</para></listitem><listitem><para><ulink url="https://en.cppreference.com/w/cpp/named_req/ReversibleContainer">ReversibleContainer</ulink>; JSON values can be used like STL containers and provide reverse iterator access.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para><simplesect kind="invariant"><para>The member variables <emphasis>m_value</emphasis> and <emphasis>m_type</emphasis> have the following relationship:<itemizedlist>
<listitem><para>If <computeroutput>m_type == <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666" kindref="member">value_t::object</ref></computeroutput>, then <computeroutput>m_value.object != nullptr</computeroutput>.</para></listitem><listitem><para>If <computeroutput>m_type == <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">value_t::array</ref></computeroutput>, then <computeroutput>m_value.array != nullptr</computeroutput>.</para></listitem><listitem><para>If <computeroutput>m_type == <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">value_t::string</ref></computeroutput>, then <computeroutput>m_value.string != nullptr</computeroutput>. The invariants are checked by member function <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a2ef98c6797810a551296191fc72e2b9e" kindref="member">assert_invariant()</ref>.</para></listitem></itemizedlist>
</para></simplesect>
</para><para><simplesect kind="see"><para><ulink url="https://tools.ietf.org/html/rfc8259">RFC 8259: The JavaScript Object Notation (JSON) Data Interchange Format</ulink></para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="35">
        <label>BooleanType</label>
      </node>
      <node id="37">
        <label>JSON_PRIVATE_UNLESS_TESTED</label>
      </node>
      <node id="29">
        <label>NumberUnsignedType</label>
      </node>
      <node id="31">
        <label>BinaryType</label>
        <link refid="d7/d1c/classBinaryType"/>
      </node>
      <node id="36">
        <label>array_t *</label>
      </node>
      <node id="28">
        <label>NumberFloatType</label>
      </node>
      <node id="34">
        <label>string_t *</label>
      </node>
      <node id="32">
        <label>uint8_t</label>
      </node>
      <node id="33">
        <label>bool</label>
      </node>
      <node id="25">
        <label>nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;</label>
        <link refid="d9/dcc/classnlohmann_1_1basic__json"/>
        <childnode refid="26" relation="usage">
          <edgelabel>+m_value</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>-number_integer</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>-number_float</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>-number_unsigned</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>-binary</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>-string</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>-boolean</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>-array</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>-__pad2__</edgelabel>
          <edgelabel>-__pad1__</edgelabel>
          <edgelabel>-__pad0__</edgelabel>
          <edgelabel>+__pad3__</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>NumberIntegerType</label>
      </node>
      <node id="30">
        <label>nlohmann::byte_container_with_subtype&lt; BinaryType &gt;</label>
        <link refid="dd/d0d/classnlohmann_1_1byte__container__with__subtype"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>-m_subtype</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>-m_has_subtype</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>json_value</label>
      </node>
    </collaborationgraph>
    <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3366" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3366" bodyend="-1"/>
    <listofallmembers>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa226ed5103dfd10e27e562d35a3a106b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::binary_reader</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a69d491bbda88ade6d3c7a2b11309e8bf" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::binary_writer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abdcb15d025676b4d3db0f32a50f4393f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::exception</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a842e5c7ca096025c18b11e715d3401f4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::iter_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a95574da8d12905ea99dc348934c837da" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::json_sax_dom_callback_parser</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a47aabb1eceae32e8a6e8e7f0ff34be60" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::json_sax_dom_parser</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac8f3125911eb018ef4ab00d879487baf" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>::nlohmann::detail::parser</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a501740b004225f4c948e657c9e6e539e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>__pad0__</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a834674252ca19c65b24963d28eb8932d" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>__pad1__</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab85f42065b70594c15de42e1f0870fba" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>__pad2__</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa52fb28bbfe1d5484808cad53c35d76c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>__pad3__</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>accept</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a47fb596473649332185aedb0a8a6ccc5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>accept</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6d9e85910b91d02f6807b69b61690a4b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>accept</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad38ae80f1e99d4b1f33c99fea4611457" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>allocator_type</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad2b075c694e4564c9742d2c8db7c7c5f" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>array</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8d8f5741aedadac8f3bffd8f2ce13e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>array</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a858c1cf8407bc06494e3a1114a3b73e7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>array_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2ef98c6797810a551296191fc72e2b9e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>assert_invariant</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a52b18a5b7e68652c65b070900c438c6e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aeb18fe2b8a5dbff4ccf2848de854c3ac" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a239e942da82f2597d0cf5ec806f5bc0d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a229964ee10c92ba89ae4fba786fe6b50" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa014a978f8b6c085db8825faa8dad320" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8284b9c1d4d0830151eaa000f907b2e6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>at</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a30914ad0767ccdc3633f88a906ed7dfa" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aac965b84ea43ccd8aef9caefef02794a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ace6fbaf6c64f60b61922b5c9d3e61aa6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a232bddcef573bde8777a6a87da0048dd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a40738eb9cb8c5a9ca14ae4b697c29f8e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aeac617faf3448d6d2cb33a020be01d37" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1afbccea367512a87b5d76e2bd92c5cc85" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a23e540f473d32f1cf5d3243ea3ad495e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a28524e9c443076ea6dccff8e391354ed" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a603be713183ad63dd8c9e1052c606004" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a642afd9d8886e0dedfc0d5cee2baf57f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a125c0afa5f3599949b0589ef7b4aa322" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>basic_json_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a23b495b4c282e4afacf382f5b49af7c7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>begin</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4f147be16fcde9f510c4aac89ab511c9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>begin</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4a1bb634091c7ebd66c4e989ed469d" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3d255dbe024ce2d0fdfb1b4837629091" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1acd2c506b279049f7d92ad7ae10a2f12b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab085777bbfbfac5a472120b991ef5cf3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a012e375f4016b89444c528ed46cce3af" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6c26be4635e562ebae8b9a142f9538b4" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary_reader</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad6c955145bebde84d93991ffed7cd389" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab483f21649bd170f593ec58044cd68a6" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>binary_writer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7386443608348fa4b451f033a1439074" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>boolean</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a44fd1a12c9c54623c942b430e7a72937" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>boolean_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae508c13e3ad6ce445bcaf24a2bc7d039" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>cbegin</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a54951d14f0dd10cc3cfdaa24f8bfd15c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>cbor_tag_handler_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3017cf0f1a4673e904e34cfef62e7758" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>cend</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a946cc8f30d8b1d6609b57387b647fe53" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>clear</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aebd2cfa7e4ded4e97cde9269bfeeea38" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4108c5148f1d7cf13c2681e22f141a10" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_pointer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab8a1c33ee7b154fc41ca2545aa9724e6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_reference</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa7dba16ed9ee97380aeb17a207dd919a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>const_reverse_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a02c9bc4d0f33b7dec20b2798301d6971" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>contains</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adb82c1f34c73486e013da71ae369e597" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>contains</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aba5ec6d1e37eda6b11eba491a1e5237e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>count</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a044298d189bdf7e4b36492de9811ddd6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>crbegin</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac53c5c09feafe34cc8a3a9f0b90f4792" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>create</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a223480466a0922267d680ec8f0722d58" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>crend</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adca9bb93a7bfa43bdae38dd8493cc042" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>destroy</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6275ed57bae6866cdf5db5370a7ad47c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>detail::external_constructor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>diff</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3d20d11e5dfe95084a76f62eca54fadd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>difference_type</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a476756fb08e7f2416aad116d137977f4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>dump</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac479e609cbd03948bd3e85fb441b66e5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>emplace</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a15c0a5db4fb12d49433801bbe6436bfb" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>emplace_back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5c99855f3e35ff35558cb46139b785f8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>empty</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a931267ec3f09eb67e4382f321b2c52bc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>end</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a82b5b96f86879a3bac0c713d33178551" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>end</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a494632b69bbe1d0153d3bedad0901b8e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8ac83750e267e37d5d47591eb44cce42" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1af72b1c9d1502b02a49a0cb9db9f980ea" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a221b943d3228488c14225e55f726cc26" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>erase</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a1e7ca76cc3f62626b380be5e18a002d5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>error_handler_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a14824c27188d2fee4861806cd5f23d22" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>exception</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1acdf9b3aab82dcf443dd91ca5ec06b80c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>find</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a17a516671c29a69bb2e11ca12030316b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>find</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab7aa6e048e659481a036f2d872c7cba6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>flatten</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4118d0ec23d9eeafc236b9524d220e94" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae2612581e4788ddffc2f45d5e4cc04fc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2afe89884edf72412a0624982324755d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aba4f6fc79cc405fb212ea3d992334e71" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a188755c8cda27e2afb03c016c14125d8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4a67e47f4bcde55214475f47f8314c1f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a94dbeb08bcd13821512957dcbf3f00bd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a0d69d3102639759d5202a6f764760d23" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a84b3d89de8e774a2609dc4c0a1273f62" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9dbb422350fed520ce8c1ca8762c0251" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab6eeda23c34cee79d8d72f1a8691a8de" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a47201396899371881a46562bffb922da" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>from_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5417ca43ae5e7a3a2f82eee2d915c6ed" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>front</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5ac8f974c178cf9326b6765e22f50eb6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>front</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad8c8d2d107c6952960ba8aa78e009284" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a46bb02ef17ee178984313efbc2c8eb8d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1afc55e7dca1a243b0d5011564824c0267" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_allocator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aab19a246f6bcd27c195bed376cf5e138" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abbfa5532931abd2d9040cbf4d18a2ca7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a462f82051df2a68142c2bbd0a2798f56" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad2e690ffeeff334640da1042c415bf65" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae0558bf35848bc194ffae2ef4d371c2c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6a8e927bfe09a0410baba859cd1a04c1" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad5462e42ebf32c2570f5ade93e4bd34e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a0ace71470cab6d59035de18cea4fe272" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa17b6729b79846fe460b6905eb8ece5f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8b71cea6588f74f6eab6cc27ae314e5c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7577c2bbaf8da92947b964ae935a57c3" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3bbb975975e648f0468a2b96d25debfc" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac59c6abb509fe0160e30800cd84b0091" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2c8443b36a3e3c591341a43e8f088c2d" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad968b5c1134f6aa22bd3c995ab227c11" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a258ec4690664fc0ee2a06a70574995e7" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a60a0febbb5030562424092fd134ce19d" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab3ac4d7aa5bf26e70df1fdb2d6a2b207" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a12b8d90204a45d2cde4b2d22c861c384" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aaacd6324154f273268cd75739b219347" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5cf0d01a7b245c82263cc73bfb070c3f" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3f8e91583b4d0f16eed6c690f1022a02" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9ad84afed3e707cd066380b12901f9db" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5b429e4041392a984ce5b6f85196b570" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a38632b8b0c8c7bf4b54bd6fe782c0196" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_impl_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac3698ce827dcd4f0c81455461709938d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae4e9a0afab117f1642b90b9607285348" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ptr</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a14ddc6e0f6d70296bc81f810254076c5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ref</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7f0889072c54f1b899689ed6246238e7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ref</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1af9091a59efebd38435cbc0583fcda777" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_ref_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a95c3851acd53eccd620b0d82855c3da1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_to</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac6fd6c12364425e4007ee4d7ecf9fefd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_to</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8e29710c587ab852ba851b623d4efa00" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>get_to</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac569f292a070dfd2f6b69c16e746095a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>initializer_list_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a211cf53702226ad9fb3c939a3a3d3689" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>input_format_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aeb86e8478e20d95970a8b61ff01dce3b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9c5b9de8a4a759861cb600b38a6c81b1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a71e197e6cc78c3960011f68a75f8ef22" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8137d5471edcd71606e42155ed9c23e2" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a856b8764efd21dac4205a00fec82e09a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a0181d03c6314bedcbad2e92d3676223c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab5c8034e997c5b852b92bdc6a3f70994" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>insert_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abe6f1016de5097691cbfdbb989267718" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>internal_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6ccc9788413fd58de998fe92743cb4aa" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>invalid_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_array</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9576224f7b3ff812a308e7c1e784ea80" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_binary</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_boolean</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_discarded</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_null</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number_float</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number_integer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_number_unsigned</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_object</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_primitive</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_string</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>is_structured</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a916a6ba75ec7624e9c6c977a52d6fd17" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>items</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4faaed730a81347f2f01e93f37c73823" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>items</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7b03055088a8e9770680ee975fb8ba55" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iter_impl</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae2ce7eec3ae7e7b903e0344e89f0512b" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iteration_proxy</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa549b2b382916b3baafb526e5cb410bd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a22e2e5b0e68d9d7c63be2cada5187259" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iterator_wrapper</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3710ff8c5a1cbedb4f75b700a8962d5c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>iterator_wrapper</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa8f1f93b32da01b42413643be32b2c27" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_pointer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a556d91bc2228135b27eb189e5a90ea4c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_reverse_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a164b1094a1a9feb54e400d8510bb0b12" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_sax_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad6ebc5da7ced975bb184133750e7d49f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_serializer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abcfe744b08e2cd81508ce9bf7ebc86cf" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8ff30e37ec09ce661d0fed77e3e2e1f3" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3023fcecbe85032b7048499f7bfc4ada" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a400ee8e0f051b9692692798906dc4654" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2e15685d39544db2bc5959705632fc04" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a60041447d13e8709028a46e50219c161" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7e77b31f17b1b5f0ce72d3e6488b6d86" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2f3332829fc8117b48cba5a4a26ea76b" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8a3eb027b86f4de2de4277410ceaa454" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2544582412088703c778e882e2531af3" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a80a1e2c1da21dccad6471c28facf04ec" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aea49a99ac9d45c1d1bfe3912ed20ffb6" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abb5466ba8f6483df6a37e040a7b32a92" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a8bef6d062634dfd09e14d9a3217da8cd" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7e79daa34d13bfd8f03aae00e57649ec" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac7bb152c454b4d837d943cfb541da510" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>json_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a72f1c0ede41f166429ce3fe7c2ffefc0" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>m_value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a1b46c6631e30b8394e89bd1546d69736" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>max_size</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a844a77cb154752d12118f10af26d54cb" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>merge_patch</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a351b4f65014f6c2b8b2832847d44bbd7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>meta</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abe229fa4c3b1f3536c7a85ab9cbff2e7" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_float</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_float_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad88685d4cc24d7e86ddc5b0edb64192a" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_integer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_integer_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a077b1e7977afafb97a6a38a3a617ba66" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_unsigned</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>number_unsigned_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9a4df356e05415438fadf8a15e583903" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>object</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac26c2e8d6bcaccde372ceedd81851200" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>object_comparator_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aef3ff5a73597850597d1d40db9edd376" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>object_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6d4b8df10ecc533a50823e8805f4a873" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator value_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ada1463d8d7ba77865f28f5e83dec7f33" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator ValueType</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6e2e21da48f5d9471716cd868a068327" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator!=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4d581dc2ab78091885f9af24d13749dc" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator!=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa9861979059799375c0fff68174610ba" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator!=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a40226d9c84fcb9cb948ae0c27b842c57" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1af643a4baa91f484b11af0e4437183115" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae300819781bce2193369609457f70f30" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac48302a8b4f8c2a6e30c2a7bff6abc49" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator+=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aacd442b66140c764c594ac8ad7dfd5b3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a52907b78829a55473f2548530cf2c1c7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a71f65ff3abee4c140e27ca64fa327973" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5e34c5435e557d0bf666bd7311211405" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;&lt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a60ca396028b8d9714c6e10efbf475af6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;&lt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5c8bb5200f5eac10d31e26be46e5b1ac" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae7bce6989e2bf72aa0784ca6755e22a9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4e96b98c1f8dfccaaa94aa0d5e77427c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&lt;=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a1ae937c299f347a9dcb7f31a8e57762b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a122640e7e2db1814fc7bbb3c122ec76e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator==</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a107a085c92ec4e062d1185b2d09c7978" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator==</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a24ae7acd5b06ae49cfe1c94633436b68" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator==</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a87db51b6b936fb2ea293cdbc8702dcb8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9ea8e0e86820fcb3ab0fc937d41226e7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a67771044f08fd07105b34667615d9e0e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a74a943800c7f103d0990d7eef82c6453" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab83d11de4db25633f93e067aa218cae9" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a94c61e0128f0794e7a34e1aecee5c445" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;=</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a34d6a60dd99e9f33b8273a1c8db5669b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;&gt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aaf363408931d76472ded14017e59c9e8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator&gt;&gt;</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9ea67fc1ef0ccc42e1d5388fe0416ae5" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad21d96f490fa1aa8605fba8dadcce319" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3f45f3820c456ad2e3f3df2926564151" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1acb5b489310f4e0ce2d5fb29b73fb59d3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1abc94831476f7b4d3efe6f2e9036c7188" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a11bbe874496eb7b29a5549e0637de59e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a0d3deaa73b3644b4da3f8ef3172cd8d2" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a0a691c29eb7c4acd91ccb498a79cd3ee" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>operator[]</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6fc373c99facc37aadbc5651b3d6631d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>other_error</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2251d8523fa6d16c0fba6388ffa2ef8c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>out_of_range</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac4927a4f303011cd45b99f2a7c18c866" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>output_adapter_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad832c70af0989389a9a104c21d2d1c5c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a73cf15644f04fa569f50291049d1bafd" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a555b05e9da63d486126759922685a37a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse_error</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a24086b03c5c063849df0307f78c41c54" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parse_event_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aaa5b1a16260634ed7b6c6a44f39c4d8a" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parser</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a0273d074462644e5d5a7ff313ad0d742" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>parser_callback_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adcc786998f220a5b3083ee8a37c4553e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>patch</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a42e5c23402f4c2e1df487e1d102bc5fa" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>pointer</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ae2cb9166f46abfc6d3910e076410f1ca" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>primitive_iterator_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab9e0253c92736db021840105d374c4c4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3405d38087e13994a5a4556065b0be6d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ad704839e6a5195e3b76f22e2b9aa63ee" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4567cf75f19b1efca090f75d7a8a350a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>push_back</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aff8e38cd973bc94557fa8d36433c0e4c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rbegin</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aab1329f44c8301b7679962726a043549" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rbegin</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a220ae98554a76205fb7f8822d36b2d5a" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>reference</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a7a328b29b290cc300345376c54f618cb" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rend</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2e4cbf41d593d41847b90aea55e5e84d" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>rend</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8c0ebedd920b507f4f7ff4e19bf3c6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>reverse_iterator</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>sax_parse</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ab62241c2694a054818edf2f66d72f113" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>sax_parse</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aef9ef0a817ecde8bf270653e8706c150" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>sax_parse</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aee080f037758ca55531e98ce93097d4c" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>set_parent</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ade91330092a38c86ae056cca64a3647e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>set_parents</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1accbd22113420ad6a31e375ceedc7334e" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>set_parents</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a33c7c8638bb0b12e6d1b69d8106dd2e0" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>size</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a3ada29bca70b4965f6fd37ec1c8f85f7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>size_type</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac32019eb29dc7bb4c326a233e0e2f0cb" prot="private" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>string</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a33593865ffb1860323dcbd52425b90c8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>string_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a94295a06e0e7b3867fe83afbee4cb202" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aee0ae36cbfb0336832ebc0374c3c7679" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a76126242de262f6d38cadda19e0d13e1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a57b86bdcfc55557dacc36969adb0417e" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aac916df9561daf4eaf2372119fe91899" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa242e339ebc7583e114f2167a83f8c90" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a749a1f5091a5e63ccfe919e0aef986af" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>swap</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa62d64781b217372225a0652047d8cf3" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a668e4c2ad9808218a25879700f4aef2b" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9ebed178fb7dad1a574bcb7c361fb1b8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_bson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adabcf74c9c868da3e04a5546b7705af4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a2becf604016783e5644eaa7782a08683" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5689672954fd3bc38f2f17e5607064c6" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_cbor</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a99b15bcaee410426b937eacc6e47d771" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aa8fe46eda86f6f92c5599c20b6c81819" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1aca5dc0fca52131f3a634372120abfbe7" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_msgpack</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a25355b9719db23b189fb5f6a8f4f16c4" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a19dad92c4fe9e6a289a93195e1230e97" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a6d133cf7b2e729e9e215edeba5726116" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>to_ubjson</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a5b7c4b35a0ad9f97474912a08965d7ad" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>type</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ace5bf851eafe85bd6332f978991bc11c" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>type_error</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a459dbfcd47bd632ca82ca8ff8db278c8" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>type_name</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adea158bff8642202420898f6322da479" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>unflatten</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a377819905d567f6f523dcbc592cb6356" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>update</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a9f9e5f668474280acc9bd7f5410b9392" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>update</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a11641b35219676b225d9bd15c7677659" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1adcfdefe95d5c2471a5c97e911d46ee88" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a36bd6765ccd8aeeeb4e49a766ba639df" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a4658a584571c4180656f5268969ed0a1" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1ac68cb65a7f3517f0c5b1d3a4967406ad" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value_t</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a57c816a20c1d3ccc9bbc2972829da847" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>value_type</name></member>
      <member refid="d9/dcc/classnlohmann_1_1basic__json_1a60b643c02a19fa52f99db8215ff58e0f" prot="public" virt="non-virtual"><scope>nlohmann::basic_json</scope><name>~basic_json</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
