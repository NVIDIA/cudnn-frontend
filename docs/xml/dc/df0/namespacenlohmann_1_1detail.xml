<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="dc/df0/namespacenlohmann_1_1detail" kind="namespace" language="C++">
    <compoundname>nlohmann::detail</compoundname>
    <innerclass refid="d6/d30/classnlohmann_1_1detail_1_1binary__reader" prot="public">nlohmann::detail::binary_reader</innerclass>
    <innerclass refid="df/d1a/classnlohmann_1_1detail_1_1binary__writer" prot="public">nlohmann::detail::binary_writer</innerclass>
    <innerclass refid="dd/dde/structnlohmann_1_1detail_1_1conjunction" prot="public">nlohmann::detail::conjunction</innerclass>
    <innerclass refid="d1/d96/structnlohmann_1_1detail_1_1conjunction_3_01B1_01_4" prot="public">nlohmann::detail::conjunction&lt; B1 &gt;</innerclass>
    <innerclass refid="d5/db0/structnlohmann_1_1detail_1_1conjunction_3_01B1_00_01Bn_8_8_8_01_4" prot="public">nlohmann::detail::conjunction&lt; B1, Bn... &gt;</innerclass>
    <innerclass refid="dd/d10/structnlohmann_1_1detail_1_1detector" prot="public">nlohmann::detail::detector</innerclass>
    <innerclass refid="d9/de0/structnlohmann_1_1detail_1_1detector_3_01Default_00_01void__t_3_01Op_3_01Args_8_8_8_01_4_01_4_00_01Op_00_01Args_8_8_8_01_4" prot="public">nlohmann::detail::detector&lt; Default, void_t&lt; Op&lt; Args... &gt; &gt;, Op, Args... &gt;</innerclass>
    <innerclass refid="de/df2/classnlohmann_1_1detail_1_1exception" prot="public">nlohmann::detail::exception</innerclass>
    <innerclass refid="d2/df4/structnlohmann_1_1detail_1_1external__constructor" prot="public">nlohmann::detail::external_constructor</innerclass>
    <innerclass refid="d4/d91/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1array_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::array &gt;</innerclass>
    <innerclass refid="d3/d09/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1binary_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::binary &gt;</innerclass>
    <innerclass refid="d5/d36/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1boolean_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::boolean &gt;</innerclass>
    <innerclass refid="d8/dff/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__float_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::number_float &gt;</innerclass>
    <innerclass refid="dc/dd7/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__integer_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::number_integer &gt;</innerclass>
    <innerclass refid="d5/df9/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1number__unsigned_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::number_unsigned &gt;</innerclass>
    <innerclass refid="d7/d38/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1object_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::object &gt;</innerclass>
    <innerclass refid="da/dac/structnlohmann_1_1detail_1_1external__constructor_3_01value__t_1_1string_01_4" prot="public">nlohmann::detail::external_constructor&lt; value_t::string &gt;</innerclass>
    <innerclass refid="da/d14/classnlohmann_1_1detail_1_1file__input__adapter" prot="public">nlohmann::detail::file_input_adapter</innerclass>
    <innerclass refid="d5/d4d/structnlohmann_1_1detail_1_1from__json__fn" prot="public">nlohmann::detail::from_json_fn</innerclass>
    <innerclass refid="dc/dac/structnlohmann_1_1detail_1_1has__from__json" prot="public">nlohmann::detail::has_from_json</innerclass>
    <innerclass refid="d0/d3d/structnlohmann_1_1detail_1_1has__from__json_3_01BasicJsonType_00_01T_00_01enable__if__t_3_01_9is3ee028c64c76c768be45996bb13fc9c5" prot="public">nlohmann::detail::has_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d7/d08/structnlohmann_1_1detail_1_1has__non__default__from__json" prot="public">nlohmann::detail::has_non_default_from_json</innerclass>
    <innerclass refid="df/d70/structnlohmann_1_1detail_1_1has__non__default__from__json_3_01BasicJsonType_00_01T_00_01enable__b7a8cd863889b54d1139b207b4233111" prot="public">nlohmann::detail::has_non_default_from_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d9/d6c/structnlohmann_1_1detail_1_1has__to__json" prot="public">nlohmann::detail::has_to_json</innerclass>
    <innerclass refid="d9/de1/structnlohmann_1_1detail_1_1has__to__json_3_01BasicJsonType_00_01T_00_01enable__if__t_3_01_9is__4a8838c1c30336126696a126041e661c" prot="public">nlohmann::detail::has_to_json&lt; BasicJsonType, T, enable_if_t&lt; !is_basic_json&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d0/db1/structnlohmann_1_1detail_1_1identity__tag" prot="public">nlohmann::detail::identity_tag</innerclass>
    <innerclass refid="db/df0/classnlohmann_1_1detail_1_1input__stream__adapter" prot="public">nlohmann::detail::input_stream_adapter</innerclass>
    <innerclass refid="d9/d1c/structnlohmann_1_1detail_1_1integer__sequence" prot="public">nlohmann::detail::integer_sequence</innerclass>
    <innerclass refid="d7/d10/structnlohmann_1_1detail_1_1internal__iterator" prot="public">nlohmann::detail::internal_iterator</innerclass>
    <innerclass refid="d4/d5f/classnlohmann_1_1detail_1_1invalid__iterator" prot="public">nlohmann::detail::invalid_iterator</innerclass>
    <innerclass refid="d4/df6/structnlohmann_1_1detail_1_1is__basic__json" prot="public">nlohmann::detail::is_basic_json</innerclass>
    <innerclass refid="d8/d25/structnlohmann_1_1detail_1_1is__basic__json_3_01NLOHMANN__BASIC__JSON__TPL_01_4" prot="public">nlohmann::detail::is_basic_json&lt; NLOHMANN_BASIC_JSON_TPL &gt;</innerclass>
    <innerclass refid="d8/d94/structnlohmann_1_1detail_1_1is__compatible__array__type" prot="public">nlohmann::detail::is_compatible_array_type</innerclass>
    <innerclass refid="dc/d4b/structnlohmann_1_1detail_1_1is__compatible__array__type__impl" prot="public">nlohmann::detail::is_compatible_array_type_impl</innerclass>
    <innerclass refid="dd/da5/structnlohmann_1_1detail_1_1is__compatible__array__type__impl_3_01BasicJsonType_00_01CompatibleAb638dd3c6149bb42b44d6778e8db3f9d" prot="public">nlohmann::detail::is_compatible_array_type_impl&lt; BasicJsonType, CompatibleArrayType, enable_if_t&lt; is_detected&lt; value_type_t, CompatibleArrayType &gt;::value &amp;&amp;is_detected&lt; iterator_t, CompatibleArrayType &gt;::value &amp;&amp;!is_iterator_traits&lt; iterator_traits&lt; CompatibleArrayType &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d1/d21/structnlohmann_1_1detail_1_1is__compatible__integer__type" prot="public">nlohmann::detail::is_compatible_integer_type</innerclass>
    <innerclass refid="dd/d13/structnlohmann_1_1detail_1_1is__compatible__integer__type__impl" prot="public">nlohmann::detail::is_compatible_integer_type_impl</innerclass>
    <innerclass refid="d0/d14/structnlohmann_1_1detail_1_1is__compatible__integer__type__impl_3_01RealIntegerType_00_01Compatie5920c849e839ebb9f8c57349c900796" prot="public">nlohmann::detail::is_compatible_integer_type_impl&lt; RealIntegerType, CompatibleNumberIntegerType, enable_if_t&lt; std::is_integral&lt; RealIntegerType &gt;::value &amp;&amp;std::is_integral&lt; CompatibleNumberIntegerType &gt;::value &amp;&amp;!std::is_same&lt; bool, CompatibleNumberIntegerType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d5/dda/structnlohmann_1_1detail_1_1is__compatible__object__type" prot="public">nlohmann::detail::is_compatible_object_type</innerclass>
    <innerclass refid="dc/da5/structnlohmann_1_1detail_1_1is__compatible__object__type__impl" prot="public">nlohmann::detail::is_compatible_object_type_impl</innerclass>
    <innerclass refid="d7/d9f/structnlohmann_1_1detail_1_1is__compatible__object__type__impl_3_01BasicJsonType_00_01Compatible1dd1bd23ba0e4ce33237aa702f8058a9" prot="public">nlohmann::detail::is_compatible_object_type_impl&lt; BasicJsonType, CompatibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, CompatibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, CompatibleObjectType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="db/d4e/structnlohmann_1_1detail_1_1is__compatible__string__type" prot="public">nlohmann::detail::is_compatible_string_type</innerclass>
    <innerclass refid="d2/d3a/structnlohmann_1_1detail_1_1is__compatible__string__type__impl" prot="public">nlohmann::detail::is_compatible_string_type_impl</innerclass>
    <innerclass refid="d0/dad/structnlohmann_1_1detail_1_1is__compatible__string__type__impl_3_01BasicJsonType_00_01Compatible494e9dc742c819c61e54b8282030b5b6" prot="public">nlohmann::detail::is_compatible_string_type_impl&lt; BasicJsonType, CompatibleStringType, enable_if_t&lt; is_detected_exact&lt; typename BasicJsonType::string_t::value_type, value_type_t, CompatibleStringType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d3/d71/structnlohmann_1_1detail_1_1is__compatible__type" prot="public">nlohmann::detail::is_compatible_type</innerclass>
    <innerclass refid="d9/d66/structnlohmann_1_1detail_1_1is__compatible__type__impl" prot="public">nlohmann::detail::is_compatible_type_impl</innerclass>
    <innerclass refid="d1/d07/structnlohmann_1_1detail_1_1is__compatible__type__impl_3_01BasicJsonType_00_01CompatibleType_00_fa54cb60e66f5c6ba93b1dd3f418b703" prot="public">nlohmann::detail::is_compatible_type_impl&lt; BasicJsonType, CompatibleType, enable_if_t&lt; is_complete_type&lt; CompatibleType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d2/db3/structnlohmann_1_1detail_1_1is__complete__type" prot="public">nlohmann::detail::is_complete_type</innerclass>
    <innerclass refid="dd/dcd/structnlohmann_1_1detail_1_1is__complete__type_3_01T_00_01decltype_07void_07sizeof_07T_08_08_08_4" prot="public">nlohmann::detail::is_complete_type&lt; T, decltype(void(sizeof(T)))&gt;</innerclass>
    <innerclass refid="d7/d10/structnlohmann_1_1detail_1_1is__constructible" prot="public">nlohmann::detail::is_constructible</innerclass>
    <innerclass refid="d8/da8/structnlohmann_1_1detail_1_1is__constructible_3_01const_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">nlohmann::detail::is_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="d1/d8d/structnlohmann_1_1detail_1_1is__constructible_3_01const_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">nlohmann::detail::is_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="d4/df4/structnlohmann_1_1detail_1_1is__constructible_3_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">nlohmann::detail::is_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="dc/d01/structnlohmann_1_1detail_1_1is__constructible_3_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">nlohmann::detail::is_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="d3/d52/structnlohmann_1_1detail_1_1is__constructible__array__type" prot="public">nlohmann::detail::is_constructible_array_type</innerclass>
    <innerclass refid="d8/d8b/structnlohmann_1_1detail_1_1is__constructible__array__type__impl" prot="public">nlohmann::detail::is_constructible_array_type_impl</innerclass>
    <innerclass refid="db/d25/structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01BasicJsonType_00_01Construc0e52d76e0092123e197792b4c785ae52" prot="public">nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; !std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &amp;&amp;is_default_constructible&lt; ConstructibleArrayType &gt;::value &amp;&amp;(std::is_move_assignable&lt; ConstructibleArrayType &gt;::value||std::is_copy_assignable&lt; ConstructibleArrayType &gt;::value)&amp;&amp;is_detected&lt; value_type_t, ConstructibleArrayType &gt;::value &amp;&amp;is_detected&lt; iterator_t, ConstructibleArrayType &gt;::value &amp;&amp;is_complete_type&lt; detected_t&lt; value_type_t, ConstructibleArrayType &gt; &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="dd/d45/structnlohmann_1_1detail_1_1is__constructible__array__type__impl_3_01BasicJsonType_00_01Construce6fa33688da703b95649da4749cdeb98" prot="public">nlohmann::detail::is_constructible_array_type_impl&lt; BasicJsonType, ConstructibleArrayType, enable_if_t&lt; std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::value_type &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="dc/d11/structnlohmann_1_1detail_1_1is__constructible__object__type" prot="public">nlohmann::detail::is_constructible_object_type</innerclass>
    <innerclass refid="dd/da4/structnlohmann_1_1detail_1_1is__constructible__object__type__impl" prot="public">nlohmann::detail::is_constructible_object_type_impl</innerclass>
    <innerclass refid="d2/d51/structnlohmann_1_1detail_1_1is__constructible__object__type__impl_3_01BasicJsonType_00_01Construa4d1e16800f2c4963485512ecf18377c" prot="public">nlohmann::detail::is_constructible_object_type_impl&lt; BasicJsonType, ConstructibleObjectType, enable_if_t&lt; is_detected&lt; mapped_type_t, ConstructibleObjectType &gt;::value &amp;&amp;is_detected&lt; key_type_t, ConstructibleObjectType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d3/d84/structnlohmann_1_1detail_1_1is__constructible__string__type" prot="public">nlohmann::detail::is_constructible_string_type</innerclass>
    <innerclass refid="de/df0/structnlohmann_1_1detail_1_1is__constructible__string__type__impl" prot="public">nlohmann::detail::is_constructible_string_type_impl</innerclass>
    <innerclass refid="df/dc0/structnlohmann_1_1detail_1_1is__constructible__string__type__impl_3_01BasicJsonType_00_01Construe4743afb22172cdb3c5f428800835387" prot="public">nlohmann::detail::is_constructible_string_type_impl&lt; BasicJsonType, ConstructibleStringType, enable_if_t&lt; is_detected_exact&lt; typename BasicJsonType::string_t::value_type, value_type_t, ConstructibleStringType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="df/d17/structnlohmann_1_1detail_1_1is__constructible__tuple" prot="public">nlohmann::detail::is_constructible_tuple</innerclass>
    <innerclass refid="d3/d6a/structnlohmann_1_1detail_1_1is__constructible__tuple_3_01T1_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4" prot="public">nlohmann::detail::is_constructible_tuple&lt; T1, std::tuple&lt; Args... &gt; &gt;</innerclass>
    <innerclass refid="d2/d91/structnlohmann_1_1detail_1_1is__default__constructible" prot="public">nlohmann::detail::is_default_constructible</innerclass>
    <innerclass refid="d7/d7b/structnlohmann_1_1detail_1_1is__default__constructible_3_01const_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">nlohmann::detail::is_default_constructible&lt; const std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="dc/dd7/structnlohmann_1_1detail_1_1is__default__constructible_3_01const_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">nlohmann::detail::is_default_constructible&lt; const std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="da/dbd/structnlohmann_1_1detail_1_1is__default__constructible_3_01std_1_1pair_3_01T1_00_01T2_01_4_01_4" prot="public">nlohmann::detail::is_default_constructible&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="d5/dc8/structnlohmann_1_1detail_1_1is__default__constructible_3_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4" prot="public">nlohmann::detail::is_default_constructible&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="de/dbc/structnlohmann_1_1detail_1_1is__getable" prot="public">nlohmann::detail::is_getable</innerclass>
    <innerclass refid="d6/d46/structnlohmann_1_1detail_1_1is__iterator__of__multibyte" prot="public">nlohmann::detail::is_iterator_of_multibyte</innerclass>
    <innerclass refid="d3/d30/structnlohmann_1_1detail_1_1is__iterator__traits" prot="public">nlohmann::detail::is_iterator_traits</innerclass>
    <innerclass refid="d9/d8e/structnlohmann_1_1detail_1_1is__iterator__traits_3_01iterator__traits_3_01T_01_4_01_4" prot="public">nlohmann::detail::is_iterator_traits&lt; iterator_traits&lt; T &gt; &gt;</innerclass>
    <innerclass refid="d3/d0b/structnlohmann_1_1detail_1_1is__json__ref" prot="public">nlohmann::detail::is_json_ref</innerclass>
    <innerclass refid="d0/d8d/structnlohmann_1_1detail_1_1is__json__ref_3_01json__ref_3_01T_01_4_01_4" prot="public">nlohmann::detail::is_json_ref&lt; json_ref&lt; T &gt; &gt;</innerclass>
    <innerclass refid="dc/dc3/structnlohmann_1_1detail_1_1is__sax" prot="public">nlohmann::detail::is_sax</innerclass>
    <innerclass refid="d1/d2d/structnlohmann_1_1detail_1_1is__sax__static__asserts" prot="public">nlohmann::detail::is_sax_static_asserts</innerclass>
    <innerclass refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl" prot="public">nlohmann::detail::iter_impl</innerclass>
    <innerclass refid="db/dda/classnlohmann_1_1detail_1_1iteration__proxy" prot="public">nlohmann::detail::iteration_proxy</innerclass>
    <innerclass refid="d5/de9/classnlohmann_1_1detail_1_1iteration__proxy__value" prot="public">nlohmann::detail::iteration_proxy_value</innerclass>
    <innerclass refid="d4/dbe/classnlohmann_1_1detail_1_1iterator__input__adapter" prot="public">nlohmann::detail::iterator_input_adapter</innerclass>
    <innerclass refid="d4/d8c/structnlohmann_1_1detail_1_1iterator__input__adapter__factory" prot="public">nlohmann::detail::iterator_input_adapter_factory</innerclass>
    <innerclass refid="da/d6d/structnlohmann_1_1detail_1_1iterator__input__adapter__factory_3_01IteratorType_00_01enable__if__0e86378a778d78dd2284e92dc30f4902" prot="public">nlohmann::detail::iterator_input_adapter_factory&lt; IteratorType, enable_if_t&lt; is_iterator_of_multibyte&lt; IteratorType &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d8/db6/structnlohmann_1_1detail_1_1iterator__traits" prot="public">nlohmann::detail::iterator_traits</innerclass>
    <innerclass refid="da/d99/structnlohmann_1_1detail_1_1iterator__traits_3_01T_01_5_00_01enable__if__t_3_01std_1_1is__object_3_01T_01_4_1_1value_01_4_01_4" prot="public">nlohmann::detail::iterator_traits&lt; T *, enable_if_t&lt; std::is_object&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d5/da3/structnlohmann_1_1detail_1_1iterator__traits_3_01T_00_01enable__if__t_3_01_9std_1_1is__pointer_3_01T_01_4_1_1value_01_4_01_4" prot="public">nlohmann::detail::iterator_traits&lt; T, enable_if_t&lt; !std::is_pointer&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="d5/d3c/structnlohmann_1_1detail_1_1iterator__types" prot="public">nlohmann::detail::iterator_types</innerclass>
    <innerclass refid="d7/d1d/structnlohmann_1_1detail_1_1iterator__types_3_01It_00_01void__t_3_01typename_01It_1_1difference_d2be8685966c97e00e99d4fd2366dc0b" prot="public">nlohmann::detail::iterator_types&lt; It, void_t&lt; typename It::difference_type, typename It::value_type, typename It::pointer, typename It::reference, typename It::iterator_category &gt; &gt;</innerclass>
    <innerclass refid="da/d10/classnlohmann_1_1detail_1_1json__ref" prot="public">nlohmann::detail::json_ref</innerclass>
    <innerclass refid="de/d74/classnlohmann_1_1detail_1_1json__reverse__iterator" prot="public">nlohmann::detail::json_reverse_iterator</innerclass>
    <innerclass refid="d2/d2a/classnlohmann_1_1detail_1_1json__sax__acceptor" prot="public">nlohmann::detail::json_sax_acceptor</innerclass>
    <innerclass refid="d6/d69/classnlohmann_1_1detail_1_1json__sax__dom__callback__parser" prot="public">nlohmann::detail::json_sax_dom_callback_parser</innerclass>
    <innerclass refid="dc/d68/classnlohmann_1_1detail_1_1json__sax__dom__parser" prot="public">nlohmann::detail::json_sax_dom_parser</innerclass>
    <innerclass refid="d8/d22/classnlohmann_1_1detail_1_1lexer" prot="public">nlohmann::detail::lexer</innerclass>
    <innerclass refid="de/d77/classnlohmann_1_1detail_1_1lexer__base" prot="public">nlohmann::detail::lexer_base</innerclass>
    <innerclass refid="d3/d72/structnlohmann_1_1detail_1_1make__void" prot="public">nlohmann::detail::make_void</innerclass>
    <innerclass refid="da/d31/structnlohmann_1_1detail_1_1nonesuch" prot="public">nlohmann::detail::nonesuch</innerclass>
    <innerclass refid="d5/d1b/classnlohmann_1_1detail_1_1other__error" prot="public">nlohmann::detail::other_error</innerclass>
    <innerclass refid="d2/d67/classnlohmann_1_1detail_1_1out__of__range" prot="public">nlohmann::detail::out_of_range</innerclass>
    <innerclass refid="df/d13/classnlohmann_1_1detail_1_1output__adapter" prot="public">nlohmann::detail::output_adapter</innerclass>
    <innerclass refid="dc/d9b/structnlohmann_1_1detail_1_1output__adapter__protocol" prot="public">nlohmann::detail::output_adapter_protocol</innerclass>
    <innerclass refid="d8/d94/classnlohmann_1_1detail_1_1output__stream__adapter" prot="public">nlohmann::detail::output_stream_adapter</innerclass>
    <innerclass refid="d2/d39/classnlohmann_1_1detail_1_1output__string__adapter" prot="public">nlohmann::detail::output_string_adapter</innerclass>
    <innerclass refid="d5/d66/classnlohmann_1_1detail_1_1output__vector__adapter" prot="public">nlohmann::detail::output_vector_adapter</innerclass>
    <innerclass refid="d5/d1a/classnlohmann_1_1detail_1_1parse__error" prot="public">nlohmann::detail::parse_error</innerclass>
    <innerclass refid="df/d6b/classnlohmann_1_1detail_1_1parser" prot="public">nlohmann::detail::parser</innerclass>
    <innerclass refid="d6/d02/structnlohmann_1_1detail_1_1position__t" prot="public">nlohmann::detail::position_t</innerclass>
    <innerclass refid="d2/d2c/classnlohmann_1_1detail_1_1primitive__iterator__t" prot="public">nlohmann::detail::primitive_iterator_t</innerclass>
    <innerclass refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" prot="public">nlohmann::detail::priority_tag</innerclass>
    <innerclass refid="d2/ddd/structnlohmann_1_1detail_1_1priority__tag_3_010_01_4" prot="public">nlohmann::detail::priority_tag&lt; 0 &gt;</innerclass>
    <innerclass refid="d4/d0a/classnlohmann_1_1detail_1_1serializer" prot="public">nlohmann::detail::serializer</innerclass>
    <innerclass refid="da/d7e/classnlohmann_1_1detail_1_1span__input__adapter" prot="public">nlohmann::detail::span_input_adapter</innerclass>
    <innerclass refid="d1/d9b/structnlohmann_1_1detail_1_1static__const" prot="public">nlohmann::detail::static_const</innerclass>
    <innerclass refid="d2/d7e/structnlohmann_1_1detail_1_1to__json__fn" prot="public">nlohmann::detail::to_json_fn</innerclass>
    <innerclass refid="da/d1c/classnlohmann_1_1detail_1_1type__error" prot="public">nlohmann::detail::type_error</innerclass>
    <innerclass refid="d1/dea/classnlohmann_1_1detail_1_1wide__string__input__adapter" prot="public">nlohmann::detail::wide_string_input_adapter</innerclass>
    <innerclass refid="d2/d2c/structnlohmann_1_1detail_1_1wide__string__input__helper" prot="public">nlohmann::detail::wide_string_input_helper</innerclass>
    <innerclass refid="df/d83/structnlohmann_1_1detail_1_1wide__string__input__helper_3_01BaseInputAdapter_00_012_01_4" prot="public">nlohmann::detail::wide_string_input_helper&lt; BaseInputAdapter, 2 &gt;</innerclass>
    <innerclass refid="d5/d14/structnlohmann_1_1detail_1_1wide__string__input__helper_3_01BaseInputAdapter_00_014_01_4" prot="public">nlohmann::detail::wide_string_input_helper&lt; BaseInputAdapter, 4 &gt;</innerclass>
    <innernamespace refid="d9/d10/namespacenlohmann_1_1detail_1_1container__input__adapter__factory__impl">nlohmann::detail::container_input_adapter_factory_impl</innernamespace>
    <innernamespace refid="dc/d41/namespacenlohmann_1_1detail_1_1dtoa__impl">nlohmann::detail::dtoa_impl</innernamespace>
    <innernamespace refid="df/d92/namespacenlohmann_1_1detail_1_1utility__internal">nlohmann::detail::utility_internal</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" prot="public" static="no">
        <name>value_t</name>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a37a6259cc0c1dae299a7866489dff0bd" prot="public">
          <name>null</name>
          <briefdescription>
<para>null value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985aa8cfde6331bd59eb2ac96f8911c4b666" prot="public">
          <name>object</name>
          <briefdescription>
<para>object (unordered set of name/value pairs) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" prot="public">
          <name>array</name>
          <briefdescription>
<para>array (ordered collection of values) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" prot="public">
          <name>string</name>
          <briefdescription>
<para>string value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27" prot="public">
          <name>boolean</name>
          <briefdescription>
<para>boolean value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc" prot="public">
          <name>number_integer</name>
          <briefdescription>
<para>number value (signed integer) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e" prot="public">
          <name>number_unsigned</name>
          <briefdescription>
<para>number value (unsigned integer) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef" prot="public">
          <name>number_float</name>
          <briefdescription>
<para>number value (floating-point) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a9d7183f16acce70658f686ae7f1a4d20" prot="public">
          <name>binary</name>
          <briefdescription>
<para>binary array (ordered collection of bytes) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a94708897ec9db8647dfe695714c98e46" prot="public">
          <name>discarded</name>
          <briefdescription>
<para>discarded by the parser callback function </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the JSON type enumeration </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration collects the different JSON types. It is internally used to distinguish the stored values, and the functions <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aedc7afad96292b5ab61a2e0ad3067f5f" kindref="member">basic_json::is_null()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a57e8411a770a6263d6d8f2116c37f3aa" kindref="member">basic_json::is_object()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab5b70d60a636b9c5e10f6c8caac60b9e" kindref="member">basic_json::is_array()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ab303d17366c26fca12242c7f8def1bb7" kindref="member">basic_json::is_string()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a911b11e855e685fa59ea1d111490b36b" kindref="member">basic_json::is_boolean()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1abd47ac8eba63833152795280f75b5851" kindref="member">basic_json::is_number()</ref> (with <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ac4b4acf2c0ad075c0dc125a65c102362" kindref="member">basic_json::is_number_integer()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5493f2ed1e07b0ece428bd5a47e2fb95" kindref="member">basic_json::is_number_unsigned()</ref>, and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a116cdb9300b56519fc9cf756609296cb" kindref="member">basic_json::is_number_float()</ref>), <ref refid="d9/dcc/classnlohmann_1_1basic__json_1aecaaa0613d3f3a5b49b34b02afc5f85d" kindref="member">basic_json::is_discarded()</ref>, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a548d2d4013da24e7d7510d90febc80c4" kindref="member">basic_json::is_primitive()</ref>, and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a4e05a7d5deec758f1d830741b68b4249" kindref="member">basic_json::is_structured()</ref> rely on it.</para><para><simplesect kind="note"><para>There are three enumeration entries (number_integer, number_unsigned, and number_float), because the library distinguishes these three types for numbers: <ref refid="d9/dcc/classnlohmann_1_1basic__json_1ae09af9c23351b7245d9be4d1b2035fef" kindref="member">basic_json::number_unsigned_t</ref> is used for unsigned integers, <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a11e390944da90db83089eb2426a749d3" kindref="member">basic_json::number_integer_t</ref> is used for signed integers, and <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a5b8abaebd922d82d69756327c0c347e6" kindref="member">basic_json::number_float_t</ref> is used for floating-point numbers or to approximate integers which do not fit in the limits of their respective type.</para></simplesect>
<simplesect kind="see"><para>see <ref refid="d9/dcc/classnlohmann_1_1basic__json_1a19734fbc9c97d536832892ddacd6b62a" kindref="member">basic_json::basic_json(const value_t value_type)</ref> <ndash/> create a JSON value with the default value for a given type</para></simplesect>
<simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="119" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="118" bodyend="130"/>
      </memberdef>
      <memberdef kind="enum" id="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40" prot="public" static="no">
        <name>input_format_t</name>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a466deec76ecdf5fca6d38571f6324d54" prot="public">
          <name>json</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40aaf9de350d652f0c9055ddab514bd23ea" prot="public">
          <name>cbor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40ac40d516627022a54003ac2b74a82688a" prot="public">
          <name>msgpack</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a4537f20910e85437f6d07701864084e8" prot="public">
          <name>ubjson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1aa554fc6a11519e4f347deb25a9f0db40a0b6879b186bfb2b1ec65d2460e4eccd4" prot="public">
          <name>bson</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the supported input formats </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5250" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5250" bodyend="5250"/>
      </memberdef>
      <memberdef kind="enum" id="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9ac" prot="public" static="no">
        <name>cbor_tag_handler_t</name>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9acacb5e100e5a9a3e7f6d1fd97512215282" prot="public">
          <name>error</name>
          <briefdescription>
<para>throw a <ref refid="d5/d1a/classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref> exception in case of a tag </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a58bb1ef1a9ad287a9cfaf1855784d9aca567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
<para>ignore tags </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>how to treat CBOR tags </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8213" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8212" bodyend="8216"/>
      </memberdef>
      <memberdef kind="enum" id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1a" prot="public" static="no">
        <name>parse_event_t</name>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aae73f17027cb0acbb537f29d0a6944b26" prot="public">
          <name>object_start</name>
          <briefdescription>
<para>the parser read <computeroutput>{</computeroutput> and started to process a JSON object </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aaf63e2a2468a37aa4f394fcc3bcb8249c" prot="public">
          <name>object_end</name>
          <briefdescription>
<para>the parser read <computeroutput>}</computeroutput> and finished processing a JSON object </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aaa4388a3d92419edbb1c6efd4d52461f3" prot="public">
          <name>array_start</name>
          <briefdescription>
<para>the parser read <computeroutput>[</computeroutput> and started to process a JSON array </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa49642fb732aa2e112188fba1f9d3ef7f" prot="public">
          <name>array_end</name>
          <briefdescription>
<para>the parser read <computeroutput>]</computeroutput> and finished processing a JSON array </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa3c6e0b8a9c15224a8228b9a98ca1531d" prot="public">
          <name>key</name>
          <briefdescription>
<para>the parser read a key of a value in an object </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804" prot="public">
          <name>value</name>
          <briefdescription>
<para>the parser finished reading a JSON value </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="10683" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="10682" bodyend="10696"/>
      </memberdef>
      <memberdef kind="enum" id="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967df" prot="public" static="no">
        <name>error_handler_t</name>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa2133fd717402a7966ee88d06f9e0b792" prot="public">
          <name>strict</name>
          <briefdescription>
<para>throw a <ref refid="da/d1c/classnlohmann_1_1detail_1_1type__error" kindref="compound">type_error</ref> exception in case of invalid UTF-8 </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa9dde360102c103867bd2f45872f1129c" prot="public">
          <name>replace</name>
          <briefdescription>
<para>replace invalid UTF-8 sequences with U+FFFD </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/df0/namespacenlohmann_1_1detail_1a5a76b60b26dc8c47256a996d18d967dfa567bc1d268f135496de3d5b946b691f3" prot="public">
          <name>ignore</name>
          <briefdescription>
<para>ignore invalid UTF-8 sequences </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>how to treat decoding errors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="15976" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="15975" bodyend="15980"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a53a082eedad9f4729fcd8fed552a21f7" prot="public" static="no">
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref> &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
        <definition>using nlohmann::detail::uncvref_t = typedef typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>uncvref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3034" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a02bcbc878bee413f25b985ada771aa9c" prot="public" static="no">
        <type>typename std::enable_if&lt; B, T &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
        <definition>using nlohmann::detail::enable_if_t = typedef typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3048" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3048" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0" prot="public" static="no">
        <type><ref refid="d9/d1c/structnlohmann_1_1detail_1_1integer__sequence" kindref="compound">integer_sequence</ref>&lt; size_t, Ints... &gt;</type>
        <definition>using nlohmann::detail::index_sequence = typedef integer_sequence&lt;size_t, Ints...&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3090" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2" prot="public" static="no">
        <type>typename <ref refid="d3/d8d/structnlohmann_1_1detail_1_1utility__internal_1_1Gen" kindref="compound">utility_internal::Gen</ref>&lt; T, N &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
        <definition>using nlohmann::detail::make_integer_sequence = typedef typename utility_internal::Gen&lt;T, N&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_integer_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3136" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a745268b2c803a873cdbe1fdecb4e88b2" kindref="member">make_integer_sequence</ref>&lt; size_t, N &gt;</type>
        <definition>using nlohmann::detail::make_index_sequence = typedef make_integer_sequence&lt;size_t, N&gt;</definition>
        <argsstring></argsstring>
        <name>make_index_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3144" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a24800493c6ec02ce033dcbb47b7fd28e" prot="public" static="no">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a9b47f1c18e3c9739b20633aeee0d0f62" kindref="member">make_index_sequence</ref>&lt; sizeof...(Ts)&gt;</type>
        <definition>using nlohmann::detail::index_sequence_for = typedef make_index_sequence&lt;sizeof...(Ts)&gt;</definition>
        <argsstring></argsstring>
        <name>index_sequence_for</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3152" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a92a167c49c6697b6ffe4f79492c705e5" prot="public" static="no">
        <type>typename <ref refid="d3/d72/structnlohmann_1_1detail_1_1make__void" kindref="compound">make_void</ref>&lt; Ts... &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
        <definition>using nlohmann::detail::void_t = typedef typename make_void&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3211" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a9135fcf616d6ac6e231a86e0a055ac44" prot="public" static="no">
        <type>typename <ref refid="dd/d10/structnlohmann_1_1detail_1_1detector" kindref="compound">detector</ref>&lt; <ref refid="da/d31/structnlohmann_1_1detail_1_1nonesuch" kindref="compound">nonesuch</ref>, <ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref>, Op, Args... &gt;::<ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
        <definition>using nlohmann::detail::is_detected = typedef typename detector&lt;nonesuch, void, Op, Args...&gt;::value_t</definition>
        <argsstring></argsstring>
        <name>is_detected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3308" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d" prot="public" static="no">
        <type>typename <ref refid="dd/d10/structnlohmann_1_1detail_1_1detector" kindref="compound">detector</ref>&lt; <ref refid="da/d31/structnlohmann_1_1detail_1_1nonesuch" kindref="compound">nonesuch</ref>, <ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref>, Op, Args... &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
        <definition>using nlohmann::detail::detected_t = typedef typename detector&lt;nonesuch, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3311" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce" prot="public" static="no">
        <type><ref refid="dd/d10/structnlohmann_1_1detail_1_1detector" kindref="compound">detector</ref>&lt; Default, <ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref>, Op, Args... &gt;</type>
        <definition>using nlohmann::detail::detected_or = typedef detector&lt;Default, void, Op, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>detected_or</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3314" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a7ac5b8ef0363101275a2827b3b117dcf" prot="public" static="no">
        <type>typename <ref refid="dc/df0/namespacenlohmann_1_1detail_1a240ce21919ab08e8a6cb3a5cfa412bce" kindref="member">detected_or</ref>&lt; Default, Op, Args... &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
        <definition>using nlohmann::detail::detected_or_t = typedef typename detected_or&lt;Default, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_or_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3317" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a7542b4dbac07817fd4849ecfa4619def" prot="public" static="no">
        <type>std::is_same&lt; Expected, <ref refid="dc/df0/namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d" kindref="member">detected_t</ref>&lt; Op, Args... &gt; &gt;</type>
        <definition>using nlohmann::detail::is_detected_exact = typedef std::is_same&lt;Expected, detected_t&lt;Op, Args...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_exact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3320" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a5262e531c46e357b33007060f294673b" prot="public" static="no">
        <type>std::is_convertible&lt; <ref refid="dc/df0/namespacenlohmann_1_1detail_1a37e97a32d0b94ce5f745427e4e40204d" kindref="member">detected_t</ref>&lt; Op, Args... &gt;, To &gt;</type>
        <definition>using nlohmann::detail::is_detected_convertible = typedef std::is_convertible&lt;detected_t&lt;Op, Args...&gt;, To&gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_convertible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3323" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a9c1795c148875722f8482d39e0eb9364" prot="public" static="no">
        <type>typename T::mapped_type</type>
        <definition>using nlohmann::detail::mapped_type_t = typedef typename T::mapped_type</definition>
        <argsstring></argsstring>
        <name>mapped_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3457" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a66dfe39f03b05d6b7265a0ff748d64ef" prot="public" static="no">
        <type>typename T::key_type</type>
        <definition>using nlohmann::detail::key_type_t = typedef typename T::key_type</definition>
        <argsstring></argsstring>
        <name>key_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3460" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1af91beae90c2fb0f931079b3d50a343bc" prot="public" static="no">
        <type>typename T::value_type</type>
        <definition>using nlohmann::detail::value_type_t = typedef typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3463" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a3603b59a17d1c5e15050743b847992f2" prot="public" static="no">
        <type>typename T::difference_type</type>
        <definition>using nlohmann::detail::difference_type_t = typedef typename T::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3466" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a26dc71e2dd9336587e56062178f9abce" prot="public" static="no">
        <type>typename T::pointer</type>
        <definition>using nlohmann::detail::pointer_t = typedef typename T::pointer</definition>
        <argsstring></argsstring>
        <name>pointer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3469" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a082bdafd3b4c61d9d1e92b35b8f75ee3" prot="public" static="no">
        <type>typename T::reference</type>
        <definition>using nlohmann::detail::reference_t = typedef typename T::reference</definition>
        <argsstring></argsstring>
        <name>reference_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3472" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1ad22d2aa3aab018050ae519f6754366e1" prot="public" static="no">
        <type>typename T::iterator_category</type>
        <definition>using nlohmann::detail::iterator_category_t = typedef typename T::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3475" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a9ff93db146174305bce1bc4c54703e11" prot="public" static="no">
        <type>typename T::iterator</type>
        <definition>using nlohmann::detail::iterator_t = typedef typename T::iterator</definition>
        <argsstring></argsstring>
        <name>iterator_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3478" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1af846b6cf2f926009ff3a7a61495ca383" prot="public" static="no">
        <type>decltype(T::to_json(std::declval&lt; Args &gt;()...))</type>
        <definition>using nlohmann::detail::to_json_function = typedef decltype(T::to_json(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>to_json_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3481" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a1711ee5cef66a0523055c8d9f024f322" prot="public" static="no">
        <type>decltype(T::from_json(std::declval&lt; Args &gt;()...))</type>
        <definition>using nlohmann::detail::from_json_function = typedef decltype(T::from_json(std::declval&lt;Args&gt;()...))</definition>
        <argsstring></argsstring>
        <name>from_json_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3484" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1ab4d22cdb6521ee3508db496dea66711e" prot="public" static="no">
        <type>decltype(std::declval&lt; T &gt;().template <ref refid="dc/df0/namespacenlohmann_1_1detail_1acc422c11342b31368f610b6f96fcedc6" kindref="member">get</ref>&lt; U &gt;())</type>
        <definition>using nlohmann::detail::get_template_function = typedef decltype(std::declval&lt;T&gt;().template get&lt;U&gt;())</definition>
        <argsstring></argsstring>
        <name>get_template_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3487" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1abc51edd46a1d1a0ff06a19f08ceff563" prot="public" static="no">
        <type>decltype(<ref refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" kindref="member">input_adapter</ref>(std::declval&lt; const char * &gt;(), std::declval&lt; const char * &gt;()))</type>
        <definition>using nlohmann::detail::contiguous_bytes_input_adapter = typedef decltype(input_adapter(std::declval&lt;const char*&gt;(), std::declval&lt;const char*&gt;()))</definition>
        <argsstring></argsstring>
        <name>contiguous_bytes_input_adapter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5649" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1ac1b4e524746bf8b790b2b776048b93c4" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().null())</type>
        <definition>using nlohmann::detail::null_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().null())</definition>
        <argsstring></argsstring>
        <name>null_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8067" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a45ec87326503b8884b664a9ef23a6c99" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().boolean(std::declval&lt; bool &gt;()))</type>
        <definition>using nlohmann::detail::boolean_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().boolean(std::declval&lt;bool&gt;()))</definition>
        <argsstring></argsstring>
        <name>boolean_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8070" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a4a3e14a011b9ea1ff849fc6d2411e6a0" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().number_integer(std::declval&lt; Integer &gt;()))</type>
        <definition>using nlohmann::detail::number_integer_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().number_integer(std::declval&lt;Integer&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_integer_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8074" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a74da7b17bda76f65d276feb18209c913" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().number_unsigned(std::declval&lt; Unsigned &gt;()))</type>
        <definition>using nlohmann::detail::number_unsigned_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().number_unsigned(std::declval&lt;Unsigned&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_unsigned_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8078" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1ad42df56e913abe26ed556e0e92f386f4" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().number_float(std::declval&lt; Float &gt;(), std::declval&lt; const String &amp; &gt;()))</type>
        <definition>using nlohmann::detail::number_float_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().number_float( std::declval&lt;Float&gt;(), std::declval&lt;const String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>number_float_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8082" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a27c3fc3bd42ac406f763184aa8ae4cb0" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().string(std::declval&lt; String &amp; &gt;()))</type>
        <definition>using nlohmann::detail::string_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().string(std::declval&lt;String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>string_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8086" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a4948bef216c2594dae7921d9c4045455" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().binary(std::declval&lt; Binary &amp; &gt;()))</type>
        <definition>using nlohmann::detail::binary_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().binary(std::declval&lt;Binary&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>binary_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8090" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a5fff1e6dcaabd367d9b1109a5682f9d4" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().start_object(std::declval&lt; std::size_t &gt;()))</type>
        <definition>using nlohmann::detail::start_object_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().start_object(std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>start_object_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8094" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a44869ca9f422b260625d78e4e8121559" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().key(std::declval&lt; String &amp; &gt;()))</type>
        <definition>using nlohmann::detail::key_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().key(std::declval&lt;String&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>key_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8098" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1af52d6d2521c386998ae940d118182ebc" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().end_object())</type>
        <definition>using nlohmann::detail::end_object_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().end_object())</definition>
        <argsstring></argsstring>
        <name>end_object_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8102" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a80273cecc45765d7b2826ec931fbffdd" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().start_array(std::declval&lt; std::size_t &gt;()))</type>
        <definition>using nlohmann::detail::start_array_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().start_array(std::declval&lt;std::size_t&gt;()))</definition>
        <argsstring></argsstring>
        <name>start_array_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8105" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1aec53c029383b34a72182210e58fadb79" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().end_array())</type>
        <definition>using nlohmann::detail::end_array_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().end_array())</definition>
        <argsstring></argsstring>
        <name>end_array_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8109" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a264d4d58bc1fd82bcc7bf6bf73d6acad" prot="public" static="no">
        <type>decltype(std::declval&lt; T &amp; &gt;().<ref refid="d5/d1a/classnlohmann_1_1detail_1_1parse__error" kindref="compound">parse_error</ref>(std::declval&lt; std::size_t &gt;(), std::declval&lt; const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp; &gt;(), std::declval&lt; const Exception &amp; &gt;()))</type>
        <definition>using nlohmann::detail::parse_error_function_t = typedef decltype(std::declval&lt;T&amp;&gt;().parse_error( std::declval&lt;std::size_t&gt;(), std::declval&lt;const std::string&amp;&gt;(), std::declval&lt;const Exception&amp;&gt;()))</definition>
        <argsstring></argsstring>
        <name>parse_error_function_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8112" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a2ac1bb00523b2502c10c97d70359ffc8" prot="public" static="no">
        <type>std::function&lt; bool(int, <ref refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1a" kindref="member">parse_event_t</ref>, BasicJsonType &amp;)&gt;</type>
        <definition>using nlohmann::detail::parser_callback_t = typedef std::function&lt;bool(int , parse_event_t , BasicJsonType&amp; )&gt;</definition>
        <argsstring></argsstring>
        <name>parser_callback_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="10699" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="10700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="dc/df0/namespacenlohmann_1_1detail_1a9b680ddfb58f27eb53a67229447fc556" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="dc/d9b/structnlohmann_1_1detail_1_1output__adapter__protocol" kindref="compound">output_adapter_protocol</ref>&lt; CharType &gt; &gt;</type>
        <definition>using nlohmann::detail::output_adapter_t = typedef std::shared_ptr&lt;output_adapter_protocol&lt;CharType&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>output_adapter_t</name>
        <briefdescription>
<para>a type to simplify interfaces </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="13151" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="13151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a09169efff3bd1771fff29bd92cea19e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool nlohmann::detail::operator&lt;</definition>
        <argsstring>(const value_t lhs, const value_t rhs) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985" kindref="member">value_t</ref></type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>comparison operator for JSON types </para>        </briefdescription>
        <detaileddescription>
<para>Returns an ordering that is similar to Python:<itemizedlist>
<listitem><para>order: null &lt; boolean &lt; number &lt; object &lt; array &lt; string &lt; binary</para></listitem><listitem><para>furthermore, each type is not smaller than itself</para></listitem><listitem><para>discarded values are not comparable</para></listitem><listitem><para>binary is represented as a b&quot;&quot; string in python and directly comparable to a string; however, making a binary array directly comparable with a string would be surprising behavior in a JSON file.</para></listitem></itemizedlist>
</para><para><simplesect kind="since"><para>version 1.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="145" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="145" bodyend="157"/>
        <referencedby refid="df/d4e/structstd_1_1less_3_1_1nlohmann_1_1detail_1_1value__t_01_4_1a10d3fea50edf7b15ead8f4ceeb006000" compoundref="d5/db8/json_8hpp" startline="25894" endline="25898">std::less&lt;::nlohmann::detail::value_t &gt;::operator()</referencedby>
        <referencedby refid="d1/d7c/classnlohmann_1_1detail_1_1iter__impl_1a634f85da575cb60b012a687efa26e11a" compoundref="d5/db8/json_8hpp" startline="11795" endline="11798">nlohmann::detail::iter_impl&lt; BasicJsonType &gt;::operator&gt;=</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aceff996baf082d6dc1873ad176d10609" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::replace_substring</definition>
        <argsstring>(std::string &amp;s, const std::string &amp;f, const std::string &amp;t)</argsstring>
        <name>replace_substring</name>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>replace all occurrences of a substring by another string </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">s</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to manipulate; changed so that all occurrences of <emphasis>f</emphasis> are replaced with <emphasis>t</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>the substring to replace with <emphasis>t</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to replace <emphasis>f</emphasis> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The search string <emphasis>f</emphasis> must not be empty. <bold>This precondition is enforced with an assertion.</bold></para></simplesect>
<simplesect kind="since"><para>version 2.0.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="2533" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="2533" bodyend="2542"/>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a9d486a036924098fe1a77de14d23f56c" compoundref="d5/db8/json_8hpp" startline="2551" endline="2556">escape</referencedby>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a0b76dc40f2f2c2f983b6b7f74976cc89" compoundref="d5/db8/json_8hpp" startline="2565" endline="2569">unescape</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a9d486a036924098fe1a77de14d23f56c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref></type>
        <definition>std::string nlohmann::detail::escape</definition>
        <argsstring>(std::string s)</argsstring>
        <name>escape</name>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>string escaping as described in RFC 6901 (Sect. 4) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to escape </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>escaped string</para></simplesect>
Note the order of escaping &quot;~&quot; to &quot;~0&quot; and &quot;/&quot; to &quot;~1&quot; is important. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="2551" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="2551" bodyend="2556"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aceff996baf082d6dc1873ad176d10609" compoundref="d5/db8/json_8hpp" startline="2533" endline="2542">replace_substring</references>
        <referencedby refid="de/df2/classnlohmann_1_1detail_1_1exception_1aa353a7dba4fd179f7224b8a2a238a264" compoundref="d5/db8/json_8hpp" startline="2664" endline="2717">nlohmann::detail::exception::diagnostics</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a1c1f21327df91a4dd6c5f5a107240385" compoundref="d5/db8/json_8hpp" startline="25641" endline="25763">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::diff</referencedby>
        <referencedby refid="da/de8/classnlohmann_1_1json__pointer_1ab0d7759d0caa6a0c0187916da28e6ee7" compoundref="d5/db8/json_8hpp" startline="12893" endline="12943">nlohmann::json_pointer&lt; BasicJsonType &gt;::flatten</referencedby>
        <referencedby refid="da/de8/classnlohmann_1_1json__pointer_1a3d4b15d32d096e3776c5d2c773b524f5" compoundref="d5/db8/json_8hpp" startline="12151" endline="12159">nlohmann::json_pointer&lt; BasicJsonType &gt;::to_string</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a0b76dc40f2f2c2f983b6b7f74976cc89" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>static void nlohmann::detail::unescape</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>unescape</name>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21" kindref="member">std::string</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>string unescaping as described in RFC 6901 (Sect. 4) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>string to unescape </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unescaped string</para></simplesect>
Note the order of escaping &quot;~1&quot; to &quot;/&quot; and &quot;~0&quot; to &quot;~&quot; is important. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="2565" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="2565" bodyend="2569"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aceff996baf082d6dc1873ad176d10609" compoundref="d5/db8/json_8hpp" startline="2533" endline="2542">replace_substring</references>
        <referencedby refid="da/de8/classnlohmann_1_1json__pointer_1ae01c32c6a071c2e5198d5dfcce290e50" compoundref="d5/db8/json_8hpp" startline="12825" endline="12883">nlohmann::json_pointer&lt; BasicJsonType &gt;::split</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a1f0395aad0fe853a4539288749d3a603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename std::nullptr_t &amp;n)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename std::nullptr_t &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3841" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3841" bodyend="3848"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
        <referencedby refid="d5/d4d/structnlohmann_1_1detail_1_1from__json__fn_1a4ab8572670a673d64b783589cf658270" compoundref="d5/db8/json_8hpp" startline="4251" endline="4256">nlohmann::detail::from_json_fn::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a85955b9c6dd31846e4b8e891f78614b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::get_arithmetic_value</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>get_arithmetic_value</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3855" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3855" bodyend="3878"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a7cb5dd7d46a60e65f9a8e0873b3f7dd8" compoundref="d5/db8/json_8hpp" startline="3918" endline="3921">from_json</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a58117f225f43d03e3a0a4a6f3d77c9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::boolean_t &amp;b)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::boolean_t &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3881" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3881" bodyend="3888"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ad74d89f77ada7a57eff38b43d4bf2335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;s)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3891" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3891" bodyend="3898"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a2932f2bc2943dac6d51669312f4fc0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleStringType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_string_type&lt; BasicJsonType, ConstructibleStringType &gt;::value &amp;&amp;!std::is_same&lt; typename BasicJsonType::string_t, ConstructibleStringType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleStringType &amp;s)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleStringType &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3907" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3907" bodyend="3915"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a7cb5dd7d46a60e65f9a8e0873b3f7dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_float_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_float_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3918" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3918" bodyend="3921"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a85955b9c6dd31846e4b8e891f78614b6" compoundref="d5/db8/json_8hpp" startline="3855" endline="3878">get_arithmetic_value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ace4d5680ba413d9fd897ccb5d9c61a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_unsigned_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_unsigned_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3924" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3924" bodyend="3927"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a85955b9c6dd31846e4b8e891f78614b6" compoundref="d5/db8/json_8hpp" startline="3855" endline="3878">get_arithmetic_value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a047d881e611fcac709dc318f730a1732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::number_integer_t &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::number_integer_t &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3930" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3930" bodyend="3933"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a85955b9c6dd31846e4b8e891f78614b6" compoundref="d5/db8/json_8hpp" startline="3855" endline="3878">get_arithmetic_value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a5440d650150d01e8015133521351b459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, EnumType &amp;e)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3937" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3937" bodyend="3942"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a85955b9c6dd31846e4b8e891f78614b6" compoundref="d5/db8/json_8hpp" startline="3855" endline="3878">get_arithmetic_value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a5cfb765aad92795abd7fda29d017272a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_getable&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::forward_list&lt; T, Allocator &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::forward_list&lt; T, Allocator &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3947" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3947" bodyend="3959"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a3df497b1d3977f071b488ecac1401517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_getable&lt; BasicJsonType, T &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::valarray&lt; T &gt; &amp;l)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::valarray&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3964" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3964" bodyend="3976"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a7deb2db8eed6f1762373dde7a6595760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, T(&amp;arr)[N]) -&gt; decltype(j.template get&lt; T &gt;(), void())</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3979" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3979" bodyend="3986"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a40f7bb070a60e8ba14fffb9c117fcbd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;arr, priority_tag&lt; 3 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3989" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3989" bodyend="3992"/>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" compoundref="d5/db8/json_8hpp" startline="4061" endline="4069">void</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aba0ce45ebb69fd2c7132a00f9a56b503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, std::array&lt; T, N &gt; &amp;arr, priority_tag&lt; 2 &gt;) -&gt; decltype(j.template get&lt; T &gt;(), void())</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">std::array</ref>&lt; T, N &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="3995" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="3995" bodyend="4003"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a7c06b590679604ecb0ea2a3b62bd254b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; ConstructibleArrayType &amp;, ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr, priority_tag&lt; 1 &gt;) -&gt; decltype(arr.reserve(std::declval&lt; typename ConstructibleArrayType::size_type &gt;()), j.template get&lt; typename ConstructibleArrayType::value_type &gt;(), void())</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4009" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4009" bodyend="4027"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a3b306ea5f5176f748572ca5b1c9a4dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_assignable&lt; ConstructibleArrayType &amp;, ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json_array_impl</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_array_impl</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4033" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4033" bodyend="4048"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a14d8cdf544585f1c38eab6a0820e55f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_array_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!is_constructible_object_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!is_constructible_string_type&lt; BasicJsonType, ConstructibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; ConstructibleArrayType, typename BasicJsonType::binary_t &gt;::value &amp;&amp;!is_basic_json&lt; ConstructibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleArrayType &amp;arr) -&gt; decltype(from_json_array_impl(j, arr, priority_tag&lt; 3 &gt;</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4058" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4058" bodyend="4059"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ad9e016d7b6a3cd2847027950aa0aac3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>j template</type>
        <definition>j template nlohmann::detail::get&lt; typename ConstructibleArrayType::value_type &gt;</definition>
        <argsstring>()</argsstring>
        <name>get&lt; typename ConstructibleArrayType::value_type &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>j template</type>
        <definition>j template nlohmann::detail::void</definition>
        <argsstring>())</argsstring>
        <name>void</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4061" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4061" bodyend="4069"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a40f7bb070a60e8ba14fffb9c117fcbd8" compoundref="d5/db8/json_8hpp" startline="3989" endline="3992">from_json_array_impl</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
        <referencedby refid="d6/d30/classnlohmann_1_1detail_1_1binary__reader_1a2aee4c3507eca623f7cec32544fdc5b2" compoundref="d5/db8/json_8hpp" startline="8256" endline="8259">nlohmann::detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::binary_reader</referencedby>
        <referencedby refid="df/de1/namespacecudnn__frontend_1a91f2627793be5d51db9b1473275d803d" compoundref="db/d7e/cudnn__frontend__Errata_8h" startline="52" endline="83">cudnn_frontend::check_rule</referencedby>
        <referencedby refid="df/de1/namespacecudnn__frontend_1a387b9a5a9cfdb5290ff5729852714f0d" compoundref="db/d66/cudnn__frontend__Heuristics_8h" startline="228" endline="246">cudnn_frontend::get_heuristics_list</referencedby>
        <referencedby refid="df/d6b/classnlohmann_1_1detail_1_1parser_1a073b8313a5194aac3a7d5da0d935788c" compoundref="d5/db8/json_8hpp" startline="10809" endline="10823">nlohmann::detail::parser&lt; BasicJsonType, InputAdapterType &gt;::sax_parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a8f4713d1d9c1a0a5e1503c2fbafd4e40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">std::array</ref>&lt; T, sizeof...(Idx)&gt;</type>
        <definition>std::array&lt;T, sizeof...(Idx)&gt; nlohmann::detail::from_json_inplace_array_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::array&lt; T, sizeof...(Idx)&gt;&gt;, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_inplace_array_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="d0/db1/structnlohmann_1_1detail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">std::array</ref>&lt; T, sizeof...(Idx)&gt;&gt;</type>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0" kindref="member">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4072" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4072" bodyend="4076"/>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1aff04c4dbdf8cb651c9f1528d7b1d39b0" compoundref="d5/db8/json_8hpp" startline="4079" endline="4080">from_json</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aff04c4dbdf8cb651c9f1528d7b1d39b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::array&lt; T, N &gt;&gt; tag) -&gt; decltype(from_json_inplace_array_impl(std::forward&lt; BasicJsonType &gt;(j), tag, make_index_sequence&lt; N &gt;</argsstring>
        <name>from_json</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="d0/db1/structnlohmann_1_1detail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; <ref refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5" kindref="member">std::array</ref>&lt; T, N &gt;&gt;</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4079" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4079" bodyend="4080"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a8f4713d1d9c1a0a5e1503c2fbafd4e40" compoundref="d5/db8/json_8hpp" startline="4072" endline="4076">from_json_inplace_array_impl</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aeabc1adfeb8bcfbdf24c533380d1e773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, typename BasicJsonType::binary_t &amp;bin)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::binary_t &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4091" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4091" bodyend="4099"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a5b24896e5f5db6af06d939dde4b63fe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ConstructibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_constructible_object_type&lt; BasicJsonType, ConstructibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ConstructibleObjectType &amp;obj)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ConstructibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4103" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4103" bodyend="4121"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a839b0ab50d2c9bce669068f56bc41202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename ArithmeticType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_arithmetic&lt; ArithmeticType &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_unsigned_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_integer_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::number_float_t &gt;::value &amp;&amp;!std::is_same&lt; ArithmeticType, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, ArithmeticType &amp;val)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>ArithmeticType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4135" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4135" bodyend="4163"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a84e2c64f38f78ba3ea5c905ab5a2da27">boolean</references>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ad9966ecb59667235a57b4b999a649eef">number_float</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985a5763da164f8659d94a56e29df64b4bcc">number_integer</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985adce7cc8ec29055c4158828921f2f265e">number_unsigned</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aaf1b6ce9b599cd5cde8053c194082ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt;Args...&gt; nlohmann::detail::from_json_tuple_impl_base</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>from_json_tuple_impl_base</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0" kindref="member">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4166" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4166" bodyend="4169"/>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a249aceda550177adb6d09382d1377a60" compoundref="d5/db8/json_8hpp" startline="4185" endline="4188">from_json_tuple_impl</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aef618f284e214156fcfa6dfecd1dcdbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>class A1</type>
          </param>
          <param>
            <type>class A2</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; A1, A2 &gt;</type>
        <definition>std::pair&lt;A1, A2&gt; nlohmann::detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::pair&lt; A1, A2 &gt;&gt;, priority_tag&lt; 0 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="d0/db1/structnlohmann_1_1detail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::pair&lt; A1, A2 &gt;&gt;</type>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 0 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4172" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4172" bodyend="4176"/>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1adcd0ecdb8495be20b0434ed0ed65826a" compoundref="d5/db8/json_8hpp" startline="4197" endline="4198">from_json</referencedby>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1af1bc20d589bcfe61a23974cb17a34d6f" compoundref="d5/db8/json_8hpp" startline="4179" endline="4182">from_json_tuple_impl</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1af1bc20d589bcfe61a23974cb17a34d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename A1</type>
          </param>
          <param>
            <type>typename A2</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, std::pair&lt; A1, A2 &gt; &amp;p, priority_tag&lt; 1 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::pair&lt; A1, A2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 1 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4179" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4179" bodyend="4182"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aef618f284e214156fcfa6dfecd1dcdbe" compoundref="d5/db8/json_8hpp" startline="4172" endline="4176">from_json_tuple_impl</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a249aceda550177adb6d09382d1377a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Args... &gt;</type>
        <definition>std::tuple&lt;Args...&gt; nlohmann::detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, identity_tag&lt; std::tuple&lt; Args... &gt;&gt;, priority_tag&lt; 2 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="d0/db1/structnlohmann_1_1detail_1_1identity__tag" kindref="compound">identity_tag</ref>&lt; std::tuple&lt; Args... &gt;&gt;</type>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 2 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4185" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4185" bodyend="4188"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aaf1b6ce9b599cd5cde8053c194082ca9" compoundref="d5/db8/json_8hpp" startline="4166" endline="4169">from_json_tuple_impl_base</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a31838a6c7a461d3a889e6fc40b3a19e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, std::tuple&lt; Args... &gt; &amp;t, priority_tag&lt; 3 &gt;)</argsstring>
        <name>from_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="d7/d78/structnlohmann_1_1detail_1_1priority__tag" kindref="compound">priority_tag</ref>&lt; 3 &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4191" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4191" bodyend="4194"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aaf1b6ce9b599cd5cde8053c194082ca9" compoundref="d5/db8/json_8hpp" startline="4166" endline="4169">from_json_tuple_impl_base</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1adcd0ecdb8495be20b0434ed0ed65826a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename TupleRelated</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::from_json</definition>
        <argsstring>(BasicJsonType &amp;&amp;j, TupleRelated &amp;&amp;t) -&gt; decltype(from_json_tuple_impl(std::forward&lt; BasicJsonType &gt;(j), std::forward&lt; TupleRelated &gt;(t), priority_tag&lt; 3 &gt;</argsstring>
        <name>from_json</name>
        <param>
          <type>BasicJsonType &amp;&amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>TupleRelated &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4197" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4197" bodyend="4198"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1aef618f284e214156fcfa6dfecd1dcdbe" compoundref="d5/db8/json_8hpp" startline="4172" endline="4176">from_json_tuple_impl</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ae93147a54d2740228ef16a5e6210ca3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Compare</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t &lt; !std::is_constructible &lt;                                        typename BasicJsonType::string_t, Key &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::map&lt; Key, Value, Compare, Allocator &gt; &amp;m)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::map&lt; Key, Value, Compare, Allocator &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4211" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4211" bodyend="4226"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aef5c8ea108f4d2b03fb4a635617510de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Hash</type>
          </param>
          <param>
            <type>typename KeyEqual</type>
          </param>
          <param>
            <type>typename Allocator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>enable_if_t &lt; !std::is_constructible &lt;                                        typename BasicJsonType::string_t, Key &gt;::value &gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::from_json</definition>
        <argsstring>(const BasicJsonType &amp;j, std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt; &amp;m)</argsstring>
        <name>from_json</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; Key, Value, Hash, KeyEqual, Allocator &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4231" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4231" bodyend="4246"/>
        <references refid="da/d1c/classnlohmann_1_1detail_1_1type__error_1a838a5e301cf97289c2d106b9ace1470f" compoundref="d5/db8/json_8hpp" startline="2916" endline="2920">nlohmann::detail::type_error::create</references>
        <references refid="d5/db8/json_8hpp_1a8df7de76ab3c9445f46f6994ec205bcd" compoundref="d5/db8/json_8hpp" startline="1564">JSON_HEDLEY_UNLIKELY</references>
        <references refid="d5/db8/json_8hpp_1a6c274f6db2e65c1b66c7d41b06ad690f" compoundref="d5/db8/json_8hpp" startline="2263">JSON_THROW</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985ab45cffe084dd3d20d928bee85e7b0f21">string</references>
        <referencedby refid="dc/dc7/structnlohmann_1_1adl__serializer_1a8180f52bf21fc610705bc521f22116ae" compoundref="d5/db8/json_8hpp" startline="4863" endline="4868">nlohmann::adl_serializer&lt; ValueType, typename &gt;::from_json</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1ad2e690ffeeff334640da1042c415bf65" compoundref="d5/db8/json_8hpp" startline="20033" endline="20039">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_impl</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a95c3851acd53eccd620b0d82855c3da1" compoundref="d5/db8/json_8hpp" startline="20256" endline="20261">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::get_to</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a3c45286b0a2f15ea0a756cb87a76cf9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename string_type</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::int_to_string</definition>
        <argsstring>(string_type &amp;target, std::size_t value)</argsstring>
        <name>int_to_string</name>
        <param>
          <type>string_type &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4300" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4300" bodyend="4305"/>
        <references refid="d3/d9b/namespacenlohmann_1a6ce645a0b8717757e096a5b5773b7a16" compoundref="d5/db8/json_8hpp" startline="25855" endline="25858">nlohmann::to_string</references>
        <referencedby refid="d5/de9/classnlohmann_1_1detail_1_1iteration__proxy__value_1af2949ac0d70212738030bfda29c5bcc2" compoundref="d5/db8/json_8hpp" startline="4361" endline="4386">nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt;::key</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1acc422c11342b31368f610b6f96fcedc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename IteratorType</type>
          </param>
          <param>
            <type>enable_if_t&lt; N==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::get</definition>
        <argsstring>(const nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt; &amp;i) -&gt; decltype(i.key())</argsstring>
        <name>get</name>
        <param>
          <type>const <ref refid="d5/de9/classnlohmann_1_1detail_1_1iteration__proxy__value" kindref="compound">nlohmann::detail::iteration_proxy_value</ref>&lt; IteratorType &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4423" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4423" bodyend="4426"/>
        <references refid="d5/de9/classnlohmann_1_1detail_1_1iteration__proxy__value_1af2949ac0d70212738030bfda29c5bcc2" compoundref="d5/db8/json_8hpp" startline="4361" endline="4386">nlohmann::detail::iteration_proxy_value&lt; IteratorType &gt;::key</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, typename BasicJsonType::boolean_t &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, T b) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4686" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4686" bodyend="4689"/>
        <referencedby refid="d2/d7e/structnlohmann_1_1detail_1_1to__json__fn_1aecfb5114c8a737fc89d98589482795b8" compoundref="d5/db8/json_8hpp" startline="4823" endline="4827">nlohmann::detail::to_json_fn::operator()</referencedby>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199" compoundref="d5/db8/json_8hpp" startline="4809" endline="4812">to_json_tuple_impl</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a7356ed05cdbbb080cee80e1211e1c6c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleString</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; typename BasicJsonType::string_t, CompatibleString &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleString &amp;s)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleString &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4693" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4693" bodyend="4696"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a4aa1ca6b7c61bf19d1f30ea5b669f68e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::string_t &amp;&amp;s)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::string_t &amp;&amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4699" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4699" bodyend="4702"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a22bffdc8bc7e43af380ba2050696b230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename FloatType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_floating_point&lt; FloatType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, FloatType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4706" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4706" bodyend="4709"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ae5fd66b5517b3b5a6c6b9fd9f29ba8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberUnsignedType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_unsigned_t, CompatibleNumberUnsignedType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberUnsignedType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberUnsignedType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4713" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4713" bodyend="4716"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a91fe576be579c8c2fdd14610605c6dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleNumberIntegerType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_integer_type&lt; typename BasicJsonType::number_integer_t, CompatibleNumberIntegerType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, CompatibleNumberIntegerType val) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>CompatibleNumberIntegerType</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4720" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4720" bodyend="4723"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a0c8b159dba71981d6c555d284cf6e2bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_enum&lt; EnumType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, EnumType e) noexcept</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>EnumType</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4727" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4727" bodyend="4731"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aeca6fb5fede5ed1e12a4420d98a5692b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::vector&lt; bool &gt; &amp;e)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4734" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4734" bodyend="4737"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a3afebc132c5ff83f9cd160e52030fdfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleArrayType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_array_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!is_compatible_object_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!is_compatible_string_type&lt; BasicJsonType, CompatibleArrayType &gt;::value &amp;&amp;!std::is_same&lt; typename BasicJsonType::binary_t, CompatibleArrayType &gt;::value &amp;&amp;!is_basic_json&lt; CompatibleArrayType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleArrayType &amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleArrayType &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4747" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4747" bodyend="4750"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a22191081208b226e3875e1118107c281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const typename BasicJsonType::binary_t &amp;bin)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const typename BasicJsonType::binary_t &amp;</type>
          <declname>bin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4753" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4753" bodyend="4756"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a7f7c7b9760161b774cdc0b4b838fae64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_convertible&lt; T, BasicJsonType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::valarray&lt; T &gt; &amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::valarray&lt; T &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4760" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4760" bodyend="4763"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aa0fd1b5788e9ba37e31da43dda738cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::array_t &amp;&amp;arr)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::array_t &amp;&amp;</type>
          <declname>arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4766" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4766" bodyend="4769"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a24c9c12f3839c94e09532f08de85e949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename CompatibleObjectType</type>
          </param>
          <param>
            <type>enable_if_t&lt; is_compatible_object_type&lt; BasicJsonType, CompatibleObjectType &gt;::value &amp;&amp;!is_basic_json&lt; CompatibleObjectType &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const CompatibleObjectType &amp;obj)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const CompatibleObjectType &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4773" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4773" bodyend="4776"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ac9f7a5542851c61d93740148eaec509f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, typename BasicJsonType::object_t &amp;&amp;obj)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>typename BasicJsonType::object_t &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4779" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4779" bodyend="4782"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a20ea5175c8999fc8b673e46b892f71f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>enable_if_t&lt; !std::is_constructible&lt; typename BasicJsonType::string_t, const T(&amp;)[N]&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const T(&amp;arr)[N])</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>arr</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4789" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4789" bodyend="4792"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ab64eeb55b44db44eb8e9070229eb97df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_constructible&lt; BasicJsonType, T1 &gt;::value &amp;&amp;std::is_constructible&lt; BasicJsonType, T2 &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const std::pair&lt; T1, T2 &gt; &amp;p)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4795" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4795" bodyend="4798"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aaa77b0c9745130b77733a92a1a2e82ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>enable_if_t&lt; std::is_same&lt; T, iteration_proxy_value&lt; typename BasicJsonType::iterator &gt;&gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json</definition>
        <argsstring>(BasicJsonType &amp;j, const T &amp;b)</argsstring>
        <name>to_json</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4803" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4803" bodyend="4806"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a232bddcef573bde8777a6a87da0048dd" compoundref="d5/db8/json_8hpp" startline="18543" endline="18550">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::basic_json</referencedby>
        <referencedby refid="dc/dc7/structnlohmann_1_1adl__serializer_1afdcc8f0204ce8ac7d28a5403f6e1f0e7" compoundref="d5/db8/json_8hpp" startline="4900" endline="4905">nlohmann::adl_serializer&lt; ValueType, typename &gt;::to_json</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a510dfa15b01e9a8afe31600a27b28199" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Idx</declname>
            <defname>Idx</defname>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a59fca69799f6b9e366710cb9043aa77d" kindref="member">void</ref></type>
        <definition>void nlohmann::detail::to_json_tuple_impl</definition>
        <argsstring>(BasicJsonType &amp;j, const Tuple &amp;t, index_sequence&lt; Idx... &gt;)</argsstring>
        <name>to_json_tuple_impl</name>
        <param>
          <type>BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <param>
          <type>const Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1a422430dab7adbe4dfcf125dfcfbeffd0" kindref="member">index_sequence</ref>&lt; Idx... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="4809" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="4809" bodyend="4812"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1a804b98cbe89b7e44b698f2ca860490" compoundref="d5/db8/json_8hpp" startline="4686" endline="4689">to_json</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">value</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a66eb4d912b6f872d6983f7d0826f32c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t nlohmann::detail::combine</definition>
        <argsstring>(std::size_t seed, std::size_t h) noexcept</argsstring>
        <name>combine</name>
        <param>
          <type>std::size_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5099" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5099" bodyend="5103"/>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a679e5e522ac6afa5d5923292fab450b8" compoundref="d5/db8/json_8hpp" startline="5117" endline="5202">hash</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a679e5e522ac6afa5d5923292fab450b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename BasicJsonType</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t nlohmann::detail::hash</definition>
        <argsstring>(const BasicJsonType &amp;j)</argsstring>
        <name>hash</name>
        <param>
          <type>const BasicJsonType &amp;</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>hash a JSON value </para>        </briefdescription>
        <detaileddescription>
<para>The hash function tries to rely on std::hash where possible. Furthermore, the type of the JSON value is taken into account to have different hash values for null, 0, 0U, and false, etc.</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>BasicJsonType</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> specialization </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON value to hash </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash value of j </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5117" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5117" bodyend="5202"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a66eb4d912b6f872d6983f7d0826f32c6" compoundref="d5/db8/json_8hpp" startline="5099" endline="5103">combine</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <referencedby refid="dd/d6b/structstd_1_1hash_3_01nlohmann_1_1json_01_4_1aec1567d1fa47dbe5b77954dce3a55b64" compoundref="d5/db8/json_8hpp" startline="25878" endline="25881">std::hash&lt; nlohmann::json &gt;::operator()</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IteratorType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d4/d8c/structnlohmann_1_1detail_1_1iterator__input__adapter__factory" kindref="compound">iterator_input_adapter_factory</ref>&lt; IteratorType &gt;::adapter_type</type>
        <definition>iterator_input_adapter_factory&lt;IteratorType&gt;::adapter_type nlohmann::detail::input_adapter</definition>
        <argsstring>(IteratorType first, IteratorType last)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>IteratorType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>IteratorType</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5594" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5594" bodyend="5598"/>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a32872afe5bfd040777e3e2bb85f0ca55" compoundref="d5/db8/json_8hpp" startline="23898" endline="23902">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::accept</referencedby>
        <referencedby refid="d0/dc6/structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adapte602516bdb0b70b8ee5c6d4ff825368be_1a282eae71ce3b7a4249c6bc06da8b2670" compoundref="d5/db8/json_8hpp" startline="5619" endline="5622">nlohmann::detail::container_input_adapter_factory_impl::container_input_adapter_factory&lt; ContainerType, void_t&lt; decltype(begin(std::declval&lt; ContainerType &gt;()), end(std::declval&lt; ContainerType &gt;()))&gt; &gt;::create</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a4e02793f2691aa29ab7cb69fddafbf5c" compoundref="d5/db8/json_8hpp" startline="25012" endline="25021">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_bson</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a44dd5635fb2da4710f6cd6e42b72773f" compoundref="d5/db8/json_8hpp" startline="24637" endline="24647">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_cbor</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1adbcab52fca1e25b3311ef14e71a57590" compoundref="d5/db8/json_8hpp" startline="24781" endline="24790">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_msgpack</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1aa81f62db69978b90ff701f05c72e03a7" compoundref="d5/db8/json_8hpp" startline="24898" endline="24907">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::from_ubjson</referencedby>
        <referencedby refid="d6/d30/classnlohmann_1_1detail_1_1binary__reader_1a26c694413fb860057e1a839d5422b361" compoundref="d5/db8/json_8hpp" startline="10373" endline="10420">nlohmann::detail::binary_reader&lt; BasicJsonType, InputAdapterType, SAX &gt;::get_ubjson_high_precision_number</referencedby>
        <referencedby refid="dc/df0/namespacenlohmann_1_1detail_1a690f7e555056ce490bd47dd5cdf9b48d" compoundref="d5/db8/json_8hpp" startline="5659" endline="5664">input_adapter</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a15018ade392a844ea32d5188d1a0b9c6" compoundref="d5/db8/json_8hpp" startline="23806" endline="23814">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::parse</referencedby>
        <referencedby refid="d9/dcc/classnlohmann_1_1basic__json_1a12b382c6407da5543827ce4b24bb5008" compoundref="d5/db8/json_8hpp" startline="23961" endline="23970">nlohmann::basic_json&lt; ObjectType, ArrayType, StringType, BooleanType, NumberIntegerType, NumberUnsignedType, NumberFloatType, AllocatorType, JSONSerializer, BinaryType &gt;::sax_parse</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a611bebbfa9ee64dd8fee1e8c4bc3cbf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d1/d62/structnlohmann_1_1detail_1_1container__input__adapter__factory__impl_1_1container__input__adapter__factory" kindref="compound">container_input_adapter_factory_impl::container_input_adapter_factory</ref>&lt; ContainerType &gt;::adapter_type</type>
        <definition>container_input_adapter_factory_impl::container_input_adapter_factory&lt;ContainerType&gt;::adapter_type nlohmann::detail::input_adapter</definition>
        <argsstring>(const ContainerType &amp;container)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>const ContainerType &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5628" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5628" bodyend="5631"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a520988513cac994a1dfd16b5859a1ca6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="da/d14/classnlohmann_1_1detail_1_1file__input__adapter" kindref="compound">file_input_adapter</ref></type>
        <definition>file_input_adapter nlohmann::detail::input_adapter</definition>
        <argsstring>(std::FILE *file)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>std::FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5634" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5634" bodyend="5637"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1af9fa97bf92767dc7f9dfe1abdfb1c6ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/df0/classnlohmann_1_1detail_1_1input__stream__adapter" kindref="compound">input_stream_adapter</ref></type>
        <definition>input_stream_adapter nlohmann::detail::input_adapter</definition>
        <argsstring>(std::istream &amp;stream)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5639" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5639" bodyend="5642"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1aaf150c2591ecac4e821e9036ef847ef8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/df0/classnlohmann_1_1detail_1_1input__stream__adapter" kindref="compound">input_stream_adapter</ref></type>
        <definition>input_stream_adapter nlohmann::detail::input_adapter</definition>
        <argsstring>(std::istream &amp;&amp;stream)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>std::istream &amp;&amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5644" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5644" bodyend="5647"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a690f7e555056ce490bd47dd5cdf9b48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_pointer&lt; CharT &gt;::value &amp;&amp;!std::is_array&lt; CharT &gt;::value &amp;&amp;std::is_integral&lt; typename std::remove_pointer&lt; CharT &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref> &gt;::value &amp;&amp;sizeof(typename std::remove_pointer&lt; CharT &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref>)==1, int &gt;::<ref refid="db/d0a/classstd_1_1conditional_1_1type" kindref="compound">type</ref></type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="dc/df0/namespacenlohmann_1_1detail_1abc51edd46a1d1a0ff06a19f08ceff563" kindref="member">contiguous_bytes_input_adapter</ref></type>
        <definition>contiguous_bytes_input_adapter nlohmann::detail::input_adapter</definition>
        <argsstring>(CharT b)</argsstring>
        <name>input_adapter</name>
        <param>
          <type>CharT</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5659" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5659" bodyend="5664"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">input_adapter</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a7908f7aa06f20e6083619d1d4b4eb769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto nlohmann::detail::input_adapter</definition>
        <argsstring>(T(&amp;array)[N]) -&gt; decltype(input_adapter(array, array+N))</argsstring>
        <name>input_adapter</name>
        <param>
          <type>T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="5667" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="5667" bodyend="5670"/>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a1ed8fc6239da25abcaf681d30ace4985af1f713c9e000f5d3f280adbd124df4f5">array</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1ad11a087dbe66eade5af4056aef9600bf" compoundref="d5/db8/json_8hpp" startline="5594" endline="5598">input_adapter</references>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1ad2860d9bcd96cd7b8258a5b94674508c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool nlohmann::detail::little_endianess</definition>
        <argsstring>(int num=1) noexcept</argsstring>
        <name>little_endianess</name>
        <param>
          <type>int</type>
          <declname>num</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>determine system byte order </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if and only if system&apos;s byte order is little endian</para></simplesect>
<simplesect kind="note"><para>from <ulink url="https://stackoverflow.com/a/1001328/266378">https://stackoverflow.com/a/1001328/266378</ulink> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="8225" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="8225" bodyend="8228"/>
      </memberdef>
      <memberdef kind="function" id="dc/df0/namespacenlohmann_1_1detail_1a6cca370ac6c99294dbe4fe24716a57dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FloatType</type>
          </param>
        </templateparamlist>
        <type><ref refid="d5/db8/json_8hpp_1a5f2aaec3b681d0a72f7d6e90b70cdcd1" kindref="member">JSON_HEDLEY_RETURNS_NON_NULL</ref> char *</type>
        <definition>JSON_HEDLEY_RETURNS_NON_NULL char* nlohmann::detail::to_chars</definition>
        <argsstring>(char *first, const char *last, FloatType value)</argsstring>
        <name>to_chars</name>
        <param>
          <type>char *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>last</declname>
        </param>
        <param>
          <type>FloatType</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>generates a decimal representation of the floating-point number value in [first, last). </para>        </briefdescription>
        <detaileddescription>
<para>The format of the resulting decimal representation is similar to printf&apos;s g format. Returns an iterator pointing past-the-end of the decimal representation.</para><para><simplesect kind="note"><para>The input number must be finite, i.e. NaN&apos;s and Inf&apos;s are not supported. </para></simplesect>
<simplesect kind="note"><para>The buffer must be large enough. </para></simplesect>
<simplesect kind="note"><para>The result is NOT null-terminated. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="15905" column="1" bodyfile="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" bodystart="15905" bodyend="15948"/>
        <references refid="dc/d41/namespacenlohmann_1_1detail_1_1dtoa__impl_1ab441f2761e33839ca48bc2225e14a2a9" compoundref="d5/db8/json_8hpp" startline="15820" endline="15888">nlohmann::detail::dtoa_impl::format_buffer</references>
        <references refid="dc/d41/namespacenlohmann_1_1detail_1_1dtoa__impl_1a05b681dcb8569b9784c6dccfadb01633" compoundref="d5/db8/json_8hpp" startline="15668" endline="15719">nlohmann::detail::dtoa_impl::grisu2</references>
        <references refid="d5/db8/json_8hpp_1a69f131cff49da1989667220173fbeae6" compoundref="d5/db8/json_8hpp" startline="2292">JSON_ASSERT</references>
        <references refid="dc/df0/namespacenlohmann_1_1detail_1a2fb6dae6578e06ae73ca0d7cc8512b1aa2063c1608d6e0baf80249c42e2be5804">value</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>detail namespace with internal helper functions </para>    </briefdescription>
    <detaileddescription>
<para>This namespace collects functions that should not be exposed, implementations of some <ref refid="d9/dcc/classnlohmann_1_1basic__json" kindref="compound">basic_json</ref> methods, and meta-programming helpers.</para><para><simplesect kind="since"><para>version 2.1.0 </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/agopal/trees/cudnn-frontend/include/contrib/nlohmann/json/json.hpp" line="89" column="1"/>
  </compounddef>
</doxygen>
